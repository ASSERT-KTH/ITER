bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	48	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	48	None	replace
3	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe;  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &&  urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
4	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator;  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  lineSeparator;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
5	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe;  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  ||  urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
6	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||!urlSafe;  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||!urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||!urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
7	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator;  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  fileSeparator;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
8	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
9	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
10	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
11	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
12	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
13	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
14	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
15	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator.length);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.separator,  0,  lineLength);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.separator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.separator.length);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.separator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.separator,  0,  this.urlSafe);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
23	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &&  urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
24	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  lineSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
25	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSeparator);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
26	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  urlSafe);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
27	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||!urlSafe);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||!urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||!urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
28	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe);  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  ||  urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
29	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe,  lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe,  lineSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
30	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  ';';  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  ';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  ';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
31	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
32	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
33	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
34	[BUG]  [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  ';';  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  ';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  ';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
35	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  ';';  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  ';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  ';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
36	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
37	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
41	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
42	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
43	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
45	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
46	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
47	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
49	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
50	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
51	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
52	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  DECODE_TABLE;  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
53	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  new  byte[0];  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
54	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  CATCH_SEPARATOR;  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
55	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
56	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
57	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[1];  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[1];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  new  byte[1];  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
58	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  1;  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  1;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  1;  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
59	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	27	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	27	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	27	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator.length  -  1);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length  -  1);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
69	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
70	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
71	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
72	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
73	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	101	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	101	None	replace
76	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  new  byte[0];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[0];    }    	non-compiled	[CE]  ';'  expected	172	None	replace
77	[BUG]  [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe  ||  urlSafe)  {  lineSeparator  =  new  byte[0];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[0];    }    	non-compiled	[CE]  ';'  expected	172	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	191	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	43	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep;	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sepPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sepPos);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sepPos);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.lineSep);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.lineSep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.lineSep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
86	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
87	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
88	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
89	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
90	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
91	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
92	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
93	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
94	[BUG]  [BUGGY]  SecuritySystem.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
95	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
96	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineseparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineseparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineseparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.sep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
103	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
104	[BUG]  [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
105	[BUG]  [BUGGY]  this.lineSeparator  =  -1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  -1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  -1;	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
106	[BUG]  [BUGGY]  this.lineSeparator  =  1;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  1;	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
107	[BUG]  [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
108	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
109	[BUG]  [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
110	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
111	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
112	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
113	[BUG]  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSize,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSize,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sepSize,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSep,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSep,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sepSep,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sepSeparator,  0,  lineLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	209	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	209	None	replace
131	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  urlSafe;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  urlSafe;  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
132	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
133	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
134	[BUG]  [BUGGY]  SecuritySystem.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
135	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
136	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
137	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
138	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  urlSafe);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
139	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  eof  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  eof  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  eof  urlSafe);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
140	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  0,  lineSeparator);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  0,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  0,  lineSeparator);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
141	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator,  urlSafe);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
142	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  0,  lineSeparator.length);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
143	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  encoding);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  encoding);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  encoding);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
144	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  eof);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  eof);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  eof);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
145	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	208	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  *  CHUNK_SIZE);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  *  CHUNK_SIZE);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  *  CHUNK_SIZE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
152	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[1];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[1];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
153	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[4];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[4];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
154	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[3];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[3];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64];  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[64];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[64];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
156	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[2];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[2];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
157	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[16];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[16];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[16];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
158	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[6];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[6];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.bufferLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.bufferLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.bufferLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  lineSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	73	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	73	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	73	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	73	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.line,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.line,  0,  this.lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.line,  0,  this.lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.line);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.line);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.line);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
178	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	139	None	replace
180	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  4;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  4;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  4;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
181	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SECOND;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SECOND;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SECOND;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
182	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  urlSafe;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  urlSafe;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	156	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	156	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lines,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.lines,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  urlSafe);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.separator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  this.separator.length);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	83	None	replace
196	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
197	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
198	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
199	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
200	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
201	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
202	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
203	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
204	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
206	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
207	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
210	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe?  CHUNK_SEPARATOR  :  ';';  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe?  CHUNK_SEPARATOR  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  urlSafe?  CHUNK_SEPARATOR  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
211	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  ';';  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  1  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
212	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  ';';  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
213	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  ';';  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  0  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
214	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  ';'  :  ';';  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  ';'  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  ';'  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
215	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  ';';  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  3  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
216	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  ',';  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  ',';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  ',';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
217	[BUG]  [BUGGY]  this.lineSeparator  =!this.urlSafe;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!this.urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!this.urlSafe;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
218	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
219	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
220	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
221	[BUG]  [BUGGY]  this.lineSeparator  =!URL_SEPARATOR;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!URL_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!URL_SEPARATOR;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
222	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
223	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
224	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
227	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
228	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
229	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  lineSeparator.length;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
230	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_BUFFER_RESIZE_FACTOR  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_BUFFER_RESIZE_FACTOR  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_BUFFER_RESIZE_FACTOR  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
231	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
232	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  4;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  4;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE  +  4;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
233	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  }	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
234	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
235	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator!=  ';'  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator!=  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator!=  ';'	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
236	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  ==  ';'  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  ==  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  ==  ';'	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
237	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	120	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	120	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.buffer,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  this.buffer,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	120	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	159	None	replace
242	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	159	None	replace
243	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';');  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';');	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
246	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';');  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';');	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  }  ';');  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  }  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  }  ';');	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
248	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL!=  ';');  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL!=  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL!=  ';');	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
249	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [Delete]  ';');  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [Delete]  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [Delete]  ';');	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';'  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  }  ';'	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';')  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';')  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  >>  ';')	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
253	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
255	[BUG]  [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
256	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	116	None	replace
257	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator  +  urlSafe.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator  +  urlSafe.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator  +  urlSafe.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
258	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  fileSeparator.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  fileSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  fileSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
259	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator.length  +  urlSafe.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator.length  +  urlSafe.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator.length  +  urlSafe.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
260	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparatorSafe  +  urlSafe.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparatorSafe  +  urlSafe.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparatorSafe  +  urlSafe.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
261	[BUG]  [BUGGY]  this.lineSeparator  =  0  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  0  +  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  0  +  lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
262	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  lineSeparator.length  *  4;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  lineSeparator.length  *  4;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  lineSeparator.length  *  4;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
263	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe.length;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  urlSafe.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	174	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
269	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
270	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
271	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe)  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe)  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe)	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  this.sep.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
279	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
280	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.sep.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.sep,  0,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
281	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.sep.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
282	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
283	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
284	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
286	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
287	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
288	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
289	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
290	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator);    	non-compiled	[CE]  ';'  expected	192	None	replace
291	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator);    	non-compiled	[CE]  ';'  expected	192	None	replace
292	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
293	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
294	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
295	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
296	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
297	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
298	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "file.separator ").toByteArray();  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "file.separator ").toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "file.separator ").toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
299	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ").toByteArray();  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ").toByteArray();  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ").toByteArray();  }	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
300	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlSafe ").toByteArray();  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlSafe ").toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "user.urlSafe ").toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
301	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator   ")+  lineSeparator.toByteArray();  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator   ")+  lineSeparator.toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator   ")+  lineSeparator.toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
302	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "os.urlSafe ").toByteArray();  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "os.urlSafe ").toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "os.urlSafe ").toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
303	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlsafe ").toByteArray();  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlsafe ").toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "user.urlsafe ").toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
304	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ".toByteArray());  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ".toByteArray());  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ".toByteArray());	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
305	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  -1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  -1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  -1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
306	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator.length;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
307	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  2;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  2;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  2;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
308	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  3;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  3;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  3;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
313	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	31	None	replace
314	[BUG]  [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  urlSafe);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	31	None	replace
315	[BUG]  [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	29	None	replace
316	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	29	None	replace
317	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
318	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  3);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
319	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  4);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
320	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
321	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  6);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  6);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
322	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
323	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
324	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
325	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
326	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
327	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
328	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
329	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
330	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator;//  this  just  gets  ignored  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	55	None	replace
331	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
332	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
333	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
334	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
335	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
336	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
337	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
338	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[0];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[0];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[0];	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
339	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  NO_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  NO_CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  NO_CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
340	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[]  {  }  ;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[]  {  }  ;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  new  byte[]  {  }  ;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
341	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
342	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
343	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
344	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
345	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	162	None	replace
346	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	162	None	replace
347	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	162	None	replace
348	[BUG]  [BUGGY]  System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  ';'  expected	224	None	replace
349	[BUG]  [BUGGY]  System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sepLength,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  ';'  expected	224	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  sepLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  sepLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  ';'  expected	224	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(sepSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sepSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sepSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  ';'  expected	224	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
355	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
356	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  6;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  6;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  6;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
357	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  10;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  10;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  10;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
358	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  5;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  5;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  5;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
359	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe.length);  [CE]  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  	210	None	replace
360	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  	66	None	replace
361	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.decodeSize);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	66	None	replace
362	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineSeparator.length);  [CE]  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  	66	None	replace
363	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	166	None	replace
364	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	166	None	replace
365	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	166	None	replace
366	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "file.separator ");  [CE]  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "file.separator ");  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "file.separator ");	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  	202	None	replace
367	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
368	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlSafe ");  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "user.urlSafe ");  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "user.urlSafe ");	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
369	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
370	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  	202	None	replace
371	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "os.urlSafe ");  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "os.urlSafe ");  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "os.urlSafe ");	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
372	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
373	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  System.getProperty( "line.separator ");  }  else  {  this.urlSafe  =  System.getProperty( "line.separator ");  }	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
374	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  	95	None	replace
375	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	95	None	replace
376	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  	95	None	replace
377	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  	95	None	replace
378	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  	95	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  	155	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	155	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  	155	None	replace
382	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
383	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
384	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
385	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
386	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
387	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	128	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator.length);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  	117	None	replace
389	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  	117	None	replace
390	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  'n'  :  'r';  [CE]  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  'n'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  |  File.separatorChar?  'n'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
391	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  'n';  [CE]  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  'n';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  'n';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
392	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '0'  :  'r';  [CE]  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '0'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '0'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
393	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar?  'n'  :  'r';  [CE]  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar?  'n'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &  File.separatorChar?  'n'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
394	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'u'  :  'r';  [CE]  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'u'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  'u'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
395	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  'r';  [CE]  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  	206	None	replace
396	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
397	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
398	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
399	[BUG]  [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  	226	None	replace
400	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  	226	None	replace
401	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  	108	None	replace
402	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  [CE]  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  	108	None	replace
403	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  	108	None	replace
404	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
405	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  	108	None	replace
406	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  	108	None	replace
407	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
408	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
409	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  urlSafe);  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  urlSafe);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  	229	None	replace
410	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  	229	None	replace
411	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  	229	None	replace
412	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);  }  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  	229	None	replace
413	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineLength,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineLength,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineLength,  0,  lineSeparator.length);	  System.arraycopy(this.lineLength,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	51	None	replace
414	[BUG]  [BUGGY]  System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineLength,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	51	None	replace
415	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	173	None	replace
416	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	173	None	replace
417	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	173	None	replace
418	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  	173	None	replace
419	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  	23	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength);  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  	151	None	replace
421	[BUG]  [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength);  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSep,  0,  this.sep,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  	151	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSep,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  	182	None	replace
424	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  	182	None	replace
425	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  	182	None	replace
426	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  	182	None	replace
427	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  null  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	144	None	replace
428	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "/ "  :  CHUNK_SEPARATOR;  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "/ "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "/ "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  	144	None	replace
429	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "n "  :  CHUNK_SEPARATOR;  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "n "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "n "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  	144	None	replace
430	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   ", "  :  CHUNK_SEPARATOR;  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   ", "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   ", "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  	144	None	replace
431	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  urlSafe;  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  urlSafe;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  	144	None	replace
432	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SIZE  :  CHUNK_SEPARATOR;  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SIZE  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SIZE  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  	145	None	replace
433	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
434	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
435	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SIZE  +  1;  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SIZE  +  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  CHUNK_SIZE  +  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  	145	None	replace
436	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  [CE]  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
437	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  [CE]  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
438	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[PEM_CHUNK_SIZE];  [CE]  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[PEM_CHUNK_SIZE];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[PEM_CHUNK_SIZE];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
439	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  [CE]  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
440	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  4];  [CE]  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  4];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  4];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
441	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  3];  [CE]  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  3];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  3];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
442	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  *  2];  [CE]  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  *  2];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  *  2];	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    	non-compiled	[CE]  	98	None	replace
443	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineSeparator;  [CE]  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineSeparator;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  	134	None	replace
444	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  1;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  1;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
445	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineLength;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineLength;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  lineLength;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
446	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  ||  urlSafe;  [CE]  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  ||  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  ||  urlSafe;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  	134	None	replace
447	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar;  [CE]  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  +  File.separatorChar;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  	134	None	replace
448	[BUG]  [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar;  [CE]  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  fileSeparator  +  File.separatorChar;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  	134	None	replace
449	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  4;  [CE]  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  4;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  4;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  	134	None	replace
450	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  urlSafe);  [CE]  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  urlSafe);	  System.arraycopy(this.sep,    0,    this.sep,    0,    urlSafe);    	non-compiled	[CE]  	70	None	replace
451	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	70	None	replace
452	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	70	None	replace
453	[BUG]  [BUGGY]  System.arraycopy(lineSep,  0,  this.sep,  0,  lineSep.length);  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSep,  0,  this.sep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSep,  0,  this.sep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  	78	None	replace
454	[BUG]  [BUGGY]  System.arraycopy(this.lineSep,  0,  this.lineSep,  0,  lineSep.length);  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSep,  0,  this.lineSep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSep,  0,  this.lineSep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  	78	None	replace
455	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineSep.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
456	[BUG]  [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineSep.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSep,  0,  this.sep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
457	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSep.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
458	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	230	None	replace
459	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSeparator;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &&  urlSeparator;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
460	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
461	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  CHUNK_SEPARATOR;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  CHUNK_SEPARATOR;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
462	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSeparator  :  null;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSeparator  :  null;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSeparator  :  null;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
463	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
464	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	50	None	replace
465	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	50	None	replace
466	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	50	None	replace
467	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
468	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
469	[BUG]  [BUGGY]  System.arraycopy(ChUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(ChUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(ChUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	104	None	replace
470	[BUG]  [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	104	None	replace
471	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	121	None	replace
472	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  1;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  +  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  +  1;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
473	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  2;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  2;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  2;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
474	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  1L;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  1L;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  1L;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
475	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  4;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  4;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  4;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
476	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  3;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  3;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  3;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
477	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  lineLength;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  lineLength;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  lineLength;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
478	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  6;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  6;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  6;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
479	[BUG]  [BUGGY]  this.lineSeparator  =  eof  urlSafe;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  eof  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  eof  urlSafe;	  this.lineSeparator    =    boolean    urlSafe;    	non-compiled	[CE]  ';'  expected	35	None	replace
480	[BUG]  [BUGGY]  this.lineSeparator  =  true;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  true;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  true;	  this.lineSeparator    =    boolean    urlSafe;    	non-compiled	[CE]  ';'  expected	35	None	replace
481	[BUG]  [BUGGY]  this.lineSeparator  =  b;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  b;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  b;	  this.lineSeparator    =    boolean    urlSafe;    	non-compiled	[CE]  ';'  expected	35	None	replace
482	[BUG]  [BUGGY]  this.lineSeparator  =  booleanEscaped;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  booleanEscaped;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  booleanEscaped;	  this.lineSeparator    =    boolean    urlSafe;    	non-compiled	[CE]  ';'  expected	35	None	replace
483	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(chunkSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
484	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(chunkSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
485	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunks,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunks,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(chunkSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
486	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  |  File.separatorChar?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
487	[BUG]  [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  fileSeparator  +  File.separatorChar?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
488	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  +  File.separatorChar?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
489	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &  File.separatorChar?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
490	[BUG]  [BUGGY]  this.urlSafe  =  File.separatorChar?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  File.separatorChar?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  File.separatorChar?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
491	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '+';  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '+';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '+';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
492	[BUG]  [BUGGY]  this.urlSafe  =  File.separatorChar  |  urlSafe?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  File.separatorChar  |  urlSafe?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  File.separatorChar  |  urlSafe?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
493	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
494	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
495	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
496	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
497	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
498	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
499	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
500	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
501	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
502	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
503	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
504	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
505	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
506	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
507	[BUG]  [BUGGY]  System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
508	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  0;  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
509	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  0;  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
510	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  urlSafe);	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
511	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  this.lineSeparator  =  0;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  this.lineSeparator  =  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  this.lineSeparator  =  0;	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
512	[BUG]  [BUGGY]  ((  byte[])lineSeparator).arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])lineSeparator).arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])lineSeparator).arraycopy(this.lineSeparator,  0,  lineSeparator,  urlSafe);	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
513	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	72	None	replace
514	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	72	None	replace
515	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  new  byte[lineLength];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
516	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
517	[BUG]  [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
518	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
519	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
520	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
521	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
522	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
523	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
524	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
525	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
526	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
527	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
528	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
529	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	94	None	replace
530	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	94	None	replace
531	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	94	None	replace
532	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_SEPARATOR;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  CHUNK_SEPARATOR;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
533	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  eof  urlSafe;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &&  eof  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &&  eof  urlSafe;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
534	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
535	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||!eof  urlSafe;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||!eof  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||!eof  urlSafe;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
536	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  lineSeparator;  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  lineSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  lineSeparator;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
537	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  FLOAT_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  FLOAT_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  FLOAT_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
538	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CDATA_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CDATA_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  CDATA_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
539	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
540	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
541	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
542	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
543	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
544	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
545	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
546	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	223	None	replace
547	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
548	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
549	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
550	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
551	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineLength);	  System.arraycopy(sep,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	84	None	replace
552	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  this.sep.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  this.sep.length);	  System.arraycopy(sep,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	84	None	replace
553	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &&  urlSafe;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  &&  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  &&  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
554	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  lineSeparator;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  lineSeparator;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
555	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator  ||  urlSafe;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator  ||  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator  ||  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
556	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  fileSeparator;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  fileSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  fileSeparator;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
557	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSeparator;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  urlSeparator;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
558	[BUG]  [BUGGY]  this.lineSeparator  =(urlSafe  ||  urlSafe)?  0  :  urlSafe;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =(urlSafe  ||  urlSafe)?  0  :  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =(urlSafe  ||  urlSafe)?  0  :  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
559	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
560	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep.length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  this.sep.length  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
561	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSep.length  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
562	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  1,  lineLength  -  this.sep.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  1,  lineLength  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  1,  lineLength  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
564	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  this.sep.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
565	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  this.sep.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  +  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
566	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	93	None	replace
567	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	93	None	replace
568	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	24	None	replace
569	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
570	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineSeparator.length];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
571	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  1];  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  1];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength  +  1];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
572	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length  +  1];  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[Length  +  1];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[Length  +  1];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
573	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4];  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[lineLength  *  4];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
574	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
575	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
576	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
577	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
578	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe;	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
579	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	189	None	replace
580	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
581	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
582	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
583	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
584	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.decodeSize);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
585	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
586	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  -  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
587	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSize  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSize  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
588	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.sep,  0,  lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
589	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
590	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[MIME_CHUNK_SIZE  +  1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
591	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
592	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
593	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	100	None	replace
594	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	100	None	replace
595	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineS	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	100	None	replace
596	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	100	None	replace
597	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	136	None	replace
598	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	122	None	replace
599	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	122	None	replace
600	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	137	None	replace
601	[BUG]  [BUGGY]  eof  byte[]  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  byte[]  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  byte[]  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	222	None	replace
602	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	222	None	replace
603	[BUG]  [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
604	[BUG]  [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])lineSeparator).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
605	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
606	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  line  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  line	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
607	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
608	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.line	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
609	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
610	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
611	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
612	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
613	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
614	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
615	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
616	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
617	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
618	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.sep,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
619	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
620	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  urlSafe.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	102	None	replace
621	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  urlSafe.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	102	None	replace
622	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
623	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
624	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
625	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
626	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
627	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
628	[BUG]  [BUGGY]  System.arraycopy(this.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
629	[BUG]  [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
630	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  ';'  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  ';'  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
631	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS!=  ';'  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS!=  ';'  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS!=  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
632	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineS,  0,  urlSafe);	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
633	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >=  ';'  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >=  ';'  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >=  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
634	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
635	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
636	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
637	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &&!urlSafe;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  &&!urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  &&!urlSafe;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
638	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!URL_SAFE_ENCODE_TABLE;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
639	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!this.urlSeparator;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!this.urlSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!this.urlSeparator;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
640	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator  ||!urlSafe;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator  ||!urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator  ||!urlSafe;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
641	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!URL_SEPARATOR;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!URL_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!URL_SEPARATOR;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
642	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!urlSeparator;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!urlSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!urlSeparator;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
643	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  eof  urlSafe;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  eof  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  eof  urlSafe;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
644	[BUG]  [BUGGY]  safe  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe    ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
645	[BUG]  [BUGGY]  eof  urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe    ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
646	[BUG]  [BUGGY]  this.urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  ||  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe    ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
647	[BUG]  [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe  ||  urlSafe)  {  lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe  ||  urlSafe)  {  lineSeparator  =  0;  }	  safe    ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
648	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
649	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
650	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
651	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
652	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
653	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
654	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
655	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
656	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
657	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
658	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
659	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  1];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
660	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  -  1];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineSeparator.length  -  1];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
661	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
662	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
663	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
664	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  4];  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  4];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  4];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
665	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
666	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    this.lineSeparator;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	221	None	replace
667	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    this.lineSeparator;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	221	None	replace
668	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
669	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
670	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
671	[BUG]  [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  +  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  URI_SEPARATOR  +  lineSeparator.length;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
672	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
673	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
674	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  URI_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
675	[BUG]  [BUGGY]  this.lineSeparator  =  null;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  null;	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
676	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  null;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  null;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  null;  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
677	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[1];  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[1];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[1];  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
678	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  >>  ';'  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  >>  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  >>  ';'	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
679	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
680	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
681	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
682	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
683	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
684	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
685	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
686	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
687	[BUG]  [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
688	[BUG]  [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
689	[BUG]  [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
690	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
691	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
692	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
693	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
694	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
695	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
696	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
697	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
698	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
699	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sepSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sepSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sepSafe);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
700	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.sepSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.sepSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.sepSafe);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
701	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
702	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.sep,  0,  this.urlSafe);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
703	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
704	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
705	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
706	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
707	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
708	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
709	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(0,  lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
710	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
711	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
712	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
713	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
714	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  this.lineSeparator);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
715	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
716	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  this.lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  this.lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  this.lineSeparator  =  new  byte[0];  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
717	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator  +  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator  +  1;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
718	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  2;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  2;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
719	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  4;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  4;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  4;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
720	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  1L;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  1L;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  1L;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
721	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  3;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  3;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  3;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
722	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  6;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  6;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  6;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
723	[BUG]  [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(this.separator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	64	None	replace
724	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	220	None	replace
725	[BUG]  [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	220	None	replace
726	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	220	None	replace
727	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	195	None	replace
728	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sep,  0,  this.urlSafe);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	195	None	replace
729	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	141	None	replace
730	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	141	None	replace
731	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
732	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
733	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
734	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.buffer,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.buffer,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.buffer,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
735	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
736	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
737	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.fileSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
738	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
739	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
740	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  lineSeparator.length  >  0;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  lineSeparator.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  lineSeparator.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
741	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
742	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  <  =  0;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  <  =  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  <  =  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
743	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  ==  0;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  ==  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  ==  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
744	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  lineSeparator.length  >  0;  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  lineSeparator.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null  &&  lineSeparator.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
745	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  >=  0;  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  >=  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  urlSafe.length  >=  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
746	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  fileSeparator.length  >  0;  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  fileSeparator.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null  &&  fileSeparator.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
747	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator!=  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator!=  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  lineSeparator!=  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
748	[BUG]  [BUGGY]  ((  byte[])this.urlSafe).arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])this.urlSafe).arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])this.urlSafe).arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
749	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
750	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
751	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &&  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  &&  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  &&  urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
752	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  lineSeparator);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  lineSeparator);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
753	[BUG]  [BUGGY]  this.lineSeparator  =  lineSeparator  ||  urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  lineSeparator  ||  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  lineSeparator  ||  urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
754	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
755	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSafe,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  urlSafe,  lineSeparator);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
756	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  fileSeparator);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  fileSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  fileSeparator);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
757	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.chunkLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.chunkLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.chunkLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
758	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.chunkLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.chunkLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.chunkLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
759	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  -  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
760	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
761	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.chunkLength  +  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
762	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineS;	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	186	None	replace
763	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
764	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
765	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
766	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
767	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
768	[BUG]  [BUGGY]  ((  byte[])this.urlSafe).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ((  byte[])this.urlSafe).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	((  byte[])this.urlSafe).arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
769	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
770	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  this.lineSeparator  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
771	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	164	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	164	None	replace
773	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength);	  System.arraycopy(lineSeparator,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	85	None	replace
774	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	119	None	replace
775	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
776	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
777	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
778	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
779	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
780	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	16	None	replace
781	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.chunkSeparator,  0,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	16	None	replace
782	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  1];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  1];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  +  1];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
783	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  *  4];  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  *  4];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  *  4];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
784	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  3];  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  3];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  +  3];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
785	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  4];  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  4];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  +  4];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
786	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  2];  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  +  2];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  +  2];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
787	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[0];  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[0];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[0];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
788	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	55	None	replace
789	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	55	None	replace
790	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ",  urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ",  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ",  urlSafe);	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
791	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").booleanValue();  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").booleanValue();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ").booleanValue();	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
792	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").toLowerCase();  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").toLowerCase();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ").toLowerCase();	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
793	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
794	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	103	None	replace
795	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
796	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
797	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.encodeSize  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
798	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.separator);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
799	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.separator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	65	None	replace
800	[BUG]  [BUGGY]  System.arraycopy(sourceSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sourceSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sourceSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
801	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	229	None	replace
802	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineL  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineL	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	229	None	replace
803	[BUG]  [BUGGY]  System.arraycopy(this.URLSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.URLSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.URLSafe,  0,  lineSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
804	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	45	None	replace
805	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
806	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	121	None	replace
807	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	121	None	replace
808	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length  -  1);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
809	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
810	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
811	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
812	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
813	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
814	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
815	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
816	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
817	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
818	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[this.urlSafe.length];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
819	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  *  4];  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  *  4];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineSeparator.length  *  4];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
820	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  2];  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  2];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  2];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
821	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
822	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
823	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
824	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  0;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  1  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
825	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  0;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  0  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
826	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  0;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  SHORT_SEPARATOR  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
827	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  0;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  3  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
828	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  0;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  4  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
829	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
830	[BUG]  [BUGGY]  this.lineSeparator  =  false;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  false;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  false;	  this.lineSeparator    =    boolean    urlSafe;    	non-compiled	[CE]  ';'  expected	35	None	replace
831	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &  1;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &  1;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
832	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe?  0  :  urlSafe  +  1;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe?  0  :  urlSafe  +  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe?  0  :  urlSafe  +  1;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
833	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  -  1;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  -  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  -  1;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
834	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	223	None	replace
835	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	73	None	replace
836	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!lineSeparator;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!lineSeparator;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
837	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  '  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  '  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  >>  '	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
838	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sep);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.sep);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
839	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
840	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
841	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
842	[BUG]  [BUGGY]  System.arraycopy(textSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(textSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(textSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(sourceSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	105	None	replace
843	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	66	None	replace
844	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	66	None	replace
845	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);	  System.arraycopy(this.separator,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	66	None	replace
846	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.urlSafe  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	195	None	replace
847	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.decodeSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
848	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.charSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.charSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.charSeparator,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
849	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
850	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
851	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  this.sep.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
852	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sep.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
853	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator  +  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator  +  1);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
854	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlEncoding);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlEncoding);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  urlEncoding);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
855	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator;	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
856	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineL	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
857	[BUG]  [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(SCRIPT_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
858	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
859	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  null;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  null;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  null;  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	208	None	replace
860	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	208	None	replace
861	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator!=  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator!=  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  fileSeparator!=  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
862	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
863	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
864	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
865	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[64];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
866	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  ';'  expected	224	None	replace
867	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
868	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
869	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  fileSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  fileSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
870	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  super.urlSafe);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  super.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  super.urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
871	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[64];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
872	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	53	None	replace
873	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	160	None	replace
874	[BUG]  [BUGGY]  this.lineSeparator  =  fileSeparator  ||  urlSafe;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  fileSeparator  ||  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  fileSeparator  ||  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
875	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  sep;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  sep;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  sep;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
876	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	83	None	replace
877	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.line);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
878	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.line	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
879	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.line	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
880	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  -  1];  System.arraycopy(this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  -  1];  System.arraycopy(this.lineSeparator,  0,  this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  -  1];  System.arraycopy(this.lineSeparator,  0,  this.line	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
881	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.line;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.line;	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
882	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  +  1];  System.arraycopy(this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  +  1];  System.arraycopy(this.lineSeparator,  0,  this.line  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength  +  1];  System.arraycopy(this.lineSeparator,  0,  this.line	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
883	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	76	None	replace
884	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';';  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
885	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '>';  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '>';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '>';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
886	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '+'  :  ';';  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '+'  :  ';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '+'  :  ';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
887	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	72	None	replace
888	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
889	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
890	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
891	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	222	None	replace
892	[BUG]  [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	222	None	replace
893	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &  lineSeparator.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  &  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  &  lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
894	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  /  lineSeparator.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  /  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  /  lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
895	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  |  lineSeparator.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  |  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  |  lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
896	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  this.lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  this.lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
897	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  lineSeparator.length  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  lineSeparator.length  +  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  lineSeparator.length  +  1;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
898	[BUG]  [BUGGY]  this.urlSafe  =(urlSafe?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =(urlSafe?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =(urlSafe?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE);	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
899	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
900	[BUG]  [BUGGY]  this.urlSafe  =(urlSafe  ||  urlSafe)?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =(urlSafe  ||  urlSafe)?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =(urlSafe  ||  urlSafe)?  URL_SAFE_ENCODE_TABLE  :  URL_SAFE_ENCODE_TABLE;	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
901	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.decodeSize  +  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	120	None	replace
902	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.encodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.encodeSize);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	120	None	replace
903	[BUG]  [BUGGY]  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	&&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
904	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JSON_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JSON_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  JSON_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
905	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
906	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	141	None	replace
907	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	141	None	replace
908	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
909	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
910	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	102	None	replace
911	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.decodeSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.decodeSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.decodeSeparator,  0,  lineLength);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
912	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  this.urlSafe);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	210	None	replace
913	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
914	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
915	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	130	None	replace
916	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';');  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';');	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
917	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
918	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
919	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  ';');  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  ';');	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
920	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator;	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
921	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'  expected);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'  expected);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator  +  ';'  expected);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
922	[BUG]  [BUGGY]  System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(Standard_ENCODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
923	[BUG]  [BUGGY]  System.arraycopy(SHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(SHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(SHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
924	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  0,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	16	None	replace
925	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  2;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  2;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  2;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
926	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  3;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  3;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  3;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
927	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  6;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar  +  6;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar  +  6;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
928	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  0;  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
929	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
930	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
931	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	84	None	replace
932	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEADARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEADARD_ENCODE_TABLE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEADARD_ENCODE_TABLE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
933	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  0  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
934	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  BYTE_SEPARATOR;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  BYTE_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  BYTE_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
935	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.sep.length  -  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
936	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
937	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
938	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
939	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  sourceSeparator;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  sourceSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  sourceSeparator;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	109	None	replace
940	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[0];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[0];    }    	non-compiled	[CE]  ';'  expected	172	None	replace
941	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
942	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
943	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
944	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	95	None	replace
945	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[MIME_CHUNK_SEPARATOR];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arra	  this.lineSeparator    =    new    byte[MIME_CHUNK_SEPARATOR];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	95	None	replace
946	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineSeparator.length  -  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	119	None	replace
947	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[Length];  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[Length];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[Length];  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
948	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSeparator,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	191	None	replace
949	[BUG]  [BUGGY]  System.arraycopy(this.decorated,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decorated,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decorated,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	191	None	replace
950	[BUG]  [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
951	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "' "  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "' "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "' "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	144	None	replace
952	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "[ "  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "[ "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "[ "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	144	None	replace
953	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "- "  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "- "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "- "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	144	None	replace
954	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';');  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';');	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
955	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
956	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'  expected);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'  expected);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  ';'  expected);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
957	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  -  ';');  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  -  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  -  ';');	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
958	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  1);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  +  1);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
959	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  this.urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  this.urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  this.urlSafe);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
960	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS;  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
961	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
962	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.sourceSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
963	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.info,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.info,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.info,  lineSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
964	[BUG]  [BUGGY]  System.arraycopy(this.urlSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSeparator,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
965	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
966	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	135	None	replace
967	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
968	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	43	None	replace
969	[BUG]  [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.chunkSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.chunkSeparator,  0,  this.lineSeparator,  0,  this.chunkLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
970	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  URI_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  URI_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe? " "  :  URI_SEPARATOR;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
971	[BUG]  [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  ||  urlSafe;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  ||  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  URI_SEPARATOR  ||  urlSafe;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
972	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  ';';  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  ';';	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
973	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DECODE_TABLE  :  URI_SEPARATOR;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DECODE_TABLE  :  URI_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DECODE_TABLE  :  URI_SEPARATOR;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
974	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  ';'  :  URI_SEPARATOR;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  ';'  :  URI_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  ';'  :  URI_SEPARATOR;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
975	[BUG]  [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  +  1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  URI_SEPARATOR  +  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  URI_SEPARATOR  +  1;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
976	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	42	None	replace
977	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	42	None	replace
978	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
979	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  -  1);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
980	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  this.sepLength  +  1);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
981	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
982	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
983	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
984	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineS	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
985	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arra  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arra	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
986	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
987	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineSeparator);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator);    	non-compiled	[CE]  ';'  expected	192	None	replace
988	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  urlSafe);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator);    	non-compiled	[CE]  ';'  expected	192	None	replace
989	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  -  1];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  -  1];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  -  1];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
990	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	100	None	replace
991	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")!toByteArray();  [CE]  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")!toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")!toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  	204	None	replace
992	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")).toByteArray();  [CE]  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")).toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")).toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  	204	None	replace
993	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")+  lineSeparator.length;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")+  lineSeparator.length;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")+  lineSeparator.length;	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
994	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
995	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  +  1];  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  +  1];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  +  1];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
996	[BUG]  [BUGGY]  safely())  {  lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safely())  {  lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safely())  {  lineSeparator  =  new  byte[lineLength];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
997	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineSeparator);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	159	None	replace
998	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineSeparator);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	159	None	replace
999	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1000	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1001	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS;  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1002	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSities  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSities  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSities	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1003	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
1004	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
1005	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
1006	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1007	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
1008	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
1009	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	24	None	replace
1010	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  +  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
1011	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSep.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
1012	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
1013	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.buffer);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.buffer);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.buffer);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
1014	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  *  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1015	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineLength  -  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1016	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  this.sep);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1017	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1018	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	31	None	replace
1019	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	68	None	replace
1020	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[Length];  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[Length];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[Length];  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
1021	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  null;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  null;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  null;  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
1022	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	122	None	replace
1023	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1024	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  PEM_CHUNK_SIZE  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1025	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  PEM_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  PEM_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1026	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1027	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  HEAD_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  HEAD_CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SIZE  :  HEAD_CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1028	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	136	None	replace
1029	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSeparator);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||  urlSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||  urlSeparator);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
1030	[BUG]  [BUGGY]  this.lineSeparator  =  fileSeparator  ||  urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  fileSeparator  ||  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  fileSeparator  ||  urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
1031	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	165	None	replace
1032	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineSep.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
1033	[BUG]  [BUGGY]  System.arraycopy(lineSep,  0,  this.sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSep,  0,  this.sep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSep,  0,  this.sep,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
1034	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSep,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSep,  0,  lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
1035	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
1036	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
1037	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  4  :  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
1038	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  1;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  3  :  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  3  :  1;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    1;    	non-compiled	[CE]  ';'  expected	147	None	replace
1039	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5];  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[5];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[5];	  this.lineSeparator    =    new    byte[0];    	non-compiled	[CE]  ';'  expected	40	None	replace
1040	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[16];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
1041	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[MIME_CHUNK_SIZE];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	97	None	replace
1042	[BUG]  [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
1043	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe));  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe));  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe));	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
1044	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
1045	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
1046	[BUG]  [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
1047	[BUG]  [BUGGY]  this.urlSafe  =  urlsafe  &&  urlSeparator;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlsafe  &&  urlSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlsafe  &&  urlSeparator;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
1048	[BUG]  [BUGGY]  System.arraycopy(this.urlSeparator,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSeparator,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSeparator,  0,  this.urlSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
1049	[BUG]  [BUGGY]  System.arraycopy(this.urlSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSeparator,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	217	None	replace
1050	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1051	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1052	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1053	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
1054	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.chunkSeparator,  0,  lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
1055	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
1056	[BUG]  [BUGGY]  SecuritySystem.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
1057	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
1058	[BUG]  [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  'n'  :  'r';  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  fileSeparator  +  File.separatorChar?  'n'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  fileSeparator  +  File.separatorChar?  'n'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  ';'  expected	206	None	replace
1059	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  'n'  :  'r';  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  +  File.separatorChar?  'n'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  +  File.separatorChar?  'n'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  ';'  expected	206	None	replace
1060	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe?  'n'  :  'r';  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe?  'n'  :  'r';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe?  'n'  :  'r';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  ';'  expected	206	None	replace
1061	[BUG]  [BUGGY]  this.lineSeparator  =  System.identityHashCode(lineSeparator);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  System.identityHashCode(lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  System.identityHashCode(lineSeparator);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
1062	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	137	None	replace
1063	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
1064	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
1065	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  &  1;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  &  1;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
1066	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineL	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	220	None	replace
1067	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1068	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1069	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1070	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  fileLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  fileLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	174	None	replace
1071	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  fileLength  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  fileLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  fileLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	174	None	replace
1072	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	173	None	replace
1073	[BUG]  [BUGGY]  System.arraycopy(this.lines,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lines,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lines,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.lines,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
1074	[BUG]  [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lines,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.lines,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
1075	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength  -  this.urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
1076	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  this.lineSeparator);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
1077	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	75	None	replace
1078	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	91	None	replace
1079	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  null;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  null;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1080	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1081	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1082	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  null;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  1  :  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  1  :  null;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1083	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  DECODE_TABLE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1084	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1085	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe.length);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1086	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
1087	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1088	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1089	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1090	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1091	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineS	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1092	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1093	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	59	None	replace
1094	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.chunkSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.chunkSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.chunkSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	59	None	replace
1095	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1096	[BUG]  [BUGGY]  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  &&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	&&  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1097	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1098	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1099	[BUG]  [BUGGY]  this.urlSafe  =  File.separatorChar  &  urlSafe?  '/'  :  '/';  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  File.separatorChar  &  urlSafe?  '/'  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  File.separatorChar  &  urlSafe?  '/'  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
1100	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe?  File.separatorChar  :  '/';  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe?  File.separatorChar  :  '/';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe?  File.separatorChar  :  '/';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
1101	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.fileSeparator,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
1102	[BUG]  [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  fileLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.fileSeparator,  0,  this.fileSeparator,  0,  fileLength);	  System.arraycopy(this.buffer,    0,    this.fileSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	194	None	replace
1103	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1104	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  lineSeparator;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe? " "  :  lineSeparator;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1105	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  lineSeparator;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  null  :  lineSeparator;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1106	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  lineSeparator  :  0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  lineSeparator  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  lineSeparator  :  0;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1107	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1108	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1109	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1110	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  lineSeparator,  0,  lineLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1111	[BUG]  [BUGGY]  System.arraycopy(SHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(SHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(SHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1112	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1113	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1114	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
1115	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.bufferLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.bufferLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.bufferLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	117	None	replace
1116	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  lineSeparator);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	117	None	replace
1117	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineL  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineL  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineL	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1118	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1119	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1120	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1121	[BUG]  [BUGGY]  this.lineSeparator  =!URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!URL_SAFE_ENCODE_TABLE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!URL_SAFE_ENCODE_TABLE;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1122	[BUG]  [BUGGY]  this.lineSeparator  =!lineSeparator;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!lineSeparator;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1123	[BUG]  [BUGGY]  this.lineSeparator  =!sep;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!sep;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!sep;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1124	[BUG]  [BUGGY]  this.lineSeparator  =!(urlSafe  ||  urlSafe));  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!(urlSafe  ||  urlSafe));  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!(urlSafe  ||  urlSafe));	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1125	[BUG]  [BUGGY]  this.lineSeparator  =!buffered;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =!buffered;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =!buffered;	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1126	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	189	None	replace
1127	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	189	None	replace
1128	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1129	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[0];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[0];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[0];	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1130	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1131	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1132	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
1133	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
1134	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
1135	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[length];  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[length];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[length];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
1136	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);	  System.arraycopy(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
1137	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
1138	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
1139	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
1140	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
1141	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.bufferLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.bufferLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.bufferLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
1142	[BUG]  [BUGGY]  System.arraycopy(this.charBuffer,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.charBuffer,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.charBuffer,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
1143	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  CHUNK_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1144	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  ||  eof  urlSafe;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  lineSeparator  ||  eof  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  lineSeparator  ||  eof  urlSafe;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1145	[BUG]  [BUGGY]  this.urlSafe  =  eof  urlSafe  ||  urlSafe;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  eof  urlSafe  ||  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  eof  urlSafe  ||  urlSafe;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1146	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  HEADARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  HEADARD_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  HEADARD_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1147	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1148	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSe	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1149	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1150	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1151	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1152	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1153	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1154	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
1155	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  ';';  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  STANDARD_ENCODE_TABLE  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
1156	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  ';';  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  -1  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
1157	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  ';';  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  4  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  4  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
1158	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	23	None	replace
1159	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	156	None	replace
1160	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	156	None	replace
1161	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.encodeSize);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
1162	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
1163	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.chunkSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.chunkSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.chunkSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	70	None	replace
1164	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	104	None	replace
1165	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  this.lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	101	None	replace
1166	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  urlSafe;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  0  :  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
1167	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  urlSafe;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  -1  :  urlSafe;	  this.lineSeparator    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	39	None	replace
1168	[BUG]  [BUGGY]  This.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  This.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	This.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  ';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
1169	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  ':';';  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  ':';';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  ':';';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    ';';    	non-compiled	[CE]  ';'  expected	207	None	replace
1170	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1171	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1172	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  0;	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	26	None	replace
1173	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.chunkSeparator,  0,  this.chunkLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.chunkSeparator,  0,  this.chunkLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.chunkSeparator,  0,  this.chunkLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.chunkLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
1174	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineLength);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
1175	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	49	None	replace
1176	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
1177	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep.length);    	non-compiled	[CE]  ';'  expected	79	None	replace
1178	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineL    	non-compiled	[CE]  ';'  expected	167	None	replace
1179	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1180	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1181	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    null;    	non-compiled	[CE]  ';'  expected	212	None	replace
1182	[BUG]  [BUGGY]  System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineBuffer,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.line,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	163	None	replace
1183	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator;  }	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	28	None	replace
1184	[BUG]  [BUGGY]  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
1185	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe?  lineLength  -  1  :  0);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe?  lineLength  -  1  :  0);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe?  lineLength  -  1  :  0);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	141	None	replace
1186	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	173	None	replace
1187	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ==  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ==  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ==  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
1188	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe!=  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe!=  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe!=  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
1189	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  frumoase  ||  urlSafe!=  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  frumoase  ||  urlSafe!=  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  frumoase  ||  urlSafe!=  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
1190	[BUG]  [BUGGY]  this.urlSafe  =  urlSafeDIRECT  ||  urlSafe!=  null  &&  urlSafe.length  >  0;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafeDIRECT  ||  urlSafe!=  null  &&  urlSafe.length  >  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafeDIRECT  ||  urlSafe!=  null  &&  urlSafe.length  >  0;	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null    &&    urlSafe.length    >    0;    	non-compiled	[CE]  ';'  expected	205	None	replace
1191	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  lineSeparator  :  null;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  lineSeparator  :  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  lineSeparator  :  null;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1192	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  0;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  0;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1193	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  lineSeparator;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  lineSeparator;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1194	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  null;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length):  null;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1195	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  null;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  null;	  this.lineSeparator    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	34	None	replace
1196	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||!(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  ||!(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  ||!(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;	  this.lineSeparator    =    urlSafe    ||!urlSafe;    	non-compiled	[CE]  ';'  expected	181	None	replace
1197	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength  -  1);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
1198	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	198	None	replace
1199	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	188	None	replace
1200	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  ';'  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  ';'  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  'r'  :  ';'	  this.urlSafe    =    urlSafe    +    File.separatorChar?    'n'    :    'r';    	non-compiled	[CE]  ';'  expected	206	None	replace
1201	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
1202	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.sep,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.sep,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.decodeSize,  0,  this.sep,  0,  this.decodeSize);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	196	None	replace
1203	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  HEAD_CHUNK_SEPARATOR  :  0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  HEAD_CHUNK_SEPARATOR  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  HEAD_CHUNK_SEPARATOR  :  0;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
1204	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  0,  lineSeparator;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    0;    	non-compiled	[CE]  ';'  expected	146	None	replace
1205	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);	  if(urlSafe)    {    lineSeparator    =    new    byte[0];    }    	non-compiled	[CE]  ';'  expected	172	None	replace
1206	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineSeparator,  urlSafe);	  if(urlSafe)    {    lineSeparator    =    new    byte[0];    }    	non-compiled	[CE]  ';'  expected	172	None	replace
1207	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut();  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut();	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1208	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  urlSafe)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  urlSafe)  {  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  urlSafe)  {	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1209	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1210	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  false)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  false)  {  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineS  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  prevazut  =  false)  {	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	129	None	replace
1211	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
1212	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	80	None	replace
1213	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
1214	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.buffer,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
1215	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.lineSeparator.length);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	175	None	replace
1216	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
1217	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
1218	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	200	None	replace
1219	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  0;  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1220	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
1221	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
1222	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);	  SecuritySystem.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
1223	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.urlSafe.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	59	None	replace
1224	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	59	None	replace
1225	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	59	None	replace
1226	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length  -  1];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[Length  -  1];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[Length  -  1];	  this.lineSeparator    =    new    byte[Length];    	non-compiled	[CE]  ';'  expected	41	None	replace
1227	[BUG]  [BUGGY]  &&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  &&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	&&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
1228	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
1229	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
1230	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.separator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	64	None	replace
1231	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1232	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1233	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1234	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
1235	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	94	None	replace
1236	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	94	None	replace
1237	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
1238	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.lineSeparator);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength  -  this.lineSeparator);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
1239	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
1240	[BUG]  [BUGGY]  System.arraycopy(urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
1241	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
1242	[BUG]  [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	158	None	replace
1243	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  this.lineLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	24	None	replace
1244	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1245	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  0);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  0);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  0);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1246	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1247	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1248	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	124	None	replace
1249	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_FACTOR;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_FACTOR;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  CHUNK_FACTOR;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1250	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_CUSTOM;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  eof  CHUNK_CUSTOM;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  eof  CHUNK_CUSTOM;	  this.urlSafe    =    urlSafe    ||    eof    urlSafe;    	non-compiled	[CE]  ';'  expected	111	None	replace
1251	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	219	None	replace
1252	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  fileLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(fileSeparator,  0,  this.lineSeparator,  0,  fileLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    fileLength);    	non-compiled	[CE]  ';'  expected	174	None	replace
1253	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
1254	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  -  1];  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  -  1];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength  -  1];  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    }    	non-compiled	[CE]  ';'  expected	170	None	replace
1255	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1256	[BUG]  [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1257	[BUG]  [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe!=  null)  {  this.lineSeparator  =  urlSafe;  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1258	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1259	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  lineLength);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1260	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =  urlSafe;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineSeparator.length);  }	  this.lineSeparator    =    urlSafe;//    this    just    gets    ignored    	non-compiled	[CE]  ';'  expected	107	None	replace
1261	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  urlSafe;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  urlSafe;  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
1262	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.urlSafe;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  this.urlSafe;  }	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	169	None	replace
1263	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.urlSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.urlSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  this.urlSeparator.length);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator);    	non-compiled	[CE]  ';'  expected	192	None	replace
1264	[BUG]  [BUGGY]  System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.linePos,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	223	None	replace
1265	[BUG]  [BUGGY]  System.arraycopy(System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	91	None	replace
1266	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	145	None	replace
1267	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.sep,  0,  lineLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	69	None	replace
1268	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(chunkSeparator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	227	None	replace
1269	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1270	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  fileLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  fileLength);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1271	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
1272	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_S  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_S  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_S	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
1273	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	185	None	replace
1274	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
1275	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
1276	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlFactory,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlFactory,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlFactory,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
1277	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlseparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlseparator,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.urlseparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	215	None	replace
1278	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1279	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator);  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1280	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().encode(CHUNK_SEPARATOR);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().encode(CHUNK_SEPARATOR);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().encode(CHUNK_SEPARATOR);  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1281	[BUG]  [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().quoteAsString( "UTF-8 ");  }  [CE]  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().quoteAsString( "UTF-8 ");  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  lineSeparator  =  JsonStringEncoder.getInstance().quoteAsString( "UTF-8 ");  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  	17	None	replace
1282	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   " " "  :  CHUNK_SEPARATOR;  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   " " "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   " " "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  	144	None	replace
1283	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?   "0 "  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?   "0 "  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?   "0 "  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?   "   "    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	144	None	replace
1284	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  0;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	||  urlSafe)  {  this.lineSeparator  =  0;	  ||    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
1285	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
1286	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
1287	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sepBuffer,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sepBuffer,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sepBuffer,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
1288	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sepLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sepLength);	  System.arraycopy(this.sep,    0,    lineSeparator,    0,    this.sepLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
1289	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +(lineSeparator.length  >  0?  lineSeparator.length  :  0);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +(lineSeparator.length  >  0?  lineSeparator.length  :  0);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +(lineSeparator.length  >  0?  lineSeparator.length  :  0);	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
1290	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  System.identityHashCode(lineSeparator);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  System.identityHashCode(lineSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  System.identityHashCode(lineSeparator);	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
1291	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +(lineSeparator.length  <  2)?  0  :  lineSeparator.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +(lineSeparator.length  <  2)?  0  :  lineSeparator.length;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +(lineSeparator.length  <  2)?  0  :  lineSeparator.length;	  this.lineSeparator    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	178	None	replace
1292	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  URL_SAFE_ENCODE_TABLE;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  URL_SAFE_ENCODE_TABLE;	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
1293	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  System.identityHashCode(urlSafe);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  System.identityHashCode(urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  System.identityHashCode(urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafesafe;    	non-compiled	[CE]  ';'  expected	115	None	replace
1294	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe?  File.separatorChar  :  urlSafe;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe?  File.separatorChar  :  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe?  File.separatorChar  :  urlSafe;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
1295	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  &  File.separatorChar;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  &  File.separatorChar;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
1296	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  |  File.separatorChar;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  |  File.separatorChar;	  this.urlSafe    =    urlSafe    +    File.separatorChar;    	non-compiled	[CE]  ';'  expected	134	None	replace
1297	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  0;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  0;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  0;  }	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	208	None	replace
1298	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '*';  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '*';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '*';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
1299	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  File.separatorChar?  '/'  :  '%';	  this.urlSafe    =    urlSafe    +    File.separatorChar?    '/'    :    '/';    	non-compiled	[CE]  ';'  expected	203	None	replace
1300	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_LINE_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_LINE_SEPARATOR  :  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_LINE_SEPARATOR  :  DEFAULT_CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1301	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1302	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  DEFAULT_CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    DEFAULT_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	214	None	replace
1303	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	156	None	replace
1304	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  chunkSeparator.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  chunkSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  chunkSeparator.length);	  System.arraycopy(chunkSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
1305	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  +  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSafe,  0,  lineSeparator.length  +  1);	  System.arraycopy(this.buffer,    0,    this.urlSafe,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	121	None	replace
1306	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
1307	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  System.identityHashCode(lineSeparator);  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
1308	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  }	  if(urlSafe)    {    lineSeparator    =    0;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
1309	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
1310	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	92	None	replace
1311	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  urlSafe?  lineLength  -  1  :  0);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  urlSafe?  lineLength  -  1  :  0);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  urlSafe?  lineLength  -  1  :  0);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
1312	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSeparator;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSeparator;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  this.urlSeparator;	  this.urlSafe    =    urlSafe    ||    urlSeparator;    	non-compiled	[CE]  ';'  expected	133	None	replace
1313	[BUG]  [BUGGY]  if(urlSafe  &&  this.lineSeparator!=  null)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  &&  this.lineSeparator!=  null)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  &&  this.lineSeparator!=  null)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
1314	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
1315	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	229	None	replace
1316	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  *  1;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  *  1;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  *  1;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
1317	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  5;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  +  5;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  +  5;	  this.urlSafe    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	131	None	replace
1318	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    urlSafe);    	non-compiled	[CE]  ';'  expected	19	None	replace
1319	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  1,  this.sep.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  1,  this.sep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  1,  this.sep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.sep.length);    	non-compiled	[CE]  ';'  expected	153	None	replace
1320	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").toUpperCase();  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ").toUpperCase();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ").toUpperCase();	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
1321	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "URL_SAFE_ENCODE_TABLE.url ");  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "URL_SAFE_ENCODE_TABLE.url ");  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "URL_SAFE_ENCODE_TABLE.url ");	  this.urlSafe    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	202	None	replace
1322	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[Length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	96	None	replace
1323	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1324	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1325	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1326	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1327	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  this.urlSafe  =  urlSafe;  }  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  this.urlSafe  =  urlSafe;  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  this.urlSafe  =  urlSafe;  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1328	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  UUID_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }	  this.urlSafe    =    UUID_SEPARATOR;    	non-compiled	[CE]  ';'  expected	114	None	replace
1329	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	99	None	replace
1330	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
1331	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	25	None	replace
1332	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	226	None	replace
1333	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength  /  2];  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  new  byte[lineLength  /  2];  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  new  byte[lineLength  /  2];	  this.urlSafe    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	110	None	replace
1334	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
1335	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
1336	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  this.urlSafe);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
1337	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.separator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.separator,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    this.separator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	225	None	replace
1338	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  0;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe):  0;	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
1339	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe):  0;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe):  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe):  0;	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
1340	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  0;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe? " "  :  0;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe? " "  :  0;	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
1341	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	  this.lineSeparator    =    0;    	non-compiled	[CE]  ';'  expected	38	None	replace
1342	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize  -  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1343	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  /  this.sep);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1344	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  lineSeparator.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  this.lineLength  -  lineSeparator.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    -    this.sep);    	non-compiled	[CE]  ';'  expected	197	None	replace
1345	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  lineLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
1346	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  this.urlSafe);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    this.urlSafe);    	non-compiled	[CE]  ';'  expected	20	None	replace
1347	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(sep,  0,  this.sep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(sep,  0,  this.sep,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	84	None	replace
1348	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  sepLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  sepLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  sepLength);	  System.arraycopy(sep,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	84	None	replace
1349	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.urlLength);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
1350	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.urlSeparator,  0,  this.lineLength);	  System.arraycopy(this.buffer,    0,    this.urlSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	193	None	replace
1351	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  urlSafe);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	177	None	replace
1352	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  safe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
1353	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
1354	[BUG]  [BUGGY]  ';')  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  ';')  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	';')  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	  ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1355	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[CHUNK_SEPARATOR.length];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	128	None	replace
1356	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe):  URI_SEPARATOR;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe):  URI_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe):  URI_SEPARATOR;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
1357	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  null;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  null;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  URI_SEPARATOR  :  null;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
1358	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe):  URI_SEPARATOR;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe):  URI_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe):  URI_SEPARATOR;	  this.lineSeparator    =    URI_SEPARATOR;    	non-compiled	[CE]  ';'  expected	150	None	replace
1359	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.buffer,  0,  lineLength);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	23	None	replace
1360	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
1361	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
1362	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
1363	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
1364	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.line,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.line,  0,  this.urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.line,  0,  this.urlSafe);	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
1365	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];	  eof    urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.line    	non-compiled	[CE]  ';'  expected	218	None	replace
1366	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  SHORT_SEPARATOR;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  SHORT_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  CHUNK_SEPARATOR  :  SHORT_SEPARATOR;	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	143	None	replace
1367	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1368	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1369	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1370	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1371	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1372	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	108	None	replace
1373	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.line,  0,  this.sep,  0,  this.lineLength);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
1374	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
1375	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
1376	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	132	None	replace
1377	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")&&  urlSafe;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")&&  urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")&&  urlSafe;	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
1378	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")+ "/.toByteArray();  [CE]  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")+ "/.toByteArray();  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")+ "/.toByteArray();	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  	204	None	replace
1379	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  	204	None	replace
1380	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  0;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  0;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  0;	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
1381	[BUG]  [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  null;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  null;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  System.getProperty( "line.separator ")?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe).toByteArray()  :  null;	  this.urlSafe    =    System.getProperty(   "line.separator   ").toByteArray();    	non-compiled	[CE]  ';'  expected	204	None	replace
1382	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  0  :  urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
1383	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  -1  :  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  -1  :  urlSafe);	  this.lineSeparator    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	180	None	replace
1384	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1385	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    }    	non-compiled	[CE]  ';'  expected	199	None	replace
1386	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.separator,  0,  this.sep,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.separator,  0,  this.sep,  0,  this.lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	83	None	replace
1387	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
1388	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[64];  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[64];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[64];  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
1389	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[size()  ];  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[size()  ];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[size()  ];  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
1390	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[16];  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[16];  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[16];  }	  if(urlSafe)    {    lineSeparator    =    null;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
1391	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1392	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.lineSeparator  =  ';';  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }	  this.lineSeparator    =    ';';    	non-compiled	[CE]  ';'  expected	36	None	replace
1393	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
1394	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  0);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  0);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  0);  }	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
1395	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
1396	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparatorLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparatorLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparatorLength);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	44	None	replace
1397	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.buffer,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.urlSafe,  0,  this.buffer,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.buffer,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	117	None	replace
1398	[BUG]  [BUGGY]  SecuritySystem.arraycopy(chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  SecuritySystem.arraycopy(chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	SecuritySystem.arraycopy(chunkSeparator,  0,  this.chunkSeparator,  0,  lineLength);	  SecuritySystem.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
1399	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  fileSeparator);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  fileSeparator);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  fileSeparator);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
1400	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlStyle);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  urlStyle);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  urlStyle);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
1401	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  null);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe,  lineSeparator,  null);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe,  lineSeparator,  null);	  this.lineSeparator    =    urlSafe,    lineSeparator);    	non-compiled	[CE]  ';'  expected	179	None	replace
1402	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    this.lineSeparator;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	221	None	replace
1403	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  this.lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    this.lineSeparator;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	221	None	replace
1404	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  new  byte[CHUNK_SEPARATOR.length  +  1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    lineSeparator    =    this.lineSeparator;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	221	None	replace
1405	[BUG]  [BUGGY]  eof  urlSafe  ||  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe  ||  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe  ||  CHUNK_SEPARATOR)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	  safe    ||    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
1406	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);	  System.arraycopy(this.urlSafe,    0,    lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	139	None	replace
1407	[BUG]  [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	29	None	replace
1408	[BUG]  [BUGGY]  safe)  {  lineSeparator  =  urlSafe;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  safe)  {  lineSeparator  =  urlSafe;//  this  just  gets  ignored  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	safe)  {  lineSeparator  =  urlSafe;//  this  just  gets  ignored  }	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;//    this    just    gets    ignored    }    	non-compiled	[CE]  ';'  expected	29	None	replace
1409	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSep.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSep.length);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.sep,  0,  lineSep.length);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineSep.length);    	non-compiled	[CE]  ';'  expected	78	None	replace
1410	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  +  5;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe  +  5;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe  +  5;	  this.lineSeparator    =    urlSafe    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
1411	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  urlSafe;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  urlSafe;	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1412	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.urlSafe;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  this.urlSafe;  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  this.urlSafe;	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1413	[BUG]  [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[Length];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  lineSeparator  =  new  byte[Length];  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  lineSeparator  =  new  byte[Length];	  eof    urlSafe)    {    lineSeparator    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	140	None	replace
1414	[BUG]  [BUGGY]  if(urlSafe  &&  this.lineSeparator  ==  null)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  &&  this.lineSeparator  ==  null)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  &&  this.lineSeparator  ==  null)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe    &&    this.lineSeparator!=    null)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	228	None	replace
1415	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  super.urlSafe;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  super.urlSafe;  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  super.urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	109	None	replace
1416	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  System.identityHashCode(lineSeparator);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  urlSafe  ||  System.identityHashCode(lineSeparator);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  urlSafe  ||  System.identityHashCode(lineSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	109	None	replace
1417	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1418	[BUG]  [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1419	[BUG]  [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe!=  null)  {  this.lineSeparator  =!urlSafe;  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1420	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1421	[BUG]  [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe  ==  null)  {  this.lineSeparator  =!urlSafe;  }	  this.lineSeparator    =!urlSafe;    	non-compiled	[CE]  ';'  expected	37	None	replace
1422	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  0);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  0);	  System.arraycopy(this.sep,    0,    this.sep,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	195	None	replace
1423	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
1424	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  frumoase  ';');  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  frumoase  ';');  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  frumoase  ';');	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
1425	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSelected);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSelected);  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSelected);	  safe)    {    lineSeparator    =    CHUNK_SEPARATOR;    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineS    	non-compiled	[CE]  ';'  expected	47	None	replace
1426	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1427	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1428	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1429	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1430	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(lineSeparator,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1431	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1432	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  this.urlSafe  =  lineSeparator;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  lineSeparator.length);  }	  this.urlSafe    =    lineSeparator;    	non-compiled	[CE]  ';'  expected	112	None	replace
1433	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
1434	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
1435	[BUG]  [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(URL_SAFE_ENCODE_TABLE,  0,  this.urlSeparator,  0,  urlSafe);	  System.arraycopy(URL_SAFE_ENCODE_TABLE,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	187	None	replace
1436	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  urlSafe  :  ';';  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.lineSeparator  =  urlSafe?  urlSafe  :  ';';  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe?  urlSafe  :  ';';	  this.lineSeparator    =    urlSafe?    CHUNK_SEPARATOR    :    ';';    	non-compiled	[CE]  ';'  expected	213	None	replace
1437	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength  /  2);	  System.arraycopy(this.sep,    0,    this.sep,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
1438	[BUG]  [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.URLSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	162	None	replace
1439	[BUG]  [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  URL_SAFE_ENCODE_TABLE  ||  urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
1440	[BUG]  [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  &&  urlSafe);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE  &&  urlSafe);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.urlSafe  =  URL_SAFE_ENCODE_TABLE  &&  urlSafe);	  this.urlSafe    =    urlSafe    ||    urlSafe);    	non-compiled	[CE]  ';'  expected	113	None	replace
1441	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
1442	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
1443	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineLength);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.decodeSize,  0,  this.lineLength);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
1444	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  this.decodeSize  -  2);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	232	None	replace
1445	[BUG]  [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(this.buffer,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
1446	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);  [BUGGY]      lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	90	None	replace
