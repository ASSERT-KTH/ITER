bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	6	None	add
2	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
3	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
4	[BUG]  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
5	[BUG]  [BUGGY]    System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
6	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	6	None	add
7	[BUG]  [BUGGY]    System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	6	None	add
8	[BUG]  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	6	None	add
9	[BUG]  [BUGGY]    System.arraycopy(Base64Byte.SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(Base64Byte.SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(Base64Byte.SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
10	[BUG]  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);		non-compiled	[CE]  ';'  expected	6	None	add
11	[BUG]  [BUGGY]  this.encodeSize  =  0;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  0;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  0;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  this.encodeSize  =  1;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  1;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  1;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  this.encodeSize  =  4  +  lineSeparator.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  4  +  lineSeparator.length;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  4  +  lineSeparator.length;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  this.encodeSize  =  2;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  2;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  2;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
15	[BUG]  [BUGGY]  this.encodeSize  -=  4;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  -=  4;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  -=  4;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  this.encodeSize  =  3;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  3;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  3;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
17	[BUG]  [BUGGY]  this.encodeSize  =  4  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  4  +  lineSeparator.length  -  1;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  4  +  lineSeparator.length  -  1;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
18	[BUG]  [BUGGY]  this.encodeSize  =  5;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  5;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  5;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
19	[BUG]  [BUGGY]    System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
20	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
21	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
22	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);		non-compiled	[CE]  ';'  expected	6	None	add
23	[BUG]  [BUGGY]    System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
24	[BUG]  [BUGGY]    System.arraycopy(Base64Variants.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(Base64Variants.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(Base64Variants.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
25	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2);		non-compiled	[CE]  ';'  expected	6	None	add
26	[BUG]  [BUGGY]    System.arraycopy(Base64Variants.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]    System.arraycopy(Base64Variants.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	    System.arraycopy(Base64Variants.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	6	None	add
27	[BUG]  [BUGGY]  this.encodeSize  =  4  +  lineLength;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  [BUGGY]  this.encodeSize  =  4  +  lineLength;  [BUGGY]  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException( "lineSeperator  must  not  contain  base64  characters:  [ "  +  sep  +   "] ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	343	343	1	replace	this.encodeSize  =  4  +  lineLength;	this.encodeSize  =  4;  	non-compiled	[CE]  ';'  expected	5	None	replace
