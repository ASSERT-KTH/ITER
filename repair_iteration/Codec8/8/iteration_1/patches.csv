bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail  +  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail  +  1);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inPos);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inPos,  0,  buffer,  i,  inAvail);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  resize(inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(inAvail);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  resizeBuffer(pos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeBuffer(pos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeBuffer(pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  resizeBytes(inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeBytes(inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeBytes(inAvail);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  resizePos();  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizePos();  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizePos();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
10	[BUG]  [BUGGY]  resize(buffer,  pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(buffer,  pos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(buffer,  pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
11	[BUG]  [BUGGY]  resizeSize();  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeSize();  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeSize();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  resize(inAvail,  pos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(inAvail,  pos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(inAvail,  pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  resize(buffer,  i);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(buffer,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(buffer,  i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  16)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  <  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  16)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  16)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  <  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  pos  <  16)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  pos  <  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  *  pos  <  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
18	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  >  16)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  >  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  pos  >  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inAvail  +  1);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  i,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  i,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(b,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(b,  0,  buffer,  i,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(chunks,  0,  buffer,  i,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	22	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  18)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  18)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  18)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  MASK_8BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
29	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  12)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  12)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  0];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  24)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  24)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  24)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  i);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  i);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
37	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  >  0)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  *  i  >  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
38	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >  0)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  >  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
39	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  0)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
40	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  0)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i!=  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
41	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  0)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
42	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  >  0)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  >  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    >    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
43	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
44	[BUG]  [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  pos  <  inAvail)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  pos  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  inAvail  ||  buffer.length  -  pos  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
45	[BUG]  [BUGGY]  if  (inAvail  ==  null  ||  buffer.length  -  pos  <  inAvail)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail  ==  null  ||  buffer.length  -  pos  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail  ==  null  ||  buffer.length  -  pos  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
46	[BUG]  [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (b  ==  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
47	[BUG]  [BUGGY]  if  (inAvail  >=  null  ||  buffer.length  -  pos  <  inAvail)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail  >=  null  ||  buffer.length  -  pos  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail  >=  null  ||  buffer.length  -  pos  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
48	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  inAvail)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  i,  inAvail  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  i,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  i,  inAvail  +  1);	      System.arraycopy(in,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	24	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(in,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	24	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  inAvail,  buffer,  i);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  inAvail,  buffer,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  inAvail,  buffer,  i);	      System.arraycopy(in,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	24	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
53	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
54	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
55	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
56	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
57	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
59	[BUG]  [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  i  <  inputLength)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  i  <  inputLength)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  0  ||  buffer.length  -  i  <  inputLength)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
60	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  inAvail)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
61	[BUG]  [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inputLength)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inputLength)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inputLength)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
62	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  inputLength)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  inputLength)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  inputLength)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
63	[BUG]  [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  i  <  inputLength)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  i  <  inputLength)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  ==  0  ||  buffer.length  -  i  <  inputLength)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
64	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  encodeSize)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    =    encodeSize)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
65	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  encodeSize)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i!=  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    =    encodeSize)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
66	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  =  inAvail)  {  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  =  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  <  =  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    =    encodeSize)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
67	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  =  encodeSize)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  =  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  =  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    =    encodeSize)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
68	[BUG]  [BUGGY]  inAvail  +=  i;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  inAvail  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	inAvail  +=  i;	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
69	[BUG]  [BUGGY]  inAvail  -=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  inAvail  -=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	inAvail  -=  inAvail;	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
70	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
71	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
72	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
73	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
74	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
75	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
76	[BUG]  [BUGGY]  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	pos  +=  inAvail;	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  i);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  i);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(b,  0,  buffer,  pos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
82	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  decodeSize)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
83	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
84	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
85	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
86	[BUG]  [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
87	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;  [CE]  :  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  :  expected	25	None	replace
89	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  :  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  :  expected	25	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  :  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  :  expected	25	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [CE]  :  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  :  expected	3	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [CE]  :  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  :  expected	3	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [CE]  :  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  :  expected	3	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);  [CE]  :  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  :  expected	3	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  i);  [CE]  :  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  i);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  :  expected	3	None	replace
96	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  <  0)  {  [CE]  :  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  <  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  *  i  <  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
97	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  +  i  <  0)  {  [CE]  :  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  +  i  <  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  +  i  <  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
98	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  0)  {  [CE]  :  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  1  <  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [CE]  :  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  :  expected	32	None	replace
100	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  :  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  :  expected	32	None	replace
101	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
102	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
103	[BUG]  [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
104	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
107	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  >=  inAvail)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  >=  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  >=  inAvail)  {	  if    (buffer!=    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
108	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  >  0)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  >  0)  {	  if    (buffer!=    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
109	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  encodeSize)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  1  <  encodeSize)  {	  if    (buffer!=    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
110	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  256)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  256)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  <  256)  {	  if    (buffer!=    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
111	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  pos  >  0)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  pos  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  *  pos  >  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    >    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
112	[BUG]  [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  >  0)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  >  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (b  ==  null  ||  buffer.length  -  i  >  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    >    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
113	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  inAvail)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  1  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  1  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
114	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >=  encodeSize)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >=  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  >=  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
115	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >=  inAvail)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  >=  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  >=  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
116	[BUG]  [BUGGY]  if  (b  ==  null  ||  buffer.length  -  1  <  encodeSize)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (b  ==  null  ||  buffer.length  -  1  <  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (b  ==  null  ||  buffer.length  -  1  <  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  i,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  i,  inAvail);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  MASK_6BITS;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  MASK_6BITS;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  MASK_6BITS;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
123	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xfff;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
124	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  0)&  0xfff;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  0)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  0)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
125	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  6)&  0xfff;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  6)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  6)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
126	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  0xfff;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  8)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
127	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  1;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  1;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  1;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
128	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  MASK_6BITS;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  MASK_6BITS;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  MASK_6BITS;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
129	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  2;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  2;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  inAvail)&  2;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
130	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
131	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
132	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
134	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
135	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
136	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inPos);  inPos  +=  i;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inPos);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inPos);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
138	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
139	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
140	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
142	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
143	[BUG]  [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
144	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
145	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
146	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
147	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
149	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
150	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
151	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
152	[BUG]  [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
153	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
154	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
156	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xff;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  inAvail)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
157	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  0)&  0xff;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  0)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  0)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
158	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  6)&  0xff;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  6)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  6)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
159	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  0xff;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  8)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
160	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
161	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
162	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
164	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
165	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
166	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inPos);  inPos  +=  i;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inPos);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inPos);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
168	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  1;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  1;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  1;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  12;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  12;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  12;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
174	[BUG]  [BUGGY]  if  (inAvail  ==  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail  ==  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail  ==  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
175	[BUG]  [BUGGY]  if  (inAvail  >=  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail  >=  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail  >=  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
176	[BUG]  [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  inAvail  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
177	[BUG]  [BUGGY]  if  (inAvail  >>  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail  >>  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail  >>  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
178	[BUG]  [BUGGY]  if  (inAvail!=  null  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inAvail!=  null  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inAvail!=  null  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
179	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  inAvail)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i!=  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
180	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
181	[BUG]  [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
182	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
183	[BUG]  [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  if(inAvail  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
185	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  i;  [CE]  :  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  :  expected	23	None	replace
187	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
188	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  decodeSize)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    decodeSize)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
189	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  256)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  256)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  256)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
190	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  256)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  256)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  256)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
191	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  <  256)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  *  i  <  256)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  *  i  <  256)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
192	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  256)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  256)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  256)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
193	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  6)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  6)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  <  6)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator[i]);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator[i]);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
198	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
199	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  i);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  i);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i  +  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	21	None	replace
203	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  ==  encodeSize)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  ==  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  ==  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    =    encodeSize)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
204	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  512)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  512)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  512)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(hashCode,  0,  buffer,  i,  inAvail);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(hashCode,  0,  buffer,  i,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(hashCode,  0,  buffer,  i,  inAvail);	      System.arraycopy(inAvail,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
206	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0xfff;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
207	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  4)&  0xfff;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  4)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  4)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
208	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  1)&  0xfff;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  1)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  1)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
209	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  3)&  0xfff;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  3)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  3)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
210	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  6)&  0xfff;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  6)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  6)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
211	[BUG]  [BUGGY]  resizeBuffer(i);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeBuffer(i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeBuffer(i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
212	[BUG]  [BUGGY]  resizeFields(i);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeFields(i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeFields(i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
213	[BUG]  [BUGGY]  resize(inAvail,  i);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(inAvail,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(inAvail,  i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
214	[BUG]  [BUGGY]  resizeSize(i);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeSize(i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeSize(i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
215	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
216	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
217	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
218	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
220	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
221	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
222	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
224	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
225	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
226	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
228	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
229	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
230	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  16)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
231	[BUG]  [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  16)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (b  ==  null  ||  buffer.length  -  i  <  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
232	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  16)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  16)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  16)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    16)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  i,  lineSeparator);	      System.arraycopy(lineSeparator,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	21	None	replace
234	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  6)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >=  6)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >=  6)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    256)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
235	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
236	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
237	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
239	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
240	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
241	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
242	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
243	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  i,  inAvail);  return;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  i);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  i);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	19	None	replace
246	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
247	[BUG]  [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
248	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  i,  inAvail);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
249	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  i);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  i);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator[i]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator[i]);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator[i]);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
252	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  decodeSize)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    decodeSize)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
253	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  decodeSize)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i!=  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    decodeSize)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
254	[BUG]  [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  decodeSize)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (b  ==  null  ||  buffer.length  -  i  <  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (b  ==  null  ||  buffer.length  -  i  <  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    decodeSize)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
255	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  inputLength)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i!=  inputLength)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i!=  inputLength)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inputLength)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
256	[BUG]  [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  0  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
257	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  inAvail)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
258	[BUG]  [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  i  <  inAvail)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  i  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  ==  0  ||  buffer.length  -  i  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
259	[BUG]  [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  pos  <  inAvail)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  >=  0  ||  buffer.length  -  pos  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  >=  0  ||  buffer.length  -  pos  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
260	[BUG]  [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  pos  <  inAvail)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (inPos  ==  0  ||  buffer.length  -  pos  <  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (inPos  ==  0  ||  buffer.length  -  pos  <  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    pos    <    inAvail)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  i  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  i  +  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  i  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length;	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineLength,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
265	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  4)&  0xff;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  4)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  4)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
266	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0xff;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
267	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  3)&  0xff;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  3)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  3)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
268	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  1)&  0xff;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  1)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  1)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
269	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  6)&  0xff;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  6)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  6)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
270	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  3);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	3	None	replace
271	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1!=  encodeSize)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1!=  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1!=  encodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
272	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  =  inAvail)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  1  <  =  inAvail)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  1  <  =  inAvail)  {	  if    (buffer    ==    null    ||    buffer.length    -    1    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
273	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  0)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  <  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    0)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
274	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  =  0)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  <  =  0)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  <  =  0)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    0)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
275	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  4];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  4];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  4];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
276	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  3];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  3];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  3];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
277	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  2];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  16)&  2];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  16)&  2];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  i  +=  inAvail;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
279	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
280	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail;  i  +=  i);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail;  i  +=  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inAvail;  i  +=  i);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
281	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail;  i  +=  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail;  i  +=  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail;  i  +=  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  i  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  i  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  i  +=  inAvail;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
283	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
284	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
285	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
286	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
288	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
289	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
290	[BUG]  [BUGGY]  arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
291	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
292	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
293	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
294	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
295	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
296	[BUG]  [BUGGY]  arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(buffer,  0,  buffer,  i,  inAvail);  pos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
297	[BUG]  [BUGGY]  arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
298	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
299	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
300	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
301	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
302	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
303	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
304	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos++;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
305	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  <  inPos)  {  inAvail  +=  inAvail;  }  else  {  buffer[pos++]  =  encodeTable[i];  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
306	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inAvail  >  0)  {  inAvail  +=  inAvail;  }  else  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      inAvail    +=    inAvail;    	non-compiled	[CE]  ';'  expected	6	None	replace
307	[BUG]  [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  decodeSize)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  ||  buffer.length  -  i  <  decodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  ||  buffer.length  -  i  <  decodeSize)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    decodeSize)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  i,  inAvail  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  i,  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  i,  inAvail  +  1);	      System.arraycopy(lineSeparator,    0,    buffer,    i,    inAvail);    	non-compiled	[CE]  ';'  expected	21	None	replace
309	[BUG]  [BUGGY]  resize(inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(inPos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
310	[BUG]  [BUGGY]  resize(inPos,  i);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resize(inPos,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resize(inPos,  i);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
311	[BUG]  [BUGGY]  resizeSize(inPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeSize(inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeSize(inPos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
312	[BUG]  [BUGGY]  resizeBuffer(buffer,  pos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  resizeBuffer(buffer,  pos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	resizeBuffer(buffer,  pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	9	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  i);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  i);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
314	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
316	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
317	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
318	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
319	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
320	[BUG]  [BUGGY]  if(i  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
321	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  i,  buffer,  pos,  inAvail);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  i,  buffer,  pos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  11);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  11);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  11);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	1	None	replace
324	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
325	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  inPos++;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
326	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  inPos++;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  inPos++;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  inPos++;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos++;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
327	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
328	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
329	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
330	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  pos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    pos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  i);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  i);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	2	None	replace
333	[BUG]  [BUGGY]  if  (buffer!=  null  &&  buffer.length  -  i  <  encodeSize)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer!=  null  &&  buffer.length  -  i  <  encodeSize)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer!=  null  &&  buffer.length  -  i  <  encodeSize)  {	  if    (buffer!=    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
334	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
335	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  return;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    return;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
336	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  0)&  0xff;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  0)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  0)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
337	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  outAvail)&  0xff;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  outAvail)&  0xff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  outAvail)&  0xff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
338	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
339	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
340	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
341	[BUG]  [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
342	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
343	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  i,  inAvail);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
344	[BUG]  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  9)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  i  >  9)  {  [BUGGY]    resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if  (buffer  ==  null  ||  buffer.length  -  i  >  9)  {	  if    (buffer    ==    null    ||    buffer.length    -    i    <    encodeSize)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
345	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
346	[BUG]  [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
347	[BUG]  [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(i  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
348	[BUG]  [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	Arrays.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  i;	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
349	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  inPos  +=  inAvail;  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    inPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  i);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  i);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  i);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail  +  1);  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos;  i  +=  inAvail  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail;    i    +=    inAvail);    	non-compiled	[CE]  ';'  expected	7	None	replace
352	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  0)&  0xfff;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >=  0)&  0xfff;  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >=  0)&  0xfff;	      buffer[pos++]    =    encodeTable[(i    >>    inAvail)&    0xfff;    	non-compiled	[CE]  ';'  expected	8	None	replace
353	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {    [BUGGY]  buffer[pos++]  =  encodeTable[(i  >>  8)&  MASK_6BITS];  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  buffer[pos++]  =  encodeTable[(x  >>  18)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	485	485	1	replace	buffer[pos++]  =  encodeTable[(i  >>  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(i    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
