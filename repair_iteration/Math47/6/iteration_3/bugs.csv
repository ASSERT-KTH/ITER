bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
2	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
3	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.divisor.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.divisor.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)super.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
4	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	24	None	replace
5	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	24	None	replace
6	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	24	None	replace
7	[BUG]  [BUGGY]  if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
8	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  ||  divisor!=  null)  {  if(!isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  ||  divisor!=  null)  {  if(!isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	||  divisor!=  null)  {  if(!isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  &&  divisor.getDenominator()  ==  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  &&  divisor.getDenominator()  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  &&  divisor.getDenominator()  ==  null);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator()    ||    divisor.getDenominator()    ==    null);    	non-compiled	[CE]  ';'  expected	25	None	replace
11	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getDenominator()!=  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getDenominator()!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getDenominator()!=  null);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator()    ||    divisor.getDenominator()    ==    null);    	non-compiled	[CE]  ';'  expected	25	None	replace
12	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator()  ||  divisor.getDenominator()  ==  null);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator()  ||  divisor.getDenominator()  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator()  ||  divisor.getDenominator()  ==  null);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator()    ||    divisor.getDenominator()    ==    null);    	non-compiled	[CE]  ';'  expected	25	None	replace
13	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
14	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
15	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
16	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
17	[BUG]  [BUGGY]  if  (isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  divisor.isNaN())  {	  if    (isInfinite    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
18	[BUG]  [BUGGY]  if  (isInfinite  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isInfinite  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isInfinite  &&  divisor.isNaN())  {	  if    (isInfinite    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
21	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(!isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(!isInfinite  &&  divisor.isNaN)  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
22	[BUG]  [BUGGY]  if(!isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(!isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(!isNaN  ||  divisor.isNaN)  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
23	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(!isNaN  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(!isNaN  &&  divisor.isNaN())  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
24	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	85	None	replace
25	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	85	None	replace
26	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  this.divisors.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  divisor  =  this.divisors.iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	85	None	replace
27	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	17	None	replace
28	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  isNaN);	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	17	None	replace
29	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
30	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
31	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
32	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
33	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
34	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
35	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
36	[BUG]  [BUGGY]  Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
37	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	55	None	replace
38	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	55	None	replace
39	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	55	None	replace
40	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getImaginary()    ==    0.0    ||    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	82	None	replace
41	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
42	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
43	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN());	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  MathUtils.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
45	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  MathUtils.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
46	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isInfinite  ||  divisor.isNaN  ||  real)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
47	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(real);	  NeighborDivisor    <    N,    INF>    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  ';'  expected	34	None	replace
48	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getDenominatorDivisor(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getDenominatorDivisor(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  getDenominatorDivisor(divisor);	  NeighborDivisor    <    N,    INF>    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  ';'  expected	34	None	replace
49	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(null);	  NeighborDivisor    <    N,    INF>    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  ';'  expected	34	None	replace
50	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  real)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
51	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  real)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
52	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    real.getDenominator());    	non-compiled	[CE]  ';'  expected	67	None	replace
53	[BUG]  [BUGGY]  MathUtils.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor  ==  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	48	None	replace
54	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
55	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
56	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  MathUtils.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  MathUtils.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
59	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
60	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(divisor!=  null)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  >  expected	88	None	replace
61	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  >  expected	5	None	replace
62	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  >  expected	5	None	replace
63	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  >  expected	16	None	replace
64	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  >  expected	16	None	replace
65	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isReal()  ||  divisor.isNaN());  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isReal()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isReal()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  >  expected	16	None	replace
66	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0);  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getImaginary()  ==  0.0);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  >  expected	47	None	replace
67	[BUG]  [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  &&  divisor.isInfinite())  {	  if(isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  >  expected	8	None	replace
68	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isNaN()  ||  isInfinite  &&  divisor.isNaN)  {	  if(isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  >  expected	8	None	replace
69	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  isInfinite)  {	  if(isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  >  expected	8	None	replace
70	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor,  imaginary);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  >  expected	27	None	replace
71	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor);  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigits(divisor);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  >  expected	27	None	replace
72	[BUG]  [BUGGY]  ||  divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  ||  divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	||  divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }	  ||    divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  ||  divisor!=  null)  {  if(!isDenominator())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  ||  divisor!=  null)  {  if(!isDenominator())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	||  divisor!=  null)  {  if(!isDenominator())  {  return  NaN;  }	  ||    divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  imaginary.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary.getDenominator());    	non-compiled	[CE]  ';'  expected	69	None	replace
75	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
76	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isReal(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isReal(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isReal(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
77	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
78	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  it  =  this.divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
79	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  it  =  divisors.values().iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
80	[BUG]  [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Ilerator  <  Complex>  it  =  divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
81	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
82	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
83	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
84	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN    ||    real)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
85	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  isInfinite)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  isInfinite)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN    ||    real)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
86	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
87	[BUG]  [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
88	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  divisor.isNaN  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  divisor.isNaN  ||  imaginary)  {	  if    (isNaN    ||    real    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
89	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {	  if    (isNaN    ||    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	28	None	replace
90	[BUG]  [BUGGY]  if  (isInfinite  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isInfinite  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isInfinite  ||  divisor.isInfinite())  {	  if    (isNaN    ||    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	28	None	replace
91	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  0);	  MathUtils.checkState(divisor.getDenominator()    ==    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
92	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  1);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  1);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  1);	  MathUtils.checkState(divisor.getDenominator()    ==    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
93	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  ||  divisor.getReal()  ==  0.0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  ||  divisor.getReal()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  ||  divisor.getReal()  ==  0.0);	  MathUtils.checkArgument(divisor.getDenominator()    ==    0.0    ||    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	31	None	replace
94	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getDenominator()    ==    0.0    ||    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	31	None	replace
95	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getDenominator()    ==    0.0    ||    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	31	None	replace
96	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  imaginary)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  imaginary)  {	  if    (isNaN    ||    imaginary    ||    real)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
97	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  denominator)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  denominator)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  imaginary  ||  real  ||  denominator)  {	  if    (isNaN    ||    imaginary    ||    real)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
98	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  real);	  MathUtils.checkState(divisor.getDenominator()    ==    real);    	non-compiled	[CE]  ';'  expected	39	None	replace
99	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    real);    	non-compiled	[CE]  ';'  expected	39	None	replace
100	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
101	[BUG]  [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  divisor.getDivisor();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  divisor.getDivisor();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  K,  V>  divisor  =  divisor.getDivisor();	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
102	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNaN();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNaN();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNaN();	  NeighborDivisor    <    N,    INF>    divisor    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	35	None	replace
103	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNeighbor();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNeighbor();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  divisor.getNeighbor();	  NeighborDivisor    <    N,    INF>    divisor    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	35	None	replace
104	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
105	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
106	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||!divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
107	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&!divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
108	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
109	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
110	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
111	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  &&  divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
112	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  &&  divisor.isNaN())  {	  if(divisor!=    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
113	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
114	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
115	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
116	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.isInfinite());	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
117	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	37	None	replace
118	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0.0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	37	None	replace
119	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
120	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
121	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isInfinite()  ||  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
122	[BUG]  [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  divisor.getINF();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  divisor.getINF();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  K,  V>  divisor  =  divisor.getINF();	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
123	[BUG]  [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  K,  V>  divisor  =  getDivisor(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  K,  V>  divisor  =  getDivisor(divisor);	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
124	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	56	None	replace
125	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	56	None	replace
126	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {	  if(divisor    ==    null    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
127	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  imaginary)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  imaginary)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
128	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
129	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
130	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
131	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
132	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
133	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
134	[BUG]  [BUGGY]  Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getRaw()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
135	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  real);	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	61	None	replace
136	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	61	None	replace
137	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	61	None	replace
138	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	23	None	replace
139	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	23	None	replace
140	[BUG]  [BUGGY]  if  (isNaN  &&  divisor.isInfinite)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  &&  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  &&  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
141	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
142	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
143	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
144	[BUG]  [BUGGY]  MathUtils.checkState(real!=  null);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(real!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(real!=  null);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	26	None	replace
145	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isInfinite  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isInfinite  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  isInfinite  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
146	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	30	None	replace
147	[BUG]  [BUGGY]  Context.checkNotNull(real);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkNotNull(real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkNotNull(real);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	33	None	replace
148	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	33	None	replace
149	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	33	None	replace
150	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	73	None	replace
151	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	73	None	replace
152	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisors.get(real);	  MutableDenominator    divisor    =(MutableDenominator)divisors.get(divisor);    	non-compiled	[CE]  ';'  expected	64	None	replace
153	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisors.get(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisors.get(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisors.get(divisor);	  MutableDenominator    divisor    =(MutableDenominator)divisors.get(divisor);    	non-compiled	[CE]  ';'  expected	64	None	replace
154	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisors.get(0);	  MutableDenominator    divisor    =(MutableDenominator)divisors.get(divisor);    	non-compiled	[CE]  ';'  expected	64	None	replace
155	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(real))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(real))  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  Divisor.isNaN(real))  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
156	[BUG]  [BUGGY]  if(divisor!=  null  ||  Divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  Divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  Divisor.isNaN)  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
157	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  Divisor.isNaN())  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
158	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  isNaN  &&  divisor.isNaN())  {	  if(divisor    ==    null    ||    isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
159	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  imaginary)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  imaginary)  {	  if(divisor.isNaN()    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
160	[BUG]  [BUGGY]  if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  &&  isNaN  &&  divisor.isNaN)  {	  if(divisor!=    null    ||    isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
161	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
162	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	73	None	replace
163	[BUG]  [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (divisor!=  null  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (divisor!=  null  ||  divisor.isInfinite())  {	  if    (isNaN    ||    divisor.isInfinite())    {    	non-compiled	[CE]  ';'  expected	28	None	replace
164	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
165	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
166	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    real.getDenominator());    	non-compiled	[CE]  ';'  expected	68	None	replace
167	[BUG]  [BUGGY]  MathUtils.checkState(real.getDenominator()!=  divisor.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(real.getDenominator()!=  divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(real.getDenominator()!=  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    real.getDenominator());    	non-compiled	[CE]  ';'  expected	68	None	replace
168	[BUG]  [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  Divisor.isNaN(imaginary))  {	  if(divisor    ==    null    ||    Divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
169	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	24	None	replace
170	[BUG]  [BUGGY]  Context.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkNotNull(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkNotNull(imaginary);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	33	None	replace
171	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  &&  divisor.isNaN)  {	  if(divisor!=    null    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
172	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
173	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
174	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
175	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
176	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
177	[BUG]  [BUGGY]  if(divisor!=  null  ||!isNaN  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||!isNaN  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||!isNaN  &&  divisor.isNaN)  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
178	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN)  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
179	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
180	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getExpr()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getExpr()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getExpr()  ==  0.0  &&  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	30	None	replace
181	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isInfinite  &&  divisor.isNaN  ||  imaginary)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
182	[BUG]  [BUGGY]  if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isInfinite  ||  imaginary  ||  divisor.isNaN)  {	  if(isInfinite    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
183	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  +  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  +  1);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  +  1);	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
184	[BUG]  [BUGGY]  MathUtils.checkState(real.getDenominator()  ==  imaginary.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(real.getDenominator()  ==  imaginary.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(real.getDenominator()  ==  imaginary.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary.getDenominator());    	non-compiled	[CE]  ';'  expected	69	None	replace
185	[BUG]  [BUGGY]  MathUtils.checkState(imaginary.getDenominator()  ==  divisor.getDenominator());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(imaginary.getDenominator()  ==  divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(imaginary.getDenominator()  ==  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary.getDenominator());    	non-compiled	[CE]  ';'  expected	69	None	replace
186	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.isNaN());	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  ';'  expected	47	None	replace
187	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(!divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
188	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.getImaginary()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
189	[BUG]  [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
190	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	85	None	replace
191	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
192	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  getNeighborDivisor(imaginary);	  NeighborDivisor    <    N,    INF>    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  ';'  expected	34	None	replace
193	[BUG]  [BUGGY]  if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  divisor  ==  null  ||  imaginary  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
194	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisors.get(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisors.get(imaginary);	  MutableDenominator    divisor    =(MutableDenominator)divisors.get(divisor);    	non-compiled	[CE]  ';'  expected	64	None	replace
195	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominators.get(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominators.get(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominators.get(divisor);	  MutableDenominator    divisor    =(MutableDenominator)divisors.get(divisor);    	non-compiled	[CE]  ';'  expected	64	None	replace
196	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	23	None	replace
197	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.isInfinite())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.isInfinite())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  imaginary  ||  real  ||  divisor.isInfinite())  {	  if    (isNaN    ||    imaginary    ||    real)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
198	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  imaginary  ||  real  ||  divisor.isNaN())  {	  if    (isNaN    ||    imaginary    ||    real)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
199	[BUG]  [BUGGY]  &&  divisor!=  null)  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  &&  divisor!=  null)  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	&&  divisor!=  null)  {  if(!isInfinite())  {  return  NaN;  }	  ||    divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
200	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getN();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  divisor.getN();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  divisor.getN();	  NeighborDivisor    <    N,    INF>    divisor    =    divisor.getINF();    	non-compiled	[CE]  ';'  expected	35	None	replace
201	[BUG]  [BUGGY]  if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  imaginary  ||  divisor.isNaN)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
202	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	48	None	replace
203	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    real);    	non-compiled	[CE]  ';'  expected	39	None	replace
204	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getImaginary()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
205	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getImaginary()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
206	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  MathUtils.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
207	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getDenominator()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getDenominator()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
208	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  isInfinite)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.isNaN()  ||  isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.isNaN()  ||  isInfinite)  {	  if(isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
209	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  imaginary.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  imaginary.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  imaginary.isNaN)  {	  if    (isNaN    ||    real    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
210	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	16	None	replace
211	[BUG]  [BUGGY]  MathUtils.checkNotNull(divisor.getDenominator());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkNotNull(divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkNotNull(divisor.getDenominator());	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	61	None	replace
212	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDenominator(divisor,  real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	27	None	replace
213	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(divisor  ==  null)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(divisor  ==  null)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  divisor.isNaN)  {  if(divisor  ==  null)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    if(divisor!=    null)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
214	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  null  ||  divisor.getDenominator()  ==  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  null  ||  divisor.getDenominator()  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  null  ||  divisor.getDenominator()  ==  null);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator()    ||    divisor.getDenominator()    ==    null);    	non-compiled	[CE]  ';'  expected	25	None	replace
215	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getImaginary()  ==  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getImaginary()  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator()  ||  divisor.getImaginary()  ==  null);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator()    ||    divisor.getDenominator()    ==    null);    	non-compiled	[CE]  ';'  expected	25	None	replace
216	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getImaginary()  ==  0.0  &&  divisor.getReal()  ==  0.0);	  MathUtils.checkArgument(divisor.getImaginary()    ==    0.0    ||    divisor.getReal()    ==    0.0);    	non-compiled	[CE]  ';'  expected	32	None	replace
217	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
218	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
219	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
220	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
221	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
222	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary);    	non-compiled	[CE]  ';'  expected	60	None	replace
223	[BUG]  [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  real)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  real)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  real  ||  imaginary  ||  divisor.isNaN  ||  real)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN    ||    real)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
224	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
225	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	37	None	replace
226	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
227	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(isNaN    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
228	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(!isNaN  &&  divisor.isNaN  ||  divisor.isNaN())  {	  if(!isNaN    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
229	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.getImaginary())  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  real  ||  divisor.getImaginary())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  imaginary  ||  real  ||  divisor.getImaginary())  {	  if    (isNaN    ||    imaginary    ||    real)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
230	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  imaginary)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  imaginary)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  &&  divisor.isNaN  ||  imaginary)  {	  if(divisor!=    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
231	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
232	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigits(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
233	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
234	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
235	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
236	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	16	None	replace
237	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	16	None	replace
238	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.getDenominator()  ==  0.0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkDigit(divisor.getDenominator()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkDigit(divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	37	None	replace
239	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isReal()  ||  divisor.isImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isReal()  ||  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isReal()  ||  divisor.isImaginary())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||    divisor.isImaginary())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
240	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  divisor.isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
241	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getRal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
242	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	56	None	replace
243	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	56	None	replace
244	[BUG]  [BUGGY]  Context.checkInfinite(real);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkInfinite(real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkInfinite(real);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	33	None	replace
245	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaNLocal())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaNLocal())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaNLocal())  {	  if(divisor    ==    null    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
246	[BUG]  [BUGGY]  MathUtils.checkNotNull(denominator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkNotNull(denominator);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkNotNull(denominator);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  ';'  expected	47	None	replace
247	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  &&  divisor.isNaN  ||  divisor.isNaN())  {	  if(divisor!=    null    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
248	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  real.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  real.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  real.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary.getDenominator());    	non-compiled	[CE]  ';'  expected	69	None	replace
249	[BUG]  [BUGGY]  if(isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN)  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
250	[BUG]  [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if  (isNaN  ||  imaginary  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if    (isNaN    ||    imaginary    ||    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
251	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
252	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
253	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
254	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
255	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  ||  divisor.isNaN  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
256	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkArgument(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkArgument(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0);	  MathUtils.checkArgument(divisor.getDenominator()    ==    0.0    ||    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  ';'  expected	31	None	replace
257	[BUG]  [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  <  N,  INF>  divisor  =  getDivisor(divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  <  N,  INF>  divisor  =  getDivisor(divisor);	  NeighborDivisor    <    N,    INF>    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  ';'  expected	34	None	replace
258	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
259	[BUG]  [BUGGY]  if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||!divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
260	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
261	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
262	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  this.denominators.iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  it  =  this.denominators.iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  it  =  this.denominators.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
263	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
264	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  Divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  Divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||  Divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
265	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  isInfinite  &&  divisor.isNaN)  {	  if(isInfinite    &&    divisor.isNaN)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
266	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isNaN  ||  divisor.isInfinite)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  isNaN  ||  divisor.isInfinite)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  isNaN  ||  divisor.isInfinite)  {	  if    (isNaN    ||    divisor.isInfinite)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
267	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
268	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN  ||  imaginary!=  null)  {	  if(divisor    ==    null    ||    divisor.isNaN    ||    imaginary)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
269	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    if(isNaN    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
270	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor!=  null  ||  divisor.isNaN())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor!=  null  ||  divisor.isNaN())  {  [BUGGY]      return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor!=  null  ||  divisor.isNaN())  {	  if(divisor    ==    null    ||    isNaN    ||    divisor.isNaN())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
271	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||!divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!divisor.isInfinite()    ||!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
272	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
273	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(isNaN  ||  divisor.isNaN)  {  if(!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
274	[BUG]  [BUGGY]  if(divisor  ==  null  ||!isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||!isInfinite())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
275	[BUG]  [BUGGY]  if(divisor  ==  null  ||!divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null  ||!divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null  ||!divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null)    {    if(!divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
276	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)super.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
277	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getNumerator()!=  divisor.getDenominator());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getNumerator()!=  divisor.getDenominator());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getNumerator()!=  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	23	None	replace
278	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
279	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	24	None	replace
280	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	if(divisor!=  null)  {  if(!isNaN()  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
281	[BUG]  [BUGGY]  parent  ==  null  ||!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  parent  ==  null  ||!isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	parent  ==  null  ||!isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
282	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominator().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominator().iterator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDenominator().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	85	None	replace
