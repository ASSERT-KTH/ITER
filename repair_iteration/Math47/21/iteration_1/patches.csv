bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
2	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
3	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NON;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
5	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NON;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
6	[BUG]  [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NON;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
7	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
10	[BUG]  [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
11	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
12	[BUG]  [BUGGY]  if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
13	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
14	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
15	[BUG]  [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
16	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
17	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
19	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NONE;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
20	[BUG]  [BUGGY]  return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(imaginary    *    factor.real    -    real    *    factor.imaginary,    imaginary    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	4	None	replace
21	[BUG]  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(imaginary    *    factor.real    -    real    *    factor.imaginary,    imaginary    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	4	None	replace
22	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	      if(isNaN    ||    factor.isNaN    ||!Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	15	None	replace
23	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||!Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	      if(isNaN    ||    factor.isNaN    ||!Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	15	None	replace
24	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||!Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	      if(isNaN    ||    factor.isNaN    ||!Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	15	None	replace
25	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
26	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
27	[BUG]  [BUGGY]  return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(imaginary    *    factor.real    -    real    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	1	None	replace
28	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
30	[BUG]  [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
31	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.imaginary  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.imaginary  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.imaginary  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(real    *    factor.imaginary    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(real    *    factor.imaginary    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	3	None	replace
33	[BUG]  [BUGGY]  return  createComplex(real  *  factor.imaginary  /  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.imaginary  /  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.imaginary  /  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(real    *    factor.imaginary    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  /  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.real  /  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  /  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(imaginary    *    factor.real    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	2	None	replace
35	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
36	[BUG]  [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	||  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
37	[BUG]  [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  ||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	||  Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
38	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);	  return    createComplex(real    *    factor.real    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.imaginary);    	non-compiled	[CE]  not  a  statement	16	None	replace
39	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);	  return    createComplex(real    *    factor.real    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.imaginary);    	non-compiled	[CE]  not  a  statement	16	None	replace
40	[BUG]  [BUGGY]  return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);	  return    createComplex(real    *    factor.real    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.imaginary);    	non-compiled	[CE]  not  a  statement	16	None	replace
41	[BUG]  [BUGGY]  Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Context.checkState(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
42	[BUG]  [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
45	[BUG]  [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor  factor  =  Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
46	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
47	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);	  return    createComplex(imaginary    *    factor.real    -    real    *    factor.imaginary,    imaginary    *    factor.imaginary    +    imaginary    *    factor.real);    	non-compiled	[CE]  not  a  statement	4	None	replace
49	[BUG]  [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
50	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
51	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
52	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN)  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN)  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
53	[BUG]  [BUGGY]  if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
54	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real))  {  return  NaN;  }  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real))  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
55	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
56	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN)  {  if(Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN)  {  if(Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN)  {  if(Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	      if(isNaN    ||    factor.isNaN    ||!Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	15	None	replace
57	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	      if(isNaN    ||    factor.isNaN    ||!Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	15	None	replace
58	[BUG]  [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
59	[BUG]  [BUGGY]  AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
60	[BUG]  [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
61	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
62	[BUG]  [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
63	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
64	[BUG]  [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
65	[BUG]  [BUGGY]  AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	AssertionError  e  =  solveError(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
66	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
67	[BUG]  [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
68	[BUG]  [BUGGY]  if(isInfinite  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isInfinite  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isInfinite  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
69	[BUG]  [BUGGY]  if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
70	[BUG]  [BUGGY]  Annotation.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Annotation.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Annotation.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
71	[BUG]  [BUGGY]  if(!isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(!isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(!isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
72	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
73	[BUG]  [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    N    	non-compiled	[CE]  not  a  statement	9	None	replace
74	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
75	[BUG]  [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Denominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
76	[BUG]  [BUGGY]  Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN    	non-compiled	[CE]  not  a  statement	10	None	replace
77	[BUG]  [BUGGY]  Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	Context.checkInfinite(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
78	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(isInfinite)    {    if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	8	None	replace
79	[BUG]  [BUGGY]  return  createComplex(real  *  factor.complex  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  return  createComplex(real  *  factor.complex  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [BUGGY]    real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.complex  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);	  return    createComplex(real    *    factor.real    -    imaginary    *    factor.imaginary,    real    *    factor.imaginary    +    imaginary    *    factor.imaginary);    	non-compiled	[CE]  not  a  statement	16	None	replace
80	[BUG]  [BUGGY]  if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(isInfinite  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
81	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(isNaN    ||    factor.isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.real)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
