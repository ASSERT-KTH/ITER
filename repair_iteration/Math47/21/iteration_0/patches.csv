bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
2	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
3	[BUG]  [BUGGY]  return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.imaginary  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
4	[BUG]  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);  [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(imaginary  *  factor.real  -  real  *  factor.imaginary,  imaginary  *  factor.imaginary  +  imaginary  *  factor.real);	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	  	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
6	[BUG]  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }		non-compiled	[CE]  not  a  statement	42	None	add
7	[BUG]  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	42	None	add
8	[BUG]  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF		non-compiled	[CE]  not  a  statement	42	None	add
9	[BUG]  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N		non-compiled	[CE]  not  a  statement	42	None	add
10	[BUG]  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isInfinite)  {  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN		non-compiled	[CE]  not  a  statement	42	None	add
11	[BUG]  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	42	None	add
12	[BUG]  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }		non-compiled	[CE]  not  a  statement	42	None	add
13	[BUG]  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	42	None	add
14	[BUG]  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isNaN  ||  factor.isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }		non-compiled	[CE]  not  a  statement	42	None	add
15	[BUG]  [BUGGY]    if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(isNaN  ||  factor.isNaN  ||!Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit		non-compiled	[CE]  not  a  statement	42	None	add
16	[BUG]  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);  [BUGGY]  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.imaginary);	return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,    real  *  factor.imaginary  +  imaginary  *  factor.real);  	non-compiled	[CE]  not  a  statement	41	None	replace
17	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	42	None	add
18	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }		non-compiled	[CE]  not  a  statement	42	None	add
19	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NONE;  }		non-compiled	[CE]  not  a  statement	42	None	add
20	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }		non-compiled	[CE]  not  a  statement	42	None	add
21	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }  [BUGGY]  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,        real  *  factor.imaginary  +  imaginary  *  factor.real);  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NON;  }		non-compiled	[CE]  not  a  statement	42	None	add
