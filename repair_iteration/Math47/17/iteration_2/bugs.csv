bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
2	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	15	None	replace
4	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getReal();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getReal();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	15	None	replace
5	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.clone();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.clone();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.clone();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	15	None	replace
6	[BUG]  [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getReal();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getReal();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  N,  E>  divisor  =  divisor.getReal();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
7	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor!=  null);	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
8	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN()  +  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getNaN()  +  1;  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getNaN()  +  1;	  final    double    c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
10	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
11	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
12	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getReal();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Neighbor  divisor  =  divisor.getReal();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getReal();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
13	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
14	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
15	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  static  final  double  c  =  divisor.getImaginary();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getImaginary();	  static    final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
16	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  static  final  double  c  =  divisor.getNaN();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getNaN();	  static    final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
17	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  static  final  double  c  =  divisor.getINF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getINF();	  static    final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
18	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
20	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
21	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
22	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
23	[BUG]  [BUGGY]  final  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getInf();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInf();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	3	None	replace
24	[BUG]  [BUGGY]  c  =  divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  c  =  divisor.getReal();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getReal();	      	non-compiled	[CE]  not  a  statement	4	None	replace
25	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
29	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
30	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
31	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
33	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
34	[BUG]  [BUGGY]  Context.checkNotNull(divisor);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkNotNull(divisor);  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkNotNull(divisor);	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	15	None	replace
35	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  Complex  c  =  divisor.getComplex();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  Complex  c  =  divisor.getComplex();	      	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0);	      	non-compiled	[CE]  not  a  statement	4	None	replace
37	[BUG]  [BUGGY]  Complex  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Complex  c  =  divisor.getComplex();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getComplex();	      	non-compiled	[CE]  not  a  statement	4	None	replace
38	[BUG]  [BUGGY]  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  c  =  divisor.getImaginary();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getImaginary();	      	non-compiled	[CE]  not  a  statement	4	None	replace
39	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
40	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
41	[BUG]  [BUGGY]  final  double  c  =  divisor.getINF()  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getINF()  +  1;  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getINF()  +  1;	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	3	None	replace
42	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
43	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
44	[BUG]  [BUGGY]  final  double  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getInF();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInF();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	3	None	replace
45	[BUG]  [BUGGY]  final  double  c  =  divisor.getInFull();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getInFull();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInFull();	  final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	3	None	replace
46	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  static  final  double  c  =  divisor.getComplex();  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getComplex();	  static    final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	17	None	replace
47	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex()  +  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  final  double  c  =  divisor.getComplex()  +  1;  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getComplex()  +  1;	  final    double    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	12	None	replace
49	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	4	None	replace
50	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	4	None	replace
51	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	      	non-compiled	[CE]  not  a  statement	4	None	replace
52	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na	      if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
53	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
55	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
56	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
