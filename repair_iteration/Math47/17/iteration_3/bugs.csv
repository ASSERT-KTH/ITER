bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
2	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
3	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getINF();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getINF();	  Neighbor    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
4	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getNeighbor();	  Neighbor    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
5	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getNaN();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getNaN();	  Neighbor    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
6	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
7	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
8	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
9	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  Na  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  Na  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  Na	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
10	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
11	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getNaN()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getNaN()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getNaN()  +  1;	  static    final    double    c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	16	None	replace
12	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
13	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
14	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
15	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
16	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
17	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  Complex  c  =  divisor.getINF();	  final    Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	35	None	replace
18	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getCreator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getCreator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  Complex  c  =  divisor.getCreator();	  final    Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	35	None	replace
19	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
20	[BUG]  [BUGGY]  if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
21	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
23	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
24	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
25	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
26	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
27	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  Na  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  Na  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  Na	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
28	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
29	[BUG]  [BUGGY]  nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
30	[BUG]  [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
31	[BUG]  [BUGGY]  nisipr.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	nisipr.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
32	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
33	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
34	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
35	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfini  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfini  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfini	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
36	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
37	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex()  *  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getComplex()  *  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getComplex()  *  1;	  final    double    c    =    divisor.getComplex()    +    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
38	[BUG]  [BUGGY]  final  double  c  =  divisor.getInfinite();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInfinite();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInfinite();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	23	None	replace
39	[BUG]  [BUGGY]  final  double  c  =  divisor.getInt();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInt();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInt();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	23	None	replace
40	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
41	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
42	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  Na  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  Na  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  Na	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
43	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinit  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinit  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinit	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
44	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.isNaN()    &&    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
45	[BUG]  [BUGGY]  nisipisNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipisNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	nisipisNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.isNaN()    &&    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
46	[BUG]  [BUGGY]  final  double  c  =  divisor.getInF()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInF()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInF()  +  1;	  final    double    c    =    divisor.getInF();    	non-compiled	[CE]  not  a  statement	44	None	replace
47	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0);    	non-compiled	[CE]  not  a  statement	36	None	replace
48	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0);	  Context.checkState(divisor.getReal()    ==    0.0);    	non-compiled	[CE]  not  a  statement	36	None	replace
49	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0);    	non-compiled	[CE]  not  a  statement	36	None	replace
50	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
51	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
52	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor  ==  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	7	None	replace
53	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor!=  null  &&  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	7	None	replace
54	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.getReal()  ==  0.0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.getReal()  ==  0.0);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor!=  null  &&  divisor.getReal()  ==  0.0);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	7	None	replace
55	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getINF();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getINF();	  NeighborDivisor    <    NaN>    divisor    =(NaN    <    NaN>)divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
56	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getDenominator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)divisor.getDenominator();	  NeighborDivisor    <    NaN>    divisor    =(NaN    <    NaN>)divisor.getReal();    	non-compiled	[CE]  not  a  statement	4	None	replace
57	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
58	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)super.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
59	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
60	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
61	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
62	[BUG]  [BUGGY]  final  divisor  =  divisor.getReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getReal();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor  =  divisor.getReal();	  if(divisor.getReal()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
63	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  divisor.getReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =  divisor.getReal();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =  divisor.getReal();	  if(divisor.getReal()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
64	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN()  *  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getNaN()  *  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getNaN()  *  1;	  final    double    c    =    divisor.getNaN()    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
65	[BUG]  [BUGGY]  final  double  c  =  divisor.getIn();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getIn();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getIn();	  final    double    c    =    divisor.getInFull();    	non-compiled	[CE]  not  a  statement	45	None	replace
66	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
67	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
68	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
69	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
70	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	40	None	replace
71	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary());	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	9	None	replace
72	[BUG]  [BUGGY]  Complex  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getINF();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	37	None	replace
73	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getCurrentComplex();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	37	None	replace
74	[BUG]  [BUGGY]  Complex  c  =  divisor.getCreator();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getCreator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getCreator();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	37	None	replace
75	[BUG]  [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getNaN();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getNaN();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  N,  E>  divisor  =  divisor.getNaN();	  NeighborDivisor    <    N,    E>    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
76	[BUG]  [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getINF();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  N,  E>  divisor  =  divisor.getINF();	  NeighborDivisor    <    N,    E>    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
77	[BUG]  [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getNeighbor();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getNeighbor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  N,  E>  divisor  =  divisor.getNeighbor();	  NeighborDivisor    <    N,    E>    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
78	[BUG]  [BUGGY]  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  c  =  divisor.getNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getNaN();	  c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	38	None	replace
79	[BUG]  [BUGGY]  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  c  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getINF();	  c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	38	None	replace
80	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	34	None	replace
81	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getInf();	  static    final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	17	None	replace
82	[BUG]  [BUGGY]  Constructor  <  NaN,  NaN>  divisor  =  getDivisor(divisor.getReal());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  NaN,  NaN>  divisor  =  getDivisor(divisor.getReal());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Constructor  <  NaN,  NaN>  divisor  =  getDivisor(divisor.getReal());	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    Na    	non-compiled	[CE]  not  a  statement	52	None	replace
83	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
84	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary());	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
85	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
86	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
87	[BUG]  [BUGGY]  c  =  divisor.getReal()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  c  =  divisor.getReal()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getReal()  +  1;	  c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	24	None	replace
88	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getRaw();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getRaw();	  static    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	15	None	replace
89	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
90	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
91	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)this.divisor.clone();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)this.divisor.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)this.divisor.clone();	  NeighborDivisor    <    NaN>    divisor    =(NaN    <    NaN>)divisor.clone();    	non-compiled	[CE]  not  a  statement	5	None	replace
92	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)denominator.clone();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)denominator.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)denominator.clone();	  NeighborDivisor    <    NaN>    divisor    =(NaN    <    NaN>)divisor.clone();    	non-compiled	[CE]  not  a  statement	5	None	replace
93	[BUG]  [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)super.clone();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)super.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  NaN>  divisor  =(NaN  <  NaN>)super.clone();	  NeighborDivisor    <    NaN>    divisor    =(NaN    <    NaN>)divisor.clone();    	non-compiled	[CE]  not  a  statement	5	None	replace
94	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.clone();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	28	None	replace
95	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDenominator();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	28	None	replace
96	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getINF();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	28	None	replace
97	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
98	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
99	[BUG]  [BUGGY]  final  divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
100	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
101	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.getReal()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
102	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.getReal()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
103	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;	  if(divisor.getReal()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
104	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
105	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
106	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
107	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
108	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getInfinite();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getInfinite();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getInfinite();	  static    final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	17	None	replace
109	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
110	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getRal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
111	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isNaN()    &&    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
112	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getDivisor();	  Neighbor    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
113	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor!=  null  &&  divisor.isNaN());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	7	None	replace
114	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isNaN()  &&!isNaN())  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
115	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getRal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
116	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
117	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
118	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
119	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
120	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
121	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
122	[BUG]  [BUGGY]  Complex  c  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getDenominator();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	37	None	replace
123	[BUG]  [BUGGY]  Complex  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Complex  c  =  divisor.getNaN();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	37	None	replace
124	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
125	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
126	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  ||  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
127	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
128	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isInfinite  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
129	[BUG]  [BUGGY]  Context.checkNotNull(denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkNotNull(denominator);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkNotNull(denominator);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	34	None	replace
130	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isNaN)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
131	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isNaN)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
132	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	40	None	replace
133	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getNaN()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getNaN()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getNaN()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	40	None	replace
134	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&!isInfinite())  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
135	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
136	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	28	None	replace
137	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  divisor  =(NaN)divisor.cloneTree();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	28	None	replace
138	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  Complex  c  =  divisor.getNaN();	  final    Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	35	None	replace
139	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
140	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
141	[BUG]  [BUGGY]  Final  Complex  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Final  Complex  c  =  divisor.getComplex();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Final  Complex  c  =  divisor.getComplex();	  final    Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	35	None	replace
142	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isNaN())  {  return  NaN	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN    	non-compiled	[CE]  not  a  statement	43	None	replace
143	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isNaN())    {    return    NaN    	non-compiled	[CE]  not  a  statement	43	None	replace
144	[BUG]  [BUGGY]  if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()!=  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
145	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&!isInfinite())  {  return  NaN;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
146	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isNaN())  {  return  NaN  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isNaN())  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isNaN())  {  return  NaN	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	9	None	replace
147	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  NaN	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isNaN()    &&!Divisor.isInfinite())    {    return    NaN    	non-compiled	[CE]  not  a  statement	9	None	replace
148	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  NaN	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
149	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isNaN)  {  return  NaN	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
150	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
151	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
152	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
153	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	static  final  double  c  =  divisor.getDenominator();	  static    final    double    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	46	None	replace
154	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Neighbor  divisor  =  divisor.getDenominator();	  Neighbor    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
155	[BUG]  [BUGGY]  final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
156	[BUG]  [BUGGY]  final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
157	[BUG]  [BUGGY]  final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
158	[BUG]  [BUGGY]  final  divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
159	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  Na	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    Na    	non-compiled	[CE]  not  a  statement	52	None	replace
160	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  Na  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  Na  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isNaN()  &&!Divisor.isInfinite())  {  return  Na	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    Na    	non-compiled	[CE]  not  a  statement	52	None	replace
161	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkState(divisor!=  null  ||  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	7	None	replace
162	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
163	[BUG]  [BUGGY]  parent.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  parent.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	parent.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
164	[BUG]  [BUGGY]  final  double  c  =  divisor.getInfinity();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInfinity();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInfinity();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	23	None	replace
165	[BUG]  [BUGGY]  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  c  =  divisor.getRaw();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	c  =  divisor.getRaw();	  c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	24	None	replace
166	[BUG]  [BUGGY]  final  double  c  =  divisor.getInExtern();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInExtern();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  c  =  divisor.getInExtern();	  final    double    c    =    divisor.getInFull();    	non-compiled	[CE]  not  a  statement	45	None	replace
167	[BUG]  [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
168	[BUG]  [BUGGY]  Context.checkArgument(divisor!=  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkArgument(divisor!=  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	Context.checkArgument(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	34	None	replace
169	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
170	[BUG]  [BUGGY]  final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	final  double  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
171	[BUG]  [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NeighborDivisor  <  N,  E>  divisor  =  divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	NeighborDivisor  <  N,  E>  divisor  =  divisor.getDenominator();	  NeighborDivisor    <    N,    E>    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
