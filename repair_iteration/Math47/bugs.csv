bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return "(" + real + ", " + imaginary + ")"; [FE] AssertionError [CONTEXT] public String toString() { [BUGGY] return "(" + real + ", " + imaginary + ")"; [BUGGY] } [CLASS] Complex [METHOD] toString [RETURN_TYPE] String  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor expReal factor imaginary imaginary2 imaginaryPart innerPart nthPhi nthRootOfAbs q real real2 realPart slice subtrahend t x long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend x  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	1179	1179	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public String toString() { [BUGGY] [BUGGY] return "(" + real + ", " + imaginary + ")"; } [CLASS] Complex [METHOD] toString [RETURN_TYPE] String  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor expReal factor imaginary imaginary2 imaginaryPart innerPart nthPhi nthRootOfAbs q real real2 realPart slice subtrahend t x long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend x  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	1179	1179	2	add	
3	[BUG] [BUGGY] return NaN; [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { [BUGGY] return NaN; [BUGGY] } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { [BUGGY] [BUGGY] return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	add	
5	[BUG] [BUGGY] return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); [FE] AssertionError [CONTEXT] public Complex atan() { if (isNaN) { return NaN; } [BUGGY] return this.add(I).divide(I.subtract(this)).log()   .multiply(I.divide(createComplex(2.0, 0.0))); [BUGGY] .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	583	584	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex atan() { if (isNaN) { return NaN; } [BUGGY] [BUGGY] return this.add(I).divide(I.subtract(this)).log()   .multiply(I.divide(createComplex(2.0, 0.0))); .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	583	584	2	add	
7	[BUG] [BUGGY] if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } [BUGGY] if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { [BUGGY] return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary();  [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } [BUGGY] [BUGGY] if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary();  [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	add	
9	[BUG] [BUGGY] MathUtils.checkNotNull(divisor); [FE] AssertionError [CONTEXT] throws NullArgumentException { [BUGGY] MathUtils.checkNotNull(divisor); [BUGGY] if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { [BUGGY] [BUGGY] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	add	
11	[BUG] [BUGGY] if (isNaN || divisor.isNaN) { [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); [BUGGY] if (isNaN || divisor.isNaN) { [BUGGY] return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); [BUGGY] [BUGGY] if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	252	252	2	add	
13	[BUG] [BUGGY] if (isNaN) { [FE] AssertionError [CONTEXT] public Complex atan() { [BUGGY] if (isNaN) { [BUGGY] return NaN; } return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	579	579	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex atan() { [BUGGY] [BUGGY] if (isNaN) { return NaN; } return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	579	579	2	add	
15	[BUG] [BUGGY] double q = c / d; [FE] AssertionError [CONTEXT] } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [BUGGY] double q = c / d; [BUGGY] double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [BUGGY] [BUGGY] double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	add	
17	[BUG] [BUGGY] double denominator = c * q + d; [FE] AssertionError [CONTEXT] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; [BUGGY] double denominator = c * q + d; [BUGGY] return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	269	269	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; [BUGGY] [BUGGY] double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	269	269	2	add	
19	[BUG] [BUGGY] return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); [FE] AssertionError [CONTEXT] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; [BUGGY] return createComplex((real * q + imaginary) / denominator,    (imaginary * q - real) / denominator); [BUGGY] (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; [BUGGY] [BUGGY] return createComplex((real * q + imaginary) / denominator,    (imaginary * q - real) / denominator); (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	add	
21	[BUG] [BUGGY] double q = d / c; [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { [BUGGY] double q = d / c; [BUGGY] double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	273	273	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { [BUGGY] [BUGGY] double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	273	273	2	add	
23	[BUG] [BUGGY] double denominator = d * q + c; [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; [BUGGY] double denominator = d * q + c; [BUGGY] return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; [BUGGY] [BUGGY] double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	add	
25	[BUG] [BUGGY] return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [BUGGY] return createComplex((imaginary * q + real) / denominator,    (imaginary - real * q) / denominator); [BUGGY] (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	275	276	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [BUGGY] [BUGGY] return createComplex((imaginary * q + real) / denominator,    (imaginary - real * q) / denominator); (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	275	276	2	add	
27	[BUG] [BUGGY] return NaN; [FE] AssertionError [CONTEXT] public Complex log() { if (isNaN) { [BUGGY] return NaN; [BUGGY] } return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real)); } [CLASS] Complex [METHOD] log [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor expReal factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	747	747	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex log() { if (isNaN) { [BUGGY] [BUGGY] return NaN; } return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real)); } [CLASS] Complex [METHOD] log [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor expReal factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	747	747	2	add	
29	[BUG] [BUGGY] return createComplex(real + addend.getReal(),  imaginary + addend.getImaginary()); [FE] AssertionError [CONTEXT] public Complex add(Complex addend) throws NullArgumentException { MathUtils.checkNotNull(addend); if (isNaN || addend.isNaN) { return NaN; } [BUGGY] return createComplex(real + addend.getReal(),        imaginary + addend.getImaginary()); [BUGGY] imaginary + addend.getImaginary()); } [CLASS] Complex [METHOD] add [RETURN_TYPE] Complex  Complex addend [VARIABLES] boolean isInfinite isNaN double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.23570226039551587	162	163	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex add(Complex addend) throws NullArgumentException { MathUtils.checkNotNull(addend); if (isNaN || addend.isNaN) { return NaN; } [BUGGY] [BUGGY] return createComplex(real + addend.getReal(),        imaginary + addend.getImaginary()); imaginary + addend.getImaginary()); } [CLASS] Complex [METHOD] add [RETURN_TYPE] Complex  Complex addend [VARIABLES] boolean isInfinite isNaN double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.23570226039551587	162	163	2	add	
31	[BUG] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [BUGGY] return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } [BUGGY] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	add	
33	[BUG] [BUGGY] final double c = divisor.getReal(); [FE] AssertionError [CONTEXT] } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [BUGGY] final double c = divisor.getReal(); [BUGGY] final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [BUGGY] [BUGGY] final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	264	264	2	add	
35	[BUG] [BUGGY] final double d = divisor.getImaginary(); [FE] AssertionError [CONTEXT] if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] final double d = divisor.getImaginary(); [BUGGY]  if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	265	265	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) { return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] [BUGGY] final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	265	265	2	add	
37	[BUG] [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { [FE] AssertionError [CONTEXT] return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { [BUGGY] double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return NaN; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [BUGGY] [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	add	
39	[BUG] [BUGGY] return NaN; [FE] AssertionError [CONTEXT] public Complex multiply(Complex factor) throws NullArgumentException { MathUtils.checkNotNull(factor); if (isNaN || factor.isNaN) { [BUGGY] return NaN; [BUGGY] } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  return INF; } return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real); [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex multiply(Complex factor) throws NullArgumentException { MathUtils.checkNotNull(factor); if (isNaN || factor.isNaN) { [BUGGY] [BUGGY] return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  return INF; } return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real); [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	add	
41	[BUG] [BUGGY] return createComplex(real * factor.real - imaginary * factor.imaginary,  real * factor.imaginary + imaginary * factor.real); [FE] AssertionError [CONTEXT] if (isNaN || factor.isNaN) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  return INF; } [BUGGY] return createComplex(real * factor.real - imaginary * factor.imaginary,        real * factor.imaginary + imaginary * factor.real); [BUGGY] real * factor.imaginary + imaginary * factor.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isNaN || factor.isNaN) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  return INF; } [BUGGY] [BUGGY] return createComplex(real * factor.real - imaginary * factor.imaginary,        real * factor.imaginary + imaginary * factor.real); real * factor.imaginary + imaginary * factor.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	428	429	2	add	
43	[BUG] [BUGGY] return createComplex(real - subtrahend.getReal(),  imaginary - subtrahend.getImaginary()); [FE] AssertionError [CONTEXT] public Complex subtract(Complex subtrahend) throws NullArgumentException { MathUtils.checkNotNull(subtrahend); if (isNaN || subtrahend.isNaN) { return NaN; } [BUGGY] return createComplex(real - subtrahend.getReal(),        imaginary - subtrahend.getImaginary()); [BUGGY] imaginary - subtrahend.getImaginary()); } [CLASS] Complex [METHOD] subtract [RETURN_TYPE] Complex  Complex subtrahend [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	493	494	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex subtract(Complex subtrahend) throws NullArgumentException { MathUtils.checkNotNull(subtrahend); if (isNaN || subtrahend.isNaN) { return NaN; } [BUGGY] [BUGGY] return createComplex(real - subtrahend.getReal(),        imaginary - subtrahend.getImaginary()); imaginary - subtrahend.getImaginary()); } [CLASS] Complex [METHOD] subtract [RETURN_TYPE] Complex  Complex subtrahend [VARIABLES] boolean isInfinite isNaN double addend c d denominator divisor factor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	493	494	2	add	
