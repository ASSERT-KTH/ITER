bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2	[BUG]  [BUGGY]  if(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
3	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
5	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
6	[BUG]  [BUGGY]  Context.checkState(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
7	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite());	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
18	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
20	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
21	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  if(Divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(Divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(di  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(di	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getImaginary());  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.isInfinite(),  divisor.getImaginary());	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  Context.checkNotNull(divisor);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkNotNull(divisor);  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkNotNull(divisor);	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  if  (divisor.isInfinite()  ||!isNaN())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isInfinite()  ||!isNaN())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isInfinite()  ||!isNaN())  {	  if    (divisor.isInfinite()    ||!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  if  (divisor.isReal()  ||!isInfinite())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isReal()  ||!isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||!isInfinite())  {	  if    (divisor.isInfinite()    ||!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
42	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(!isInfinite  &&  divisor.isNaN())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isNaN())  {	  if(!isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {	  if(!isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
45	[BUG]  [BUGGY]  if  (divisor.isNaN()  ||!isInfinite())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isNaN()  ||!isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isNaN()  ||!isInfinite())  {	  if    (divisor.isNaN()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {	  if    (divisor.isNaN()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  RealMath.abs(divisor)/  divisor.getImaginary();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  RealMath.abs(divisor)/  divisor.getImaginary();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(divisor)/  divisor.getImaginary();	      RealMath.abs(real)/    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  RealMath.abs(real)/  divisor.getReal();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  RealMath.abs(real)/  divisor.getReal();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(real)/  divisor.getReal();	      RealMath.abs(real)/    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  RealMath.abs(real)/  divisor.getINF();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  RealMath.abs(real)/  divisor.getINF();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(real)/  divisor.getINF();	      RealMath.abs(real)/    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  isInfinite())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isReal()  ||  isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  isInfinite())  {	  if    (divisor.isReal()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isReal()  ||  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  divisor.isInfinite())  {	  if    (divisor.isReal()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor!=  null);	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  	14	None	replace
57	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary());  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary());  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getImaginary());	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  	14	None	replace
58	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.clone();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.clone();	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.clone();	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(isNaN  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isNaN  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
61	[BUG]  [BUGGY]  if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  if  (divisor.isInfinite()  &&  divisor.isReal())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isInfinite()  &&  divisor.isReal())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isInfinite()  &&  divisor.isReal())  {	  if    (divisor.isReal()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isReal())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if  (divisor.isInfinite()  ||  divisor.isReal())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isInfinite()  ||  divisor.isReal())  {	  if    (divisor.isReal()    &&!isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
71	[BUG]  [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
72	[BUG]  [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
76	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor);  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(divisor);	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
77	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(!isNaN  &&  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isNaN  &&  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  if(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(isNaN    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
80	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isNaN())  {  if(!isInfinite())  {  return  ZERO;  }	      if(divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
81	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
82	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }	      if(divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
83	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	parent  ==  null  ||!isInfinite())  {  return  ZERO;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
88	[BUG]  [BUGGY]  if(Divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(Divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
89	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
92	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
93	[BUG]  [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	parent  ==  null  ||!isInfinite())  {  return  NaN;  }	      if(divisor!=    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
94	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
95	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
96	[BUG]  [BUGGY]  if(Divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(Divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(Divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]    return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
100	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
102	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	      if(Divisor.isInfinite())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
103	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }    [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
