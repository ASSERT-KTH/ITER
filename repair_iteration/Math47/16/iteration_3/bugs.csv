bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
5	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
6	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
7	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
8	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(Divisor.isNaN()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
9	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(Divisor.isNaN()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
10	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  divisor.isNaN())  {	  if    (divisor.isReal()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {	  if    (divisor.isReal()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
12	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
13	[BUG]  [BUGGY]  Context.checkState(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isInfinite  ||  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
14	[BUG]  [BUGGY]  nisipisInfinite())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
15	[BUG]  [BUGGY]  parent  ==  null  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	parent  ==  null  &&!isInfinite())  {  return  NaN;  }	  parent    ==    null    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
16	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
17	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
20	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
21	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
22	[BUG]  [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
23	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
24	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
25	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(!isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isNaN())  {	  if(isInfinite    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
28	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isInfinite())  {	  if(isInfinite    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
29	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isNaN())  {	  if(isInfinite    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
30	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(Divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
31	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
34	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
35	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
36	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
37	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
38	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
40	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isNaN())  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  ||  divisor.isNaN())  {	  if(!isInfinite    &&    divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
41	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
42	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
43	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
44	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
45	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
46	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
47	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
48	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
49	[BUG]  [BUGGY]  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
50	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
51	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
52	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
53	[BUG]  [BUGGY]  nisipisNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
54	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
55	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
56	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
57	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0.0    &&    divisor.getReal()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
58	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
59	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isNaN  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isNaN  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isNaN  ||!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
62	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
63	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
64	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(isNaN  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(isNaN  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(isNaN  ||!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
65	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
67	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(!isNaN()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
68	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
69	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.get	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(di    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
70	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(d  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(d  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(d	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(di    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
71	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
72	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isEmpty())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isEmpty())  {	  if(divisor.isInfinite()    ||    divisor.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
73	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
74	[BUG]  [BUGGY]  RealMath.abs(divisor)/  divisor.getReal();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(divisor)/  divisor.getReal();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(divisor)/  divisor.getReal();	  RealMath.abs(real)/    divisor.getReal();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
75	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
76	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {	  if(!isInfinite    &&    divisor.isInfinite()    &&    isNaN)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
77	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  &&  isNaN)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  &&  isNaN)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite()  &&  isNaN)  {	  if(!isInfinite    &&    divisor.isInfinite()    &&    isNaN)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
78	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.isInfinite()  &&  isNaN)  {	  if(!isInfinite    &&    divisor.isInfinite()    &&    isNaN)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
79	[BUG]  [BUGGY]  Context.checkState(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isInfinite  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(isNaN    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
80	[BUG]  [BUGGY]  Context.checkState(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(isNaN    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(real);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(real);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(real);	  NeighborDivisor    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
82	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  imaginary);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  imaginary);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  imaginary);	  NeighborDivisor    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
83	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  real);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  real);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  real);	  NeighborDivisor    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
84	[BUG]  [BUGGY]  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
85	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
86	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isReal())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
87	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
88	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.isInfinite())  {  return  NaN;  }	  if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
89	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
90	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isReal()  &&  divisor.isInfinite())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
91	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
92	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
93	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
94	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
95	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
96	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
97	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
98	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
99	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
100	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor  ==  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
101	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor!=  null  &&  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
102	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor!=  null  &&  divisor.isNaN());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	56	None	replace
103	[BUG]  [BUGGY]  if  (divisor.isInfinite()  ||  isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isInfinite()  ||  isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isInfinite()  ||  isNaN())  {	  if    (divisor.isInfinite()    ||!isNaN())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
104	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	17	None	replace
105	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  isNaN);	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	17	None	replace
106	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getReal());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getReal());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.isInfinite(),  divisor.getReal());	  Context.checkInfinite(divisor.isInfinite(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	36	None	replace
107	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isReal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.isReal(),  divisor.getImaginary());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.isReal(),  divisor.getImaginary());	  Context.checkInfinite(divisor.isInfinite(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	36	None	replace
108	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.getImaginary());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.isNaN(),  divisor.getImaginary());	  Context.checkInfinite(divisor.isInfinite(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	36	None	replace
109	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
110	[BUG]  [BUGGY]  nisipisInfinite();  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite();  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite();  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipisInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
111	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipisInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
112	[BUG]  [BUGGY]  nisipisInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipisInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
113	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
114	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
115	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
116	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
117	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
118	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  1.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
119	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  1.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
120	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
121	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
122	[BUG]  [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
123	[BUG]  [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getInfinite()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
124	[BUG]  [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getInfinite()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getInfinite()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
125	[BUG]  [BUGGY]  Constructor  <  Infinite>  isInfinite  =  divisor.getInfinite();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Constructor  <  Infinite>  isInfinite  =  divisor.getInfinite();  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Constructor  <  Infinite>  isInfinite  =  divisor.getInfinite();	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
126	[BUG]  [BUGGY]  if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(Divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
127	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	75	None	replace
128	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	75	None	replace
129	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite  &&  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  isInfinite  &&  divisor.isInfinite())  {	  if(isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
130	[BUG]  [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  &&  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  &&  divisor.isInfinite())  {	  if(isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
131	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.isNaN())  {	  if(isInfinite    &&    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
132	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.isNaN())  {  return  NaN;  }	  ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
133	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.isNaN())  {  return  ZERO;  }	  ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
134	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal());	  if(divisor    ==    null)    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	92	None	replace
135	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	58	None	replace
136	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.divisor.clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.divisor.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)super.divisor.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	58	None	replace
137	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	58	None	replace
138	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	74	None	replace
139	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	74	None	replace
140	[BUG]  [BUGGY]  nisipisNaN())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisNaN())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisNaN())  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
141	[BUG]  [BUGGY]  RealMath.abs(divisor)/  divisor.getINF();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(divisor)/  divisor.getINF();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(divisor)/  divisor.getINF();	  RealMath.abs(real)/    divisor.getINF();    	non-compiled	[CE]  not  a  statement	49	None	replace
142	[BUG]  [BUGGY]  RealMath.abs(real)/  divisor.getInF();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(real)/  divisor.getInF();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(real)/  divisor.getInF();	  RealMath.abs(real)/    divisor.getINF();    	non-compiled	[CE]  not  a  statement	49	None	replace
143	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
144	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
145	[BUG]  [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
146	[BUG]  [BUGGY]  RealMath.abs(divisor)/  divisor.getDenominator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(divisor)/  divisor.getDenominator();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(divisor)/  divisor.getDenominator();	  RealMath.abs(divisor)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	47	None	replace
147	[BUG]  [BUGGY]  parent  ==  null  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	parent  ==  null  &&!isInfinite())  {  return  ZERO;  }	  parent    ==    null    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
148	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
149	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
150	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  }	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
151	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getRal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
152	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
153	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  {  if(!isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  if(!isNaN())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
154	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  isInfinite()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  ||  isInfinite()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  isInfinite()  ||  divisor.isNaN())  {	  if    (divisor.isReal()    ||    isInfinite())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
155	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
156	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	73	None	replace
157	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	73	None	replace
158	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  real);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  real);	  Context.checkInfinite(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	57	None	replace
159	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  denominator);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  denominator);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  denominator);	  Context.checkInfinite(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	57	None	replace
160	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getDenominator());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getDenominator());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getDenominator());	  Context.checkInfinite(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	57	None	replace
161	[BUG]  [BUGGY]  if  (divisor.isReal()  &&  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  &&  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  &&  divisor.isInfinite())  {	  if    (divisor.isInfinite()    &&    divisor.isReal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
162	[BUG]  [BUGGY]  if  (!divisor.isInfinite()  &&  divisor.isReal())  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (!divisor.isInfinite()  &&  divisor.isReal())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (!divisor.isInfinite()  &&  divisor.isReal())  {	  if    (divisor.isInfinite()    &&    divisor.isReal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
163	[BUG]  [BUGGY]  nisipisInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  nisipisInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
164	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }	  nisipisInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
165	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isDenominator())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.isDenominator())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.isDenominator())  {  return  ZERO;  }	  nisipisInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
166	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  not  a  statement	59	None	replace
167	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  not  a  statement	59	None	replace
168	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
169	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
170	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
171	[BUG]  [BUGGY]  MiscUtilities.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MiscUtilities.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MiscUtilities.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
172	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isNaN())  {	  if(!isInfinite    &&    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
173	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isNaN())  {	  if(!isInfinite    &&    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
174	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
175	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite());  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite());  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
176	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
177	[BUG]  [BUGGY]  nisipisNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisNaN())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	99	None	replace
178	[BUG]  [BUGGY]  if  (divisor.isReal()  ||!isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  ||!isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||!isNaN())  {	  if    (divisor.isReal()    ||!isInfinite())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
179	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.clone();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)super.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	58	None	replace
180	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)getDivisors().clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)getDivisors().clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDivisor  divisor  =(MutableDivisor)getDivisors().clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	58	None	replace
181	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
182	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	75	None	replace
183	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
184	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
185	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(!isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
186	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  not  a  statement	53	None	replace
187	[BUG]  [BUGGY]  if(isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  divisor.isInfinite()  ||  isNaN)  {	  if(!isInfinite    &&    divisor.isInfinite()    &&    isNaN)    {    	non-compiled	[CE]  not  a  statement	44	None	replace
188	[BUG]  [BUGGY]  Context.checkState(isNaN  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isNaN  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isNaN  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(isNaN    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
189	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
190	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
191	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
192	[BUG]  [BUGGY]  if(divisor!=  null  ||!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  ||!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null  ||!isInfinite  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	97	None	replace
193	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  imaginary)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite()  ||  imaginary)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite()  ||  imaginary)  {	  if(isInfinite    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
194	[BUG]  [BUGGY]  if  (divisor.isInfinite()  &&!isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isInfinite()  &&!isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isInfinite()  &&!isNaN())  {	  if    (divisor.isInfinite()    ||!isNaN())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
195	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isInfinite())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
196	[BUG]  [BUGGY]  if  (divisor.isReal()  ||  isNaN  ||  isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isReal()  ||  isNaN  ||  isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isReal()  ||  isNaN  ||  isInfinite())  {	  if    (divisor.isReal()    ||    isInfinite())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
197	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	46	None	replace
198	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
199	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.isNaN())  {  return  NaN;  }	  nisipisInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
200	[BUG]  [BUGGY]  Context.checkNotNull(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkNotNull(real);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkNotNull(real);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	37	None	replace
201	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
202	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
203	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
204	[BUG]  [BUGGY]  if(Divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(Divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isNaN()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(Divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
205	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getNaN())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getNaN())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getNaN())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
206	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  if(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	25	None	replace
207	[BUG]  [BUGGY]  if(isInfinite)  {  if(!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(!isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
208	[BUG]  [BUGGY]  if(isInfinite)  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
209	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
210	[BUG]  [BUGGY]  if(Divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(Divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(Divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	96	None	replace
211	[BUG]  [BUGGY]  if  (divisor.isNaN()  &&  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if  (divisor.isNaN()  &&  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if  (divisor.isNaN()  &&  divisor.isInfinite())  {	  if    (divisor.isInfinite()    &&    divisor.isReal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
212	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
213	[BUG]  [BUGGY]  Parent  ==  null  ||!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Parent  ==  null  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Parent  ==  null  ||!isInfinite())  {  return  NaN;  }	  parent    ==    null    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	93	None	replace
214	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
215	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
216	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
217	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
218	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(imaginary);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(imaginary);	  NeighborDivisor    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  not  a  statement	76	None	replace
219	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary())  {  if(!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getImaginary())  {  if(!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getImaginary())  {  if(!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
220	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(di    	non-compiled	[CE]  not  a  statement	31	None	replace
221	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN()  ||  imaginary)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN()  ||  imaginary)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN()  ||  imaginary)  {	  if(divisor.isInfinite()    ||    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	55	None	replace
222	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getImaginary(),  imaginary);	  Context.checkInfinite(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	57	None	replace
223	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN());	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	17	None	replace
224	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)super.clone();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)super.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	74	None	replace
225	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isNaN())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isNaN  &&  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isNaN  &&  divisor.isNaN())  {	  if(!isNaN    &&    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
226	[BUG]  [BUGGY]  nisipisInfinite();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite();	  nisipisInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
227	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite()  &&  divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipisInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
228	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
229	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
230	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	||  divisor.isInfinite())  {  return  ONE;  }	  ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
231	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
232	[BUG]  [BUGGY]  RealMath.abs(real)/  divisor.getNaN();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(real)/  divisor.getNaN();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(real)/  divisor.getNaN();	  RealMath.abs(real)/    divisor.getINF();    	non-compiled	[CE]  not  a  statement	49	None	replace
233	[BUG]  [BUGGY]  if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(Divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(Divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
234	[BUG]  [BUGGY]  if(isInfinite  &&  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
235	[BUG]  [BUGGY]  Context.checkState(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isInfinite  ||  isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isNaN)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
236	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor();	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
237	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary())  {	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
238	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  real)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  real)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isNaN()  ||  real)  {	  if(!isInfinite    &&    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
239	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  if(divisor.isInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
240	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	81	None	replace
241	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
242	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
243	[BUG]  [BUGGY]  if(isInfinite  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  &&  isInfinite)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite    ||    isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	79	None	replace
244	[BUG]  [BUGGY]  MutableDenominator  divisor  =  divisor.getInfiniteDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =  divisor.getInfiniteDenominator();  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =  divisor.getInfiniteDenominator();	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
245	[BUG]  [BUGGY]  Context.checkState(isInfinite);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(isInfinite);  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(isInfinite);	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
246	[BUG]  [BUGGY]  MutableDenominator  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =  divisor.getDenominator();  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =  divisor.getDenominator();	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
247	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
248	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
249	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
250	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
251	[BUG]  [BUGGY]  if(divisor  ==  null  ||  isInfinite  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null  ||  isInfinite  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null  ||  isInfinite  ||  divisor.isInfinite())  {	  if(isInfinite    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
252	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	73	None	replace
253	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	73	None	replace
254	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.clone();	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    1.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
255	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isImaginary())  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
256	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isImaginary())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
257	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.isImaginary())  {  return  NaN;  }	  if(divisor.isReal()    &&    divisor.isImaginary())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
258	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  if(!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
259	[BUG]  [BUGGY]  if(isInfinite)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(!isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
260	[BUG]  [BUGGY]  if(!isInfinite  ||  divisor.isNaN())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  ||  divisor.isNaN())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  ||  divisor.isNaN())  {	  if(!isInfinite    &&    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
261	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(isNaN    ||    divisor.isNaN())    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
262	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor!=  null  ||  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	56	None	replace
263	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
264	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
265	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
266	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  ZERO;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
267	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isReal())  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isReal())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isInfinite()  &&  divisor.isReal())  {	  if    (divisor.isInfinite()    &&    divisor.isReal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
268	[BUG]  [BUGGY]  nisipisInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  nisipisInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	nisipisInfinite())  {  return  NaN;  }	  nisipisInfinite()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
269	[BUG]  [BUGGY]  RealMath.abs(real)/  divisor.getInf();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  RealMath.abs(real)/  divisor.getInf();  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	RealMath.abs(real)/  divisor.getInf();	  RealMath.abs(real)/    divisor.getINF();    	non-compiled	[CE]  not  a  statement	49	None	replace
270	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
271	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
272	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isInfinite()    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
273	[BUG]  [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getReal());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.getReal(),  divisor.getReal());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.getReal(),  divisor.getReal());	  Context.checkInfinite(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	57	None	replace
274	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  not  a  statement	7	None	replace
275	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
276	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
277	[BUG]  [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	final  divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;	  final    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
278	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NegativeMath.abs(divisor.getReal())  <  =!isInfinite())  {  return  NaN;  }	  NegativeMath.abs(divisor.getReal())    {    if(!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
279	[BUG]  [BUGGY]  if(isNaN  ||  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isNaN    &&    divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
280	[BUG]  [BUGGY]  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.isNaN()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
281	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.getImaginary()  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.getImaginary()  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.getImaginary()	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
282	[BUG]  [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary(),  divisor.	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary()    	non-compiled	[CE]  not  a  statement	30	None	replace
283	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
284	[BUG]  [BUGGY]  if(isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
285	[BUG]  [BUGGY]  if(isNaN)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN)  {  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
286	[BUG]  [BUGGY]  Math.abs(divisor.getReal()  -  1)*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Math.abs(divisor.getReal()  -  1)*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Math.abs(divisor.getReal()  -  1)*  Math.abs(divisor.getImaginary())*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.getImaginary()  -  1)*  Math.abs(divisor.	  Math.abs(divisor.getReal())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())*    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	29	None	replace
287	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	81	None	replace
288	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor  ==  null)  {  if(!isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(!isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
289	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isNaN  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
290	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getINF());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.getINF());  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkInfinite(divisor.isInfinite(),  divisor.getINF());	  Context.checkInfinite(divisor.isInfinite(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	36	None	replace
291	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getINF()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getINF()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getINF()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
292	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
293	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  ZERO);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  ZERO);  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	NeighborDivisor  divisor  =  getNeighborDivisor(divisor,  ZERO);	  NeighborDivisor    divisor    =    getNeighborDivisor(divisor);    	non-compiled	[CE]  not  a  statement	76	None	replace
294	[BUG]  [BUGGY]  if(!isNaN  &&  divisor.isInfinite()  ||  isInfinite)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isNaN  &&  divisor.isInfinite()  ||  isInfinite)  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isNaN  &&  divisor.isInfinite()  ||  isInfinite)  {	  if(!isNaN    &&    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
295	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;	  Context.checkState(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
296	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(isInfinite)  {  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
297	[BUG]  [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  &&  divisor.isNaN()  ||  divisor.isInfinite())  {	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	46	None	replace
298	[BUG]  [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||!isInfinite())  {  return  ONE;  }  [BUGGY]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	parent  ==  null  ||!isInfinite())  {  return  ONE;  }	  parent    ==    null    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
299	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isUndefined())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isUndefined())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isUndefined())  {	  if(divisor.isInfinite()    ||    divisor.isNaN())    {    	non-compiled	[CE]  not  a  statement	55	None	replace
300	[BUG]  [BUGGY]  if(!isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }      [BUGGY]  if(!isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  [BUGGY]      return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	260	260	2	replace	if(!isInfinite  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {	  if(!isInfinite    &&    divisor.isInfinite()    ||    divisor.isInfinite())    {    	non-compiled	[CE]  not  a  statement	97	None	replace
