bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  d  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  divisor.getDenominator()  +  1;	  double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	30	None	replace
2	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  Math.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  Math.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  Math.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    Math.abs(d))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
3	[BUG]  [BUGGY]  double  real  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getDenominator();	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	18	None	replace
4	[BUG]  [BUGGY]  double  real  =  divisor.getReal()  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getReal()  -  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getReal()  -  1;	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	18	None	replace
5	[BUG]  [BUGGY]  if  (d  <  =  FastMath.abs(c)||  c  >  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (d  <  =  FastMath.abs(c)||  c  >  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (d  <  =  FastMath.abs(c)||  c  >  FastMath.abs(d))  {	  if    (c    <    =    FastMath.abs(d)||    c    >    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
6	[BUG]  [BUGGY]  if  (c  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (c  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (c  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {	  if    (c    <    =    FastMath.abs(d)||    c    >    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
7	[BUG]  [BUGGY]  final  double  c  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getDenominator();	  double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	11	None	replace
8	[BUG]  [BUGGY]  double  c  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getDenominator()  +  1;	  double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	11	None	replace
9	[BUG]  [BUGGY]  final  double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getINF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getINF();	  final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
10	[BUG]  [BUGGY]  final  double  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getRaw();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getRaw();	  final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
11	[BUG]  [BUGGY]  Double  c  =  divisor.getDouble();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getDouble();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getDouble();	  Double    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	33	None	replace
12	[BUG]  [BUGGY]  final  double  d  =  divisor.getReal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getReal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getReal();	  final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  final  double  d  =  divisor.getINF();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getINF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getINF();	  final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	1	None	replace
14	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  isNaN  ||  isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  isNaN  ||  isNaN)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  isNaN  ||  isNaN)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    isNaN    ||    isNaN)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
15	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  FastMath.abs(d)||  isNaN  ||  isNaN)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  FastMath.abs(d)||  isNaN  ||  isNaN)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  FastMath.abs(d)||  isNaN  ||  isNaN)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    isNaN    ||    isNaN)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
16	[BUG]  [BUGGY]  Double  c  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getDenominator()  +  1;	  Double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	7	None	replace
17	[BUG]  [BUGGY]  Double  c  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getDivisor();	  Double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	7	None	replace
18	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)/  2)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)/  2)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)/  2)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)/    2)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
19	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  2.0)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  2.0)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  2.0)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)/    2)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
20	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  FastMath.abs(d)/  2)  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  FastMath.abs(d)/  2)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  FastMath.abs(d)/  2)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)/    2)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
21	[BUG]  [BUGGY]  Complex  c  =  divisor.getComplexer();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getComplexer();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getComplexer();	  Complex    c    =    divisor.getCreator();    	non-compiled	[CE]  not  a  statement	24	None	replace
22	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite());	  if(divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	12	None	replace
23	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  final  double  d  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor.isInfinite());  final  double  d  =  divisor.getImaginary();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite());  final  double  d  =  divisor.getImaginary();	  if(divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	12	None	replace
24	[BUG]  [BUGGY]  double  c  =  d  /  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  /  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  /  d;	  double    c    =    d    /    c;    	non-compiled	[CE]  not  a  statement	46	None	replace
25	[BUG]  [BUGGY]  double  c  =  d  /  c  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  /  c  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  /  c  +  1;	  double    c    =    d    /    c;    	non-compiled	[CE]  not  a  statement	46	None	replace
26	[BUG]  [BUGGY]  double  c  =  d  *  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  *  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  *  c;	  double    c    =    d    /    c;    	non-compiled	[CE]  not  a  statement	46	None	replace
27	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getDenominator()  +  1;	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	14	None	replace
28	[BUG]  [BUGGY]  final  double  d  =  divisor.getDestinator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getDestinator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getDestinator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	14	None	replace
29	[BUG]  [BUGGY]  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getInf();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getInf();	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	27	None	replace
30	[BUG]  [BUGGY]  double  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getInF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getInF();	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	27	None	replace
31	[BUG]  [BUGGY]  Double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getINF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getINF();	  Double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
32	[BUG]  [BUGGY]  if  (d!=  FastMath.abs(c))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (d!=  FastMath.abs(c))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (d!=  FastMath.abs(c))  {	  if    (c!=    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
33	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    c    <    =    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    c    <    =    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
35	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >=  FastMath.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    c    <    =    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
36	[BUG]  [BUGGY]  c  =  divisor.getCurrentDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getCurrentDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getCurrentDenominator();	  c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	40	None	replace
37	[BUG]  [BUGGY]  c  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getDenominator()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getDenominator()  +  1;	  c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	40	None	replace
38	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getCurrentReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  Complex  c  =  divisor.getCurrentReal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  c  =  divisor.getCurrentReal();	  Complex    c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	23	None	replace
39	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentDivisor();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCurrentDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentDivisor();	  Complex    c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	23	None	replace
40	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCurrentDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentDenominator();	  Complex    c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	23	None	replace
41	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getRal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  Complex  c  =  divisor.getRal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  c  =  divisor.getRal();	  Complex    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	50	None	replace
42	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentRal();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCurrentRal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentRal();	  Complex    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	50	None	replace
43	[BUG]  [BUGGY]  final  double  c  =  divisor.getCurrentReal();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getCurrentReal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getCurrentReal();	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  c  =  divisor.getCurrentReal()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getCurrentReal()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getCurrentReal()  +  1;	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	10	None	replace
45	[BUG]  [BUGGY]  c  =  divisor.getCurrentDivisor();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getCurrentDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getCurrentDivisor();	  c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	10	None	replace
46	[BUG]  [BUGGY]  c  =  divisor.getRaw()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getRaw()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getRaw()  +  1;	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	37	None	replace
47	[BUG]  [BUGGY]  c  =  divisor.getCurrentRaw();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getCurrentRaw();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getCurrentRaw();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	37	None	replace
48	[BUG]  [BUGGY]  if  (d  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (d  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (d  <  =  FastMath.abs(c)||  c  <  =  FastMath.abs(d))  {	  if    (d    <    =    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	25	None	replace
49	[BUG]  [BUGGY]  double  real  =  d  /  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  d  /  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  d  /  c;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	36	None	replace
50	[BUG]  [BUGGY]  double  real  =  c  /  d  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  c  /  d  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  c  /  d  +  1;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	36	None	replace
51	[BUG]  [BUGGY]  double  real  =  c  *  d;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  c  *  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  c  *  d;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	36	None	replace
52	[BUG]  [BUGGY]  double  real  =  divisor.getInF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getInF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getInF();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
53	[BUG]  [BUGGY]  double  real  =  divisor.getInf();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getInf();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getInf();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
54	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentComplex();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	49	None	replace
55	[BUG]  [BUGGY]  Complex  c  =  divisor.getCamera();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCamera();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCamera();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	49	None	replace
56	[BUG]  [BUGGY]  if  (d  ==  FastMath.abs(c))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (d  ==  FastMath.abs(c))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (d  ==  FastMath.abs(c))  {	  if    (c    ==    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	34	None	replace
57	[BUG]  [BUGGY]  final  double  c  =  divisor.getRal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getRal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getRal();	  double    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	45	None	replace
58	[BUG]  [BUGGY]  c  =  divisor.getRal()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getRal()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getRal()  +  1;	  c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	41	None	replace
59	[BUG]  [BUGGY]  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getInf();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getInf();	  c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	17	None	replace
60	[BUG]  [BUGGY]  c  =  divisor.getInF();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getInF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getInF();	  c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	17	None	replace
61	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null);	  if(divisor!=    null)    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	39	None	replace
62	[BUG]  [BUGGY]  if(d  <  =  FastMath.abs(c)||  d  >  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(d  <  =  FastMath.abs(c)||  d  >  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(d  <  =  FastMath.abs(c)||  d  >  FastMath.abs(d))  {	  if(d    <    =    FastMath.abs(c)||    d    >    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
63	[BUG]  [BUGGY]  if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(c))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(c))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(c))  {	  if(d    <    =    FastMath.abs(c)||    d    >    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
64	[BUG]  [BUGGY]  if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c  <  =  FastMath.abs(d)||  d  >  FastMath.abs(d))  {	  if(d    <    =    FastMath.abs(c)||    d    >    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
65	[BUG]  [BUGGY]  double  c  =  divisor.getReal()  -  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getReal()  -  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getReal()  -  c;	  double    c    =    d    -    c;    	non-compiled	[CE]  not  a  statement	48	None	replace
66	[BUG]  [BUGGY]  double  c  =  c  -  d;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  c  -  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  c  -  d;	  double    c    =    d    -    c;    	non-compiled	[CE]  not  a  statement	48	None	replace
67	[BUG]  [BUGGY]  double  real  =  divisor.getINF()  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getINF()  -  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getINF()  -  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
68	[BUG]  [BUGGY]  double  real  =  divisor.getRal()  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getRal()  -  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getRal()  -  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
69	[BUG]  [BUGGY]  Double  d  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  d  =  divisor.getDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  d  =  divisor.getDivisor();	  double    d    =    divisor.getDivisor()    +    1;    	non-compiled	[CE]  not  a  statement	29	None	replace
70	[BUG]  [BUGGY]  Double  c  =  divisor.getRaw()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getRaw()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getRaw()  +  1;	  Double    c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	9	None	replace
71	[BUG]  [BUGGY]  Double  c  =  divisor.getColumn();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getColumn();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getColumn();	  Double    c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	9	None	replace
72	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(d))  {	  if    (FastMath.abs(d)    <    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	31	None	replace
73	[BUG]  [BUGGY]  Complex  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getINF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getINF();	  Complex    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	22	None	replace
74	[BUG]  [BUGGY]  Complex  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getRaw();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getRaw();	  Complex    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	22	None	replace
75	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	13	None	replace
76	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	13	None	replace
77	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	13	None	replace
78	[BUG]  [BUGGY]  final  double  d  =  Divisor.getDivisor();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  Divisor.getDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  Divisor.getDivisor();	  final    double    d    =    divisor.getDivisor()    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
79	[BUG]  [BUGGY]  double  d  =  divisor.getInf();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  divisor.getInf();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  divisor.getInf();	  double    d    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	32	None	replace
80	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getImaginary()  +  1;	  double    d    =    divisor.getImaginary()    +    1;    	non-compiled	[CE]  not  a  statement	28	None	replace
81	[BUG]  [BUGGY]  Double  d  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  d  =  divisor.getImaginary();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  d  =  divisor.getImaginary();	  double    d    =    divisor.getImaginary()    +    1;    	non-compiled	[CE]  not  a  statement	28	None	replace
82	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  c)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  c)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  c)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    c)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
83	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)*  d)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)*  d)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)*  d)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    c)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
84	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  c)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  c)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  c)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    c)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
85	[BUG]  [BUGGY]  if(c.abs(d)  <  =  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c.abs(d)  <  =  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c.abs(d)  <  =  FastMath.abs(d))  {	  if    (FastMath.abs(d)    <    =    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
86	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  Character.isDigit(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  Character.isDigit(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)||  Character.isDigit(d))  {	  if    (FastMath.abs(d)    <    =    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
87	[BUG]  [BUGGY]  double  d  =  divisor.getINF()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  divisor.getINF()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  divisor.getINF()  +  1;	  double    d    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	32	None	replace
88	[BUG]  [BUGGY]  Complex  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getNaN();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getNaN();	  Complex    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	22	None	replace
89	[BUG]  [BUGGY]  Double  c  =  divisor.getCurrentDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getCurrentDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getCurrentDenominator();	  Double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	7	None	replace
90	[BUG]  [BUGGY]  Double  c  =  divisor.getCreator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getCreator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getCreator();	  Double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	7	None	replace
91	[BUG]  [BUGGY]  Double  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getNaN();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getNaN();	  Double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
92	[BUG]  [BUGGY]  if  (c  ==  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (c  ==  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (c  ==  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {	  if    (c    ==    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	34	None	replace
93	[BUG]  [BUGGY]  c  =  divisor.getINF()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getINF()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getINF()  +  1;	  c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	17	None	replace
94	[BUG]  [BUGGY]  Complex  c  =  divisor.getColumn();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getColumn();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getColumn();	  Complex    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	50	None	replace
95	[BUG]  [BUGGY]  double  c  =  d  /  d  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  /  d  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  /  d  +  1;	  double    c    =    d    /    c;    	non-compiled	[CE]  not  a  statement	46	None	replace
96	[BUG]  [BUGGY]  double  c  =  d  /  d.doubleValue();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  /  d.doubleValue();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  /  d.doubleValue();	  double    c    =    d    /    c;    	non-compiled	[CE]  not  a  statement	46	None	replace
97	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentReal()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCurrentReal()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentReal()  +  1;	  Complex    c    =    divisor.getCurrentReal();    	non-compiled	[CE]  not  a  statement	23	None	replace
98	[BUG]  [BUGGY]  Context.checkState(divisor!=  null)  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor!=  null)  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null)  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor!=    null)    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	39	None	replace
99	[BUG]  [BUGGY]  Context.checkState(divisor!=  null)  {  divisor  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Context.checkState(divisor!=  null)  {  divisor  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null)  {  divisor  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor!=    null)    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	39	None	replace
100	[BUG]  [BUGGY]  c  =  divisor.getColumn();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getColumn();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getColumn();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	37	None	replace
101	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isInfinite  ||  isNaN)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isInfinite  ||  isNaN)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isInfinite  ||  isNaN)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    isNaN    ||    isNaN)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
102	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  divisor.isInfinite())  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  divisor.isInfinite())  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  divisor.isInfinite())  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    isNaN    ||    isNaN)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
103	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  Math.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  Math.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)/  Math.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    Math.abs(d))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
104	[BUG]  [BUGGY]  final  double  d  =  divisor.getDeivisor();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getDeivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getDeivisor();	  final    double    d    =    divisor.getDivisor()    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
105	[BUG]  [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getINFDenominator();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getINFDenominator();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	14	None	replace
106	[BUG]  [BUGGY]  if  (f.abs(d)  <  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (f.abs(d)  <  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (f.abs(d)  <  FastMath.abs(d))  {	  if    (FastMath.abs(d)    <    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	31	None	replace
107	[BUG]  [BUGGY]  Double  c  =  divisor.getRal()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  divisor.getRal()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  divisor.getRal()  +  1;	  Double    c    =    divisor.getRal();    	non-compiled	[CE]  not  a  statement	33	None	replace
108	[BUG]  [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  d)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  d)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(d)  <  =  FastMath.abs(c)*  d)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)*    c)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
109	[BUG]  [BUGGY]  double  c  =  divisor.getINF()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getINF()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getINF()  +  1;	  double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	27	None	replace
110	[BUG]  [BUGGY]  Complex  c  =  divisor.getCriteria();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCriteria();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCriteria();	  Complex    c    =    divisor.getCreator();    	non-compiled	[CE]  not  a  statement	24	None	replace
111	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  *  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getImaginary()  *  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getImaginary()  *  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
112	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getImaginary()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getImaginary()  +  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
113	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  c  >  FastMath.abs(d))  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    c    <    =    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
114	[BUG]  [BUGGY]  final  double  d  =  divisor.getInfinite()  +  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getInfinite()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getInfinite()  +  1;	  final    double    d    =    divisor.getInfinite();    	non-compiled	[CE]  not  a  statement	16	None	replace
115	[BUG]  [BUGGY]  double  c  =  d  -  d;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  d  -  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  d  -  d;	  double    c    =    d    -    c;    	non-compiled	[CE]  not  a  statement	48	None	replace
116	[BUG]  [BUGGY]  double  c  =  divisor  -  c;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor  -  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor  -  c;	  double    c    =    d    -    c;    	non-compiled	[CE]  not  a  statement	48	None	replace
117	[BUG]  [BUGGY]  double  real  =  divisor.getReal()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getReal()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getReal()  +  1;	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	18	None	replace
118	[BUG]  [BUGGY]  if(d  <  =  FastMath.abs(c)||  d  >=  FastMath.abs(c))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(d  <  =  FastMath.abs(c)||  d  >=  FastMath.abs(c))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(d  <  =  FastMath.abs(c)||  d  >=  FastMath.abs(c))  {	  if(d    <    =    FastMath.abs(c)||    d    >    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
119	[BUG]  [BUGGY]  if  (c!=  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (c!=  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (c!=  FastMath.abs(d)||  c  ==  FastMath.abs(d))  {	  if    (c!=    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
120	[BUG]  [BUGGY]  if(c!=  FastMath.abs(d)||  c!=  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c!=  FastMath.abs(d)||  c!=  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c!=  FastMath.abs(d)||  c!=  FastMath.abs(d))  {	  if    (c!=    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
121	[BUG]  [BUGGY]  double  real  =  divisor.getInFraction();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getInFraction();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getInFraction();	  double    real    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	20	None	replace
122	[BUG]  [BUGGY]  final  double  c  =  divisor.getImaginary()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getImaginary()  +  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getImaginary()  +  1;	  final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
123	[BUG]  [BUGGY]  final  double  d  =  desivisor.getDivisor();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  desivisor.getDivisor();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  desivisor.getDivisor();	  final    double    d    =    divisor.getDivisor()    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
124	[BUG]  [BUGGY]  Complex  c  =  divisor.getCase();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Complex  c  =  divisor.getCase();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCase();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	49	None	replace
125	[BUG]  [BUGGY]  if(d  <  =  FastMath.abs(c)&&  d  <  =  FastMath.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(d  <  =  FastMath.abs(c)&&  d  <  =  FastMath.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(d  <  =  FastMath.abs(c)&&  d  <  =  FastMath.abs(d))  {	  if    (d    <    =    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	25	None	replace
126	[BUG]  [BUGGY]  double  real  =  divisor.getRal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getRal();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getRal();	  double    real    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	18	None	replace
127	[BUG]  [BUGGY]  if(d  <  =  FastMath.abs(c)&&  d  >  FastMath.abs(c))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(d  <  =  FastMath.abs(c)&&  d  >  FastMath.abs(c))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(d  <  =  FastMath.abs(c)&&  d  >  FastMath.abs(c))  {	  if(d    <    =    FastMath.abs(c)||    d    >    FastMath.abs(c))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
128	[BUG]  [BUGGY]  double  d  =  divisor.getDivisor()  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  divisor.getDivisor()  *  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  divisor.getDivisor()  *  1;	  double    d    =    divisor.getDivisor()    +    1;    	non-compiled	[CE]  not  a  statement	29	None	replace
129	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  if(divisor.isInfinite())    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	12	None	replace
130	[BUG]  [BUGGY]  final  double  c  =  divisor.getExpr();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  c  =  divisor.getExpr();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getExpr();	  final    double    c    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	2	None	replace
131	[BUG]  [BUGGY]  if(divisor!=  null)  {  c  =  divisor.getImaginary();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(divisor!=  null)  {  c  =  divisor.getImaginary();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  c  =  divisor.getImaginary();  final  double  d  =  divisor.getImaginary();  }	  if(divisor!=    null)    {    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    }    	non-compiled	[CE]  not  a  statement	39	None	replace
132	[BUG]  [BUGGY]  double  d  =  divisor.getInF();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  divisor.getInF();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  divisor.getInF();	  double    d    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	32	None	replace
133	[BUG]  [BUGGY]  Double  c  =  d  /  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  Double  c  =  d  /  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Double  c  =  d  /  c;	  double    c    =    d    -    c;    	non-compiled	[CE]  not  a  statement	48	None	replace
134	[BUG]  [BUGGY]  c  =  divisor.getRaw2();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  c  =  divisor.getRaw2();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	c  =  divisor.getRaw2();	  c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	37	None	replace
135	[BUG]  [BUGGY]  double  d  =  c  /  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  d  =  c  /  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  d  =  c  /  d;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	36	None	replace
136	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  /  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  real  =  divisor.getImaginary()  /  1;  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  real  =  divisor.getImaginary()  /  1;	  double    real    =    divisor.getImaginary()    -    1;    	non-compiled	[CE]  not  a  statement	19	None	replace
137	[BUG]  [BUGGY]  if(c  ==  FastMath.abs(d)||  c  ==  Math.abs(d))  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c  ==  FastMath.abs(d)||  c  ==  Math.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c  ==  FastMath.abs(d)||  c  ==  Math.abs(d))  {	  if    (c    ==    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	34	None	replace
138	[BUG]  [BUGGY]  if(c  ==  FastMath.abs(d)  <  =  Math.abs(d))  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if(c  ==  FastMath.abs(d)  <  =  Math.abs(d))  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(c  ==  FastMath.abs(d)  <  =  Math.abs(d))  {	  if    (c    ==    FastMath.abs(d))    {    	non-compiled	[CE]  not  a  statement	34	None	replace
139	[BUG]  [BUGGY]  double  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  divisor.getRaw();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  divisor.getRaw();	  Double    c    =    divisor.getRaw();    	non-compiled	[CE]  not  a  statement	9	None	replace
140	[BUG]  [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  c  >  1)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  c  >  1)  {  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if  (FastMath.abs(c)  <  =  FastMath.abs(d)||  isNaN  ||  c  >  1)  {	  if    (FastMath.abs(c)    <    =    FastMath.abs(d)||    isNaN    ||    isNaN)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
141	[BUG]  [BUGGY]  double  c  =  desivisor.getReal();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  double  c  =  desivisor.getReal();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	double  c  =  desivisor.getReal();	  double    c    =    d.getReal();    	non-compiled	[CE]  not  a  statement	47	None	replace
142	[BUG]  [BUGGY]  final  double  d  =  divisor.getDigits();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();      [BUGGY]  final  double  d  =  divisor.getDigits();  [BUGGY]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  d  =  divisor.getDigits();	  final    double    d    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	14	None	replace
