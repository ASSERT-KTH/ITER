bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    MathUtils.checkNotNull(divisor);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    MathUtils.checkNotNull(divisor);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    MathUtils.checkNotNull(divisor);		non-compiled	[CE]  not  a  statement	10	None	add
2	[BUG]  [BUGGY]    MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator());  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator());  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator());		non-compiled	[CE]  not  a  statement	10	None	add
3	[BUG]  [BUGGY]    MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator());  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator());  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator());		non-compiled	[CE]  not  a  statement	10	None	add
4	[BUG]  [BUGGY]    MathUtils.checkState(divisor.getDenominator()  ==  denominator);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    MathUtils.checkState(divisor.getDenominator()  ==  denominator);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    MathUtils.checkState(divisor.getDenominator()  ==  denominator);		non-compiled	[CE]  not  a  statement	10	None	add
5	[BUG]  [BUGGY]    MathUtils.checkState(divisor.isNaN());  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    MathUtils.checkState(divisor.isNaN());  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    MathUtils.checkState(divisor.isNaN());		non-compiled	[CE]  not  a  statement	10	None	add
6	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]  MathUtils.checkDenominator(divisor);  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor);	MathUtils.checkNotNull(divisor);  	non-compiled	[CE]  not  a  statement	9	None	replace
7	[BUG]  [BUGGY]  MathUtils.checkNotNull(real);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]  MathUtils.checkNotNull(real);  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkNotNull(real);	MathUtils.checkNotNull(divisor);  	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]    Complex  divisor  =  getDenominator(real);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Complex  divisor  =  getDenominator(real);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Complex  divisor  =  getDenominator(real);		non-compiled	[CE]  not  a  statement	10	None	add
9	[BUG]  [BUGGY]    Real.checkNotNull(divisor);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Real.checkNotNull(divisor);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Real.checkNotNull(divisor);		non-compiled	[CE]  not  a  statement	10	None	add
10	[BUG]  [BUGGY]    Complex  divisor  =  getDivisor(real);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Complex  divisor  =  getDivisor(real);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Complex  divisor  =  getDivisor(real);		non-compiled	[CE]  not  a  statement	10	None	add
11	[BUG]  [BUGGY]    Complex  divisor  =  getDenominator();  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Complex  divisor  =  getDenominator();  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Complex  divisor  =  getDenominator();		non-compiled	[CE]  not  a  statement	10	None	add
12	[BUG]  [BUGGY]    Complex  divisor  =  getDivisor();  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Complex  divisor  =  getDivisor();  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Complex  divisor  =  getDivisor();		non-compiled	[CE]  not  a  statement	10	None	add
13	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN());	MathUtils.checkNotNull(divisor);  	non-compiled	[CE]  not  a  statement	9	None	replace
14	[BUG]  [BUGGY]  MathUtils.checkState(divisor!=  null);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]  MathUtils.checkState(divisor!=  null);  [BUGGY]  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor!=  null);	MathUtils.checkNotNull(divisor);  	non-compiled	[CE]  not  a  statement	9	None	replace
15	[BUG]  [BUGGY]    Divisor  divisor  =(Divisor)divisor.clone();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Divisor  divisor  =(Divisor)divisor.clone();  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Divisor  divisor  =(Divisor)divisor.clone();		non-compiled	[CE]  not  a  statement	10	None	add
16	[BUG]  [BUGGY]    Divisor  divisor  =  getDivisor(real);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    Divisor  divisor  =  getDivisor(real);  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    Divisor  divisor  =  getDivisor(real);		non-compiled	[CE]  not  a  statement	10	None	add
17	[BUG]  [BUGGY]    if(divisor!=  null)  {  divisor  =  new  Complex(real);  }  else  {  divisor.setImaginary(imaginary);  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  [BUGGY]    if(divisor!=  null)  {  divisor  =  new  Complex(real);  }  else  {  divisor.setImaginary(imaginary);  }  [BUGGY]  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	    if(divisor!=  null)  {  divisor  =  new  Complex(real);  }  else  {  divisor.setImaginary(imaginary);  }		non-compiled	[CE]  not  a  statement	10	None	add
