bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  real);	  MathUtils.checkState(divisor.getDenominator()    ==    real);    	non-compiled	[CE]  ';'  expected	53	None	replace
2	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real,  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    real);    	non-compiled	[CE]  ';'  expected	53	None	replace
3	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)denominator.clone();    	non-compiled	[CE]  ';'  expected	40	None	replace
4	[BUG]  [BUGGY]  MathUtils.checkDenominator(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(imaginary);	  MathUtils.checkDenominator(real);    	non-compiled	[CE]  ';'  expected	17	None	replace
5	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(denominator);	  MathUtils.checkDenominator(real);    	non-compiled	[CE]  ';'  expected	17	None	replace
6	[BUG]  [BUGGY]  MathUtils.checkDenominator(real,  divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(real,  divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(real,  divisor);	  MathUtils.checkDenominator(real);    	non-compiled	[CE]  ';'  expected	17	None	replace
7	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)this.super.clone();  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =(Divisor)this.super.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)this.super.clone();	  Divisor    divisor    =(Divisor)super.clone();    	non-compiled	[CE]  '('  expected	10	None	replace
11	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(divisor);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(divisor);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(Divisor.ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(Divisor.ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(Divisor.ZERO);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(Divisor.NaN);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(Divisor.NaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(Divisor.NaN);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	13	None	replace
14	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(divisor);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
15	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(imaginary,  denominator);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
16	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real  divisor  =  getDivisor(imaginary);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
17	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  denominator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  denominator);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	31	None	replace
18	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  c);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  c);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	31	None	replace
19	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(imaginary,  real);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	31	None	replace
20	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	63	None	replace
21	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	63	None	replace
22	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	63	None	replace
23	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  c);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  c);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	63	None	replace
24	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(imaginary);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	19	None	replace
25	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(real,  imaginary);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	19	None	replace
26	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(real,  denominator);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	19	None	replace
27	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getImaginary());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getImaginary());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getImaginary());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getName(),  divisor.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getName(),  divisor.getDenominator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getName(),  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDestinator());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDestinator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDestinator());	  MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  c,  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  c,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  c,  denominator);	  Complex    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  ';'  expected	33	None	replace
31	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(c,  real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(c,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(c,  real);	  Complex    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  ';'  expected	33	None	replace
32	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	2	None	replace
33	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  denominator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(imaginary,  denominator);	  Divisor    divisor    =    getDivisor(real,    denominator);    	non-compiled	[CE]  ';'  expected	35	None	replace
35	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  ONE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  ONE);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  ONE);	  Divisor    divisor    =    getDivisor(real,    denominator);    	non-compiled	[CE]  ';'  expected	35	None	replace
36	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real.getDenominator());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  real.getDenominator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  real.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    real.getDenominator());    	non-compiled	[CE]  ';'  expected	49	None	replace
37	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(divisor);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	44	None	replace
38	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(denominator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(denominator);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	44	None	replace
39	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  ONE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  ONE);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  ONE);	  Complex    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	52	None	replace
40	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  INF);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  INF);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  INF);	  Complex    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	52	None	replace
41	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  1);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  1);	  Complex    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	52	None	replace
42	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	29	None	replace
43	[BUG]  [BUGGY]  Real.checkArgument(divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor.isInfinite());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	29	None	replace
44	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	29	None	replace
45	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	55	None	replace
46	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0.0);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  0.0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  ';'  expected	55	None	replace
47	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getImaginary());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getImaginary());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getImaginary());	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	4	None	replace
48	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getName(),  divisor.getDenominator());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getName(),  divisor.getDenominator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getName(),  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDestinator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDestinator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDestinator());	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  INF);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  INF);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  INF);	  Divisor    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	45	None	replace
51	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  ZERO,  imaginary);	  Divisor    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	45	None	replace
52	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor);    	non-compiled	[CE]  ';'  expected	27	None	replace
53	[BUG]  [BUGGY]  Real  divisor  =  getDenominator(real,  c);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDenominator(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real  divisor  =  getDenominator(real,  c);	  Complex    divisor    =    getDenominator(real,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
54	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(c,  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(c,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(c,  real);	  Complex    divisor    =    getDenominator(real,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
55	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)this.denominator.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =(Divisor)this.denominator.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)this.denominator.clone();	  Divisor    divisor    =(Divisor)denominator.clone();    	non-compiled	[CE]  ';'  expected	11	None	replace
56	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getImaginary());	  MathUtils.checkDenominator(divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	58	None	replace
57	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  real.getDenominator());	  MathUtils.checkDenominator(divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	58	None	replace
58	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDestinator());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDestinator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDestinator());	  MathUtils.checkDenominator(divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	58	None	replace
59	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	43	None	replace
60	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(real,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real  divisor  =  getDivisor(real,  imaginary);	  Complex    divisor    =    getDivisor(real,    denominator);    	non-compiled	[CE]  ';'  expected	32	None	replace
61	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(real,  denominator);	  Complex    divisor    =    getDivisor(real,    denominator);    	non-compiled	[CE]  ';'  expected	32	None	replace
62	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  imaginary);	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	54	None	replace
63	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  real);	  MathUtils.checkDenominator(divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	54	None	replace
64	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	6	None	replace
65	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(c,  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(c,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(c,  real);	  Divisor    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  ';'  expected	36	None	replace
67	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  c,  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  c,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  c,  denominator);	  Divisor    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  ';'  expected	36	None	replace
68	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	34	None	replace
69	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  c);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  c);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	34	None	replace
70	[BUG]  [BUGGY]  MathUtils.checkDenominator(real,  imaginary);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(real,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(real,  imaginary);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
71	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  c);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  c);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  imaginary,  c);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(denominator,  imaginary);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  c);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  c);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	12	None	replace
74	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  q);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  q);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  q);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	12	None	replace
75	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	12	None	replace
76	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	41	None	replace
77	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	41	None	replace
78	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
79	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isReal()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isReal()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isReal()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
80	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
81	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
82	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
83	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary);    	non-compiled	[CE]  ';'  expected	26	None	replace
84	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getINFDenominator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getINFDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real).getINFDenominator();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
85	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDivisor();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getDivisor();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real).getDivisor();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
86	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDestination();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getDestination();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real).getDestination();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
87	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)super.divisor.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =(Divisor)super.divisor.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)super.divisor.clone();	  Divisor    divisor    =(Divisor)this.divisor.clone();    	non-compiled	[CE]  ';'  expected	9	None	replace
88	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator  ==  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(denominator  ==  null);	  MathUtils.checkDenominator(divisor!=    null);    	non-compiled	[CE]  ';'  expected	22	None	replace
89	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInfinite(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisorInfinite(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisorInfinite(real);	  Complex    divisor    =    getDivisorInfinite();    	non-compiled	[CE]  ';'  expected	38	None	replace
90	[BUG]  [BUGGY]  Real.checkArgument(divisor  ==  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor  ==  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor  ==  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	47	None	replace
91	[BUG]  [BUGGY]  Real.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkDenominator(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkDenominator(divisor!=  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	47	None	replace
92	[BUG]  [BUGGY]  Complex  divisor  =  getDeniminator(real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDeniminator(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDeniminator(real);	  Complex    divisor    =    getDeniminator();    	non-compiled	[CE]  ';'  expected	61	None	replace
93	[BUG]  [BUGGY]  Complex  divisor  =  getDeniminator(0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDeniminator(0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDeniminator(0);	  Complex    divisor    =    getDeniminator();    	non-compiled	[CE]  ';'  expected	61	None	replace
94	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor1();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor1();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor1();	  Complex    divisor    =    getDivisor2();    	non-compiled	[CE]  ';'  expected	59	None	replace
95	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor0();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor0();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor0();	  Complex    divisor    =    getDivisor2();    	non-compiled	[CE]  ';'  expected	59	None	replace
96	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor3();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor3();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor3();	  Complex    divisor    =    getDivisor2();    	non-compiled	[CE]  ';'  expected	59	None	replace
97	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	39	None	replace
98	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  this.divisors.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  this.divisors.iterator();	  Iterator    <    Complex>    divisor    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	64	None	replace
99	[BUG]  [BUGGY]  Iterator  <  Complex>  divisors  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisors  =  this.divisors.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisors  =  this.divisors.iterator();	  Iterator    <    Complex>    divisor    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	64	None	replace
100	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  this.denominators.iterator();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  this.denominators.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  this.denominators.iterator();	  Iterator    <    Complex>    divisor    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	64	None	replace
101	[BUG]  [BUGGY]  MathUtils.checkDivisor(divisor  ==  null);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDivisor(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDivisor(divisor  ==  null);	  MathUtils.checkDivisor(divisor!=    null);    	non-compiled	[CE]  ';'  expected	48	None	replace
102	[BUG]  [BUGGY]  Real.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkState(divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkState(divisor.isNaN());	  Real.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
103	[BUG]  [BUGGY]  Real.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  Real.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
104	[BUG]  [BUGGY]  Real.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkState(divisor.isInfinite()  &&  isNaN);	  Real.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
105	[BUG]  [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  imaginary);	  NeighborDivisor    <    N>    divisor    =    new    NeighborDivisor    <    N>(real);    	non-compiled	[CE]  ';'  expected	18	None	replace
106	[BUG]  [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(imaginary);	  NeighborDivisor    <    N>    divisor    =    new    NeighborDivisor    <    N>(real);    	non-compiled	[CE]  ';'  expected	18	None	replace
107	[BUG]  [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real,  denominator);	  NeighborDivisor    <    N>    divisor    =    new    NeighborDivisor    <    N>(real);    	non-compiled	[CE]  ';'  expected	18	None	replace
108	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisor.getINFDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	62	None	replace
109	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDenominators().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	62	None	replace
110	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
111	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  isNaN);	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
112	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
113	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDestinator());	  MathUtils.checkState(divisor.getDenominator()    >=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	37	None	replace
114	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
115	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
116	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary,  real);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
117	[BUG]  [BUGGY]  MathUtils.checkDenominator(real,  c);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(real,  c);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(real,  c);	  MathUtils.checkDenominator(divisor,    c);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
118	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(divisor,  imaginary);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(divisor,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(divisor,  imaginary);	  MutableDenominator    divisor    =    new    MutableDenominator(divisor);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
119	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(denominator);	  MutableDenominator    divisor    =    new    MutableDenominator(divisor);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
120	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real,  imaginary);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  real,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  real,  imaginary);	  MathUtils.checkDenominator(divisor,    real);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
121	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator,  real);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(denominator,  real);	  MathUtils.checkDenominator(divisor,    real);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
122	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInstance(real);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisorInstance(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisorInstance(real);	  Complex    divisor    =    getDivisorInstance();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
123	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInstance(false);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisorInstance(false);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisorInstance(false);	  Complex    divisor    =    getDivisorInstance();    	non-compiled	[CE]  ';'  expected	42	None	replace
124	[BUG]  [BUGGY]  Complex  divisor  =  getDenominatorInstance();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominatorInstance();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominatorInstance();	  Complex    divisor    =    getDivisorInstance();    	non-compiled	[CE]  ';'  expected	42	None	replace
125	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDestinator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getDestinator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real).getDestinator();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	60	None	replace
126	[BUG]  [BUGGY]  Complex  divisor  =  getDeniminator().getINFDenominator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDeniminator().getINFDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDeniminator().getINFDenominator();	  Complex    divisor    =    getDeniminator();    	non-compiled	[CE]  ';'  expected	61	None	replace
127	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisor.getNegativeDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	62	None	replace
128	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(imaginary,  ZERO);	  Divisor    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	45	None	replace
129	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  1);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  1);	  Divisor    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  ';'  expected	45	None	replace
130	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	8	None	replace
131	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(real,  imaginary);	  Complex    divisor    =    getDivisor(real,    denominator);    	non-compiled	[CE]  ';'  expected	32	None	replace
132	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getName());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getName());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getName());	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	4	None	replace
133	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	63	None	replace
134	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(real,  divisor);	  MutableDenominator    divisor    =    new    MutableDenominator(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
135	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(imaginary);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
136	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(real);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
137	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  ZERO);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(imaginary,  ZERO);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	51	None	replace
138	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	31	None	replace
139	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ONE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ONE);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  ONE);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	31	None	replace
140	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	34	None	replace
141	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(imaginary,  real);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	34	None	replace
142	[BUG]  [BUGGY]  Real.checkDigits(divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkDigits(divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkDigits(divisor.isNaN());	  Real.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
143	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)getDivisor(real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =(Divisor)getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)getDivisor(real);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	44	None	replace
144	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  q);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  q);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  q);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
145	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ONE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ONE);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  ONE);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	12	None	replace
146	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  q);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  q);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  q);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	12	None	replace
147	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor  >=  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor  >=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor  >=  null);	  MathUtils.checkDenominator(divisor!=    null);    	non-compiled	[CE]  ';'  expected	22	None	replace
148	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary,  real);	  MathUtils.checkState(divisor.getDenominator()    ==    imaginary);    	non-compiled	[CE]  ';'  expected	26	None	replace
149	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  ';'  expected	50	None	replace
150	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
151	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(imaginary,  real);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(imaginary,  real);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
152	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(Imaginary);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(Imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(Imaginary);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
153	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(real,  c);	  Complex    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
154	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(imaginary,  c);	  Complex    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
155	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  c);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(imaginary,  c);	  Complex    divisor    =    getDenominator(real,    c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
156	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDigits(divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
157	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDigits(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
158	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDenominator(imaginary);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDenominator(imaginary);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
159	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  ZERO);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(imaginary,  ZERO);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
160	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&!isInfinite());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&!isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  &&!isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
161	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN()  +  1);	  MathUtils.checkArgument(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
162	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  ONE);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real,  ONE);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	SimpleDivisor  divisor  =  getDivisor(real,  ONE);	  Complex    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
163	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
164	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isNaN());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
165	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
166	[BUG]  [BUGGY]  Real.checkInfinite(divisor.isInfinite());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkInfinite(divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkInfinite(divisor.isInfinite());	  Real.checkState(divisor.isInfinite());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
167	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
168	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.getDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
169	[BUG]  [BUGGY]  Complex  divisor  =  getDeniminator().getDeniminator();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDeniminator().getDeniminator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDeniminator().getDeniminator();	  Complex    divisor    =    getDeniminator();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
170	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  c),  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  c),  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  c),  denominator);	  Complex    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  ';'  expected	33	None	replace
171	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  real);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(imaginary,  real);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
172	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN()  &&  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
173	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  denominator);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
174	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor!=  null  &&  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor!=  null  &&  divisor.isNaN());	  MathUtils.checkDenominator(divisor!=    null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
175	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  c)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  c)-  1;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  c)-  1;	  Divisor    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
176	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  c  +  1);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  c  +  1);	  Divisor    divisor    =    getDivisor(real,    c);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
177	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  imaginary);	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    imaginary);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
178	[BUG]  [BUGGY]  MathUtils.checkDivisor(divisor.getDenominator()  ==  0.0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDivisor(divisor.getDenominator()  ==  0.0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDivisor(divisor.getDenominator()  ==  0.0);	  MathUtils.checkState(divisor.getDenominator()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
179	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  real);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  real);	  Divisor    divisor    =    getDivisor(real,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
180	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN()  +  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
181	[BUG]  [BUGGY]  Iterator  <  Complex>  divisors  =  divisors.iterator();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisors  =  divisors.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisors  =  divisors.iterator();	  Iterator    <    Complex>    divisor    =    divisors.iterator();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
182	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getNumerator(),  divisor.getDenominator());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getNumerator(),  divisor.getDenominator());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getNumerator(),  divisor.getDenominator());	  MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator(),    divisor.getDenominator());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
183	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
184	[BUG]  [BUGGY]  Real.checkNotNull(denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkNotNull(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkNotNull(denominator);	  Real.checkNotNull(imaginary);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
185	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
186	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  c);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(real,  c);	  MutableDenominator    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	19	None	replace
187	[BUG]  [BUGGY]  Ilerator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Ilerator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Ilerator  <  Complex>  divisor  =  divisor.getDivisors().iterator();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	62	None	replace
188	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDivisors();	  Iterator    <    Complex>    divisor    =    divisor.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	62	None	replace
189	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN()    &&    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	43	None	replace
190	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  c).getDenominator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  c).getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  c).getDenominator();	  Complex    divisor    =    getDenominator(real,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
191	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  c)-  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  c)-  1;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  c)-  1;	  Complex    divisor    =    getDenominator(real,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
