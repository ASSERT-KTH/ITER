bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite());  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isInfinite());	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	1	None	replace
2	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDenominator());  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  divisor.getDenominator());	      MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator());    	non-compiled	[CE]  not  a  statement	2	None	replace
5	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDenominator());  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  divisor.getDenominator(),  divisor.getDenominator());	      MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator());    	non-compiled	[CE]  not  a  statement	2	None	replace
6	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	13	None	replace
7	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	13	None	replace
8	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	13	None	replace
9	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)this.divisor.clone();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =(Divisor)this.divisor.clone();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)this.divisor.clone();	      Divisor    divisor    =(Divisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	15	None	replace
10	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)super.clone();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =(Divisor)super.clone();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)super.clone();	      Divisor    divisor    =(Divisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	15	None	replace
11	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)denominator.clone();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =(Divisor)denominator.clone();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =(Divisor)denominator.clone();	      Divisor    divisor    =(Divisor)divisor.clone();    	non-compiled	[CE]  not  a  statement	15	None	replace
12	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  imaginary);	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(imaginary);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(imaginary);	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  c);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(real,  c);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real,  c);	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  imaginary);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  MathUtils.checkDenominator(real);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	NeighborDivisor  <  N>  divisor  =  new  NeighborDivisor  <  N>(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(divisor);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  divisor  =  new  MutableDenominator(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =  new  MutableDenominator(divisor);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
21	[BUG]  [BUGGY]  MathUtils.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor  ==  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor  ==  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor!=  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	14	None	replace
23	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor  ==  null);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor  ==  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor  ==  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	14	None	replace
24	[BUG]  [BUGGY]  Complex  divisor  =  getINFDenominator();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getINFDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getINFDenominator();	      Complex    divisor    =    getDenominator();    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  denominator);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()!=  denominator);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()!=  denominator);	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  imaginary);	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor);	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  Real.checkNotNull(real);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkNotNull(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkNotNull(real);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkArgument(divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor.isNaN());	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  Real.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkState(divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkState(divisor.isInfinite());	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	9	None	replace
31	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	10	None	replace
32	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  denominator);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real,  denominator);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  denominator);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	10	None	replace
33	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  c);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real,  c);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  c);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	10	None	replace
34	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
35	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  denominator);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real,  denominator);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  denominator);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
36	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  c);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real,  c);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  c);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
37	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  >=  divisor.getDenominator());	      MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	3	None	replace
38	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInfinite();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisorInfinite();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisorInfinite();	      Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	12	None	replace
39	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.clone();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
40	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
42	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInstance();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisorInstance();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisorInstance();	      Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	12	None	replace
43	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.isNaN()  &&  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(imaginary);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
45	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Divisor  divisor  =  getDivisor(real,  ZERO);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
46	[BUG]  [BUGGY]  Real.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkNotNull(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkNotNull(imaginary);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkArgument(divisor!=  null);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Real.checkArgument(divisor!=  null);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  MathUtils.checkDivisor(divisor!=  null);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDivisor(divisor!=  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDivisor(divisor!=  null);	  MathUtils.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	14	None	replace
49	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real.getDenominator());	      MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	2	None	replace
50	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  divisor.getDenominator(),  imaginary);	      MathUtils.checkState(divisor.getDenominator()    ==    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	2	None	replace
51	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	10	None	replace
52	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  ZERO);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real,  ZERO);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor(real,  ZERO);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	10	None	replace
53	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  real);	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator());	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
55	[BUG]  [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.getDenominator()  ==  0.0);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkState(divisor.getDenominator()  ==  0.0);	      MathUtils.checkState(divisor.getDenominator()    ==    denominator);    	non-compiled	[CE]  ';'  expected	4	None	replace
56	[BUG]  [BUGGY]  MathUtils.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkNotNull(imaginary);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkNotNull(imaginary);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	7	None	replace
57	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  c);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor,  c);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor,  c);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	6	None	replace
58	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MathUtils.checkDenominator(divisor.getDenominator(),  divisor.getDenominator());	      MathUtils.checkState(divisor.getDenominator()!=    divisor.getDenominator());    	non-compiled	[CE]  ';'  expected	3	None	replace
59	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor2();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor2();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDivisor2();	      Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	12	None	replace
60	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDenominator();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(real).getDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDenominator(real).getDenominator();	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  Complex  divisor  =  getDeniminator();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDeniminator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Complex  divisor  =  getDeniminator();	      Complex    divisor    =    getDenominator();    	non-compiled	[CE]  ';'  expected	11	None	replace
62	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisor.getDivisors().iterator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
63	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
64	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  divisors.iterator();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  divisor  =  divisors.iterator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	251	251	2	replace	Iterator  <  Complex>  divisor  =  divisors.iterator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.setImaginary(imaginary);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
