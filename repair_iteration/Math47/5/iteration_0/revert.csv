projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkNotNull(divisor);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkState(divisor.getDenominator()==divisor.getDenominator());
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkState(divisor.getDenominator()!=divisor.getDenominator());
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkState(divisor.getDenominator()==denominator);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkState(divisor.isNaN());
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkDenominator(divisor);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkNotNull(real);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Complexdivisor=getDenominator(real);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Real.checkNotNull(divisor);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Complexdivisor=getDivisor(real);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Complexdivisor=getDenominator();
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Complexdivisor=getDivisor();
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkArgument(divisor.isNaN());
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251MathUtils.checkState(divisor!=null);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Divisordivisor=(Divisor)divisor.clone();
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251Divisordivisor=getDivisor(real);
projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java251if(divisor!=null){divisor=newComplex(real);}else{divisor.setImaginary(imaginary);}
