bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  d  +  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  d  +  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  d  +  c;	  double    denominator    =    c    *    q    +    d    +    real;    	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  double  denominator  =  c  /  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  /  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  /  d;	  double    denominator    =    d    /    c;    	non-compiled	[CE]  not  a  statement	9	None	replace
3	[BUG]  [BUGGY]  double  denominator  =  d  /  c  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  /  c  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  /  c  +  1;	  double    denominator    =    d    /    c;    	non-compiled	[CE]  not  a  statement	9	None	replace
4	[BUG]  [BUGGY]  double  denominator  =  d  *  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  c;	  double    denominator    =    d    /    c;    	non-compiled	[CE]  not  a  statement	9	None	replace
5	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
6	[BUG]  [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
7	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	1	None	replace
8	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
9	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
10	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
11	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real  +  imaginary;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real  +  imaginary;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real  +  imaginary;	  double    denominator    =    d    *    q    +    real    +    imaginary;    	non-compiled	[CE]  not  a  statement	43	None	replace
12	[BUG]  [BUGGY]  double  real  =  d  -  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  -  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  -  denominator;	  double    real    =    c    -    denominator;    	non-compiled	[CE]  not  a  statement	30	None	replace
13	[BUG]  [BUGGY]  double  real  =  denominator  -  c;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  denominator  -  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  denominator  -  c;	  double    real    =    c    -    denominator;    	non-compiled	[CE]  not  a  statement	30	None	replace
14	[BUG]  [BUGGY]  double  real  =  c  *  denominator;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  *  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  *  denominator;	  double    real    =    c    -    denominator;    	non-compiled	[CE]  not  a  statement	30	None	replace
15	[BUG]  [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	13	None	replace
16	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	33	None	replace
17	[BUG]  [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	33	None	replace
18	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  imaginary;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  imaginary;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  imaginary;	  double    denominator    =    d    *    q    +    imaginary;    	non-compiled	[CE]  not  a  statement	31	None	replace
19	[BUG]  [BUGGY]  double  denominator  =  q  *  d  +  imaginary;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  d  +  imaginary;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  d  +  imaginary;	  double    denominator    =    d    *    q    +    imaginary;    	non-compiled	[CE]  not  a  statement	31	None	replace
20	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
21	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
22	[BUG]  [BUGGY]  double  denominator  =  c  *  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  denominator;	  double    denominator    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	40	None	replace
23	[BUG]  [BUGGY]  double  denominator  =  d  /  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  /  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  /  denominator;	  double    denominator    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	40	None	replace
24	[BUG]  [BUGGY]  double  denominator  =  c  /  q;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  /  q;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  /  q;	  double    denominator    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	40	None	replace
25	[BUG]  [BUGGY]  double  denominator  =  q  *  c  +  divisor;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  c  +  divisor;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  c  +  divisor;	  double    denominator    =    c    *    q    +    divisor;    	non-compiled	[CE]  not  a  statement	42	None	replace
26	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  imaginary  +  d;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  imaginary  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  imaginary  +  d;	  double    denominator    =    d    *    q    +    imaginary    +    c;    	non-compiled	[CE]  not  a  statement	45	None	replace
27	[BUG]  [BUGGY]  double  denominator  =  q  *  c  +  d  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  c  +  d  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  c  +  d  +  1;	  double    denominator    =    c    *    q    +    d    +    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
29	[BUG]  [BUGGY]  double  real  =  d  *  c  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  *  c  +  1;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  *  c  +  1;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
30	[BUG]  [BUGGY]  double  real  =  c  /  d  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  d  +  1;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  d  +  1;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
31	[BUG]  [BUGGY]  double  real  =  d  /  c  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  /  c  +  2;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  /  c  +  2;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
32	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    d    *    q    +    real;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	35	None	replace
33	[BUG]  [BUGGY]  double  denominator  =  real  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  real  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  real  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    d    *    q    +    real;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	35	None	replace
34	[BUG]  [BUGGY]  double  real  =  d  /  denominator.doubleValue();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  /  denominator.doubleValue();  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  /  denominator.doubleValue();	  double    real    =    c    /    denominator.doubleValue();    	non-compiled	[CE]  not  a  statement	29	None	replace
35	[BUG]  [BUGGY]  double  real  =  c  /  d.doubleValue();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  d.doubleValue();  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  d.doubleValue();	  double    real    =    c    /    denominator.doubleValue();    	non-compiled	[CE]  not  a  statement	29	None	replace
36	[BUG]  [BUGGY]  double  real  =  c  /  q.doubleValue();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  q.doubleValue();  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  q.doubleValue();	  double    real    =    c    /    denominator.doubleValue();    	non-compiled	[CE]  not  a  statement	29	None	replace
37	[BUG]  [BUGGY]  double  real  =  c  *  denominator.doubleValue();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  *  denominator.doubleValue();  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  *  denominator.doubleValue();	  double    real    =    c    /    denominator.doubleValue();    	non-compiled	[CE]  not  a  statement	29	None	replace
38	[BUG]  [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
39	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  q;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  q;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  q;	  double    denominator    =    q    *    d    +    real;    	non-compiled	[CE]  not  a  statement	23	None	replace
40	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    	non-compiled	[CE]  not  a  statement	32	None	replace
41	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    	non-compiled	[CE]  not  a  statement	32	None	replace
42	[BUG]  [BUGGY]  double  q  =  c  /  d;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  c  /  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  c  /  d;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  double  q  =  d  /  c  +  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  d  /  c  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  d  /  c  +  1;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  double  q  =  d  /  d;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  d  /  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  d  /  d;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
45	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real  +  d;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real  +  d;	  double    denominator    =    c    *    q    +    real;    	non-compiled	[CE]  not  a  statement	21	None	replace
46	[BUG]  [BUGGY]  double  denominator  =  real  *  q  +  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  real  *  q  +  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  real  *  q  +  c;	  double    denominator    =    c    *    q    +    real;    	non-compiled	[CE]  not  a  statement	21	None	replace
47	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  d,  denominator  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  d,  denominator  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  d,  denominator  +  1;	  double    denominator    =    d    *    q    +    c,    denominator    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
48	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c,  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c,  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c,  denominator;	  double    denominator    =    d    *    q    +    c,    denominator    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
49	[BUG]  [BUGGY]  double  denominator  =  q  *  d  +  c,  denominator  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  d  +  c,  denominator  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  d  +  c,  denominator  +  1;	  double    denominator    =    d    *    q    +    c,    denominator    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
50	[BUG]  [BUGGY]  double  real  =  d  *  q;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  *  q;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  *  q;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	19	None	replace
51	[BUG]  [BUGGY]  double  real  =  d  *  q  +  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  *  q  +  c;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  *  q  +  c;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	19	None	replace
52	[BUG]  [BUGGY]  double  real  =  c  *  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  *  d;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  *  d;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	19	None	replace
53	[BUG]  [BUGGY]  double  real  =  d  *  c  +  c;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  *  c  +  c;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  *  c  +  c;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	19	None	replace
54	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  2;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  2;	  double    denominator    =    d    *    q    +    2;    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
56	[BUG]  [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
57	[BUG]  [BUGGY]  Comparable  <?>  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  Comparable  <?>  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	Comparable  <?>  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
58	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
59	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  d,  imaginary;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  d,  imaginary;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  d,  imaginary;	  double    denominator    =    c    *    q    +    d    +    imaginary;    	non-compiled	[CE]  not  a  statement	24	None	replace
60	[BUG]  [BUGGY]  c  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  c    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	17	None	replace
61	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	25	None	replace
62	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q)/  denominator);	  return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	25	None	replace
63	[BUG]  [BUGGY]  double  real  =  c  /  c;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  c;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  c;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	18	None	replace
64	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
65	[BUG]  [BUGGY]  Double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  Double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	Double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
66	[BUG]  [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
67	[BUG]  [BUGGY]  double  real  =  c  /  q;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  q;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  q;	  double    real    =    d    /    q;    	non-compiled	[CE]  not  a  statement	34	None	replace
68	[BUG]  [BUGGY]  double  real  =  d  /  q  +  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  /  q  +  c;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  /  q  +  c;	  double    real    =    d    /    q;    	non-compiled	[CE]  not  a  statement	34	None	replace
69	[BUG]  [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
70	[BUG]  [BUGGY]  double  real  =  d  /  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  d  /  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  d  /  denominator;	  double    real    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	28	None	replace
71	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c)/  d;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  Math.abs(c)/  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  Math.abs(c)/  d;	  double    denominator    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
72	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d)/  c  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  Math.abs(d)/  c  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  Math.abs(d)/  c  +  1;	  double    denominator    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
73	[BUG]  [BUGGY]  double  denominator  =  Math.abs(q)/  c;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  Math.abs(q)/  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  Math.abs(q)/  c;	  double    denominator    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
74	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  real  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  real  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  real  +  1;	  double    denominator    =    d    *    q    +    real    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
75	[BUG]  [BUGGY]  double  denominator  =  q  *  d  +  real  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  d  +  real  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  d  +  real  +  1;	  double    denominator    =    d    *    q    +    real    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
76	[BUG]  [BUGGY]  double  denominator  =  real  *  q  +  d  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  real  *  q  +  d  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  real  *  q  +  d  +  1;	  double    denominator    =    d    *    q    +    real    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
77	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
78	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
79	[BUG]  [BUGGY]  double  denominator  =  q  *  real  +  d;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  real  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  real  +  d;	  double    denominator    =    real    *    q    +    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
80	[BUG]  [BUGGY]  double  denominator  =  q  *  q  +  d;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  q  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  q  +  d;	  double    denominator    =    real    *    q    +    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
81	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
82	[BUG]  [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
83	[BUG]  [BUGGY]  double  denominator  =  real  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  real  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  real  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
84	[BUG]  [BUGGY]  double  real  =  c  /  d  +  c;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  d  +  c;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  d  +  c;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	18	None	replace
85	[BUG]  [BUGGY]  double  denominator  =  d  /  q;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  /  q;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  /  q;	  double    denominator    =    d    /    c;    	non-compiled	[CE]  not  a  statement	9	None	replace
86	[BUG]  [BUGGY]  RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
87	[BUG]  [BUGGY]  c  =  imaginary  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  imaginary  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  imaginary  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  c    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	17	None	replace
88	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c,  divisor  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c,  divisor  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c,  divisor  +  1;	  double    denominator    =    d    *    q    +    c,    denominator    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
89	[BUG]  [BUGGY]  double  denominator  =  q  *  real  +  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  q  *  real  +  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  q  *  real  +  c;	  double    denominator    =    real    *    q    +    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
90	[BUG]  [BUGGY]  Rectangle2D  rect  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  Rectangle2D  rect  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	Rectangle2D  rect  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
91	[BUG]  [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	RectangleEdge  c  =  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
92	[BUG]  [BUGGY]  Rectangle2D  rect  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  Rectangle2D  rect  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	Rectangle2D  rect  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
93	[BUG]  [BUGGY]  RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	RectangleEdge  c  =  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
94	[BUG]  [BUGGY]  double  q  =  d  /  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  d  /  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  d  /  denominator;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
95	[BUG]  [BUGGY]  double  q  =  d  /  d  +  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  d  /  d  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  d  /  d  +  1;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
96	[BUG]  [BUGGY]  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q)/  denominator);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
97	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  c  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  c  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  c  +  1;	  double    denominator    =    c    *    q    +    d    +    1;    	non-compiled	[CE]  not  a  statement	7	None	replace
98	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  Math.abs(c)/  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  Math.abs(c)/  denominator;	  double    denominator    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
99	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  real  *  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  real  *  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  real  *  c;	  double    denominator    =    d    *    q    +    real    +    c;    	non-compiled	[CE]  not  a  statement	27	None	replace
100	[BUG]  [BUGGY]  double  denominator  =  imaginary  *  q  +  d;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  imaginary  *  q  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  imaginary  *  q  +  d;	  double    denominator    =    d    *    q    +    imaginary;    	non-compiled	[CE]  not  a  statement	31	None	replace
101	[BUG]  [BUGGY]  double  denominator  =  c  *  d  +  real;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  d  +  real;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  d  +  real;	  double    denominator    =    q    *    d    +    real;    	non-compiled	[CE]  not  a  statement	23	None	replace
102	[BUG]  [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  RectangleEdge  c  =  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	RectangleEdge  c  =  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
103	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  divisor;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  divisor;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  divisor;	  double    denominator    =    c    *    q    +    divisor;    	non-compiled	[CE]  not  a  statement	42	None	replace
104	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  imaginary  *  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  imaginary  *  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  imaginary  *  c;	  double    denominator    =    d    *    q    +    imaginary    +    c;    	non-compiled	[CE]  not  a  statement	45	None	replace
105	[BUG]  [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }	  double    denominator    =    c    *    q    +    d;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    	non-compiled	[CE]  not  a  statement	12	None	replace
106	[BUG]  [BUGGY]  double  real  =  c  -  d;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  -  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  -  d;	  double    real    =    c    -    denominator;    	non-compiled	[CE]  not  a  statement	30	None	replace
107	[BUG]  [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	1	None	replace
108	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    	non-compiled	[CE]  not  a  statement	32	None	replace
109	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  -  c)/  d;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  Math.abs(d  -  c)/  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  Math.abs(d  -  c)/  d;	  double    denominator    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
110	[BUG]  [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  double    denominator    =    c    *    q    +    d;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
111	[BUG]  [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	13	None	replace
112	[BUG]  [BUGGY]  double  denominator  =  t  *  q  +  d;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  t  *  q  +  d;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  t  *  q  +  d;	  double    denominator    =    real    *    q    +    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
113	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
114	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
115	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
116	[BUG]  [BUGGY]  double  q  =  d  *  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  q  =  d  *  c;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  q  =  d  *  c;	  double    q    =    d    /    c;    	non-compiled	[CE]  not  a  statement	11	None	replace
117	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	25	None	replace
118	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  real  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  real  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  real  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  double    denominator    =    real    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
119	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  imaginary  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  imaginary  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  imaginary  +  1;	  double    denominator    =    d    *    q    +    real    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
120	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  real  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  real  *  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  real  *  1;	  double    denominator    =    d    *    q    +    real    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
121	[BUG]  [BUGGY]  double  denominator  =  c  *  q  +  imaginary  +  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  c  *  q  +  imaginary  +  denominator;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  c  *  q  +  imaginary  +  denominator;	  double    denominator    =    d    *    q    +    real    +    imaginary;    	non-compiled	[CE]  not  a  statement	43	None	replace
122	[BUG]  [BUGGY]  c  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  c  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	c  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  c    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	17	None	replace
123	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
124	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
125	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
126	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
127	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  divisor);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    divisor);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
128	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
129	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
130	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	37	None	replace
131	[BUG]  [BUGGY]  double  denominator  =  d  *  q  +  c,  0,  denominator  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  denominator  =  d  *  q  +  c,  0,  denominator  +  1;  [BUGGY]      return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  denominator  =  d  *  q  +  c,  0,  denominator  +  1;	  double    denominator    =    d    *    q    +    c,    denominator    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
132	[BUG]  [BUGGY]  double  real  =  c  /  d  +  2;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  double  real  =  c  /  d  +  2;  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	double  real  =  c  /  d  +  2;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	18	None	replace
133	[BUG]  [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  }  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	}  else  if(c  ==  1)  {  double  denominator  =  d  *  q  +  c;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
134	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  real;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
135	[BUG]  [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(c  ==  1)  {  double  denominator  =  d  *  q  +  1;  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  }	  if(c    ==    1)    {    double    denominator    =    d    *    q    +    c;    return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
136	[BUG]  [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	if(d  ==  0.0)  {  double  denominator  =  c  *  q  +  d;  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (real  *  q  -  real)/  denominator);  }	  double    denominator    =    c    *    q    +    d;    return    createComplex((    real    *    q    +    imaginary)/    denominator,    (real    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
137	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
138	[BUG]  [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;      [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);  [BUGGY]      double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	274	274	2	replace	return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  -  real  *  q)/  denominator);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    -    real    *    q)/    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
