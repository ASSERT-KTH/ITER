bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    MathUtils.checkNotNull(factor);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    MathUtils.checkNotNull(factor);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    MathUtils.checkNotNull(factor);		non-compiled	[CE]  not  a  statement	40	None	add
2	[BUG]  [BUGGY]    MathUtils.checkState(isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    MathUtils.checkState(isNaN  ||  factor.isNaN);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    MathUtils.checkState(isNaN  ||  factor.isNaN);		non-compiled	[CE]  not  a  statement	40	None	add
3	[BUG]  [BUGGY]    MathUtils.checkNotNull(divisor);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    MathUtils.checkNotNull(divisor);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    MathUtils.checkNotNull(divisor);		non-compiled	[CE]  not  a  statement	40	None	add
4	[BUG]  [BUGGY]    MathUtils.checkState(isNaN  ||  factor.isInfinite);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    MathUtils.checkState(isNaN  ||  factor.isInfinite);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    MathUtils.checkState(isNaN  ||  factor.isInfinite);		non-compiled	[CE]  not  a  statement	40	None	add
5	[BUG]  [BUGGY]    MathUtils.checkNotNull(font);  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    MathUtils.checkNotNull(font);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    MathUtils.checkNotNull(font);		non-compiled	[CE]  not  a  statement	40	None	add
6	[BUG]  [BUGGY]  return  INF;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  INF;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  INF;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
7	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  isNaN?  NaN  :  INF;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  INF;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
8	[BUG]  [BUGGY]  return  isNaN?  INF  :  NaN;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  isNaN?  INF  :  NaN;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  INF  :  NaN;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
9	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  isNaN?  NaN  :  Complex.ZERO;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  Complex.ZERO;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
10	[BUG]  [BUGGY]  return  ONE;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  ONE;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  ONE;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
11	[BUG]  [BUGGY]  return  ZERO;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  ZERO;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  ZERO;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
12	[BUG]  [BUGGY]  return  NONE;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  NONE;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NONE;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
13	[BUG]  [BUGGY]    Real  real  =  MathUtils.getNaN(factor);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    Real  real  =  MathUtils.getNaN(factor);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    Real  real  =  MathUtils.getNaN(factor);		non-compiled	[CE]  not  a  statement	40	None	add
14	[BUG]  [BUGGY]    Complex  real  =  getDivisor(factor);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    Complex  real  =  getDivisor(factor);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    Complex  real  =  getDivisor(factor);		non-compiled	[CE]  not  a  statement	40	None	add
15	[BUG]  [BUGGY]    Real  real  =  getDivisor(factor);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    Real  real  =  getDivisor(factor);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    Real  real  =  getDivisor(factor);		non-compiled	[CE]  not  a  statement	40	None	add
16	[BUG]  [BUGGY]    Complex  real  =  createComplex(false,  false);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    Complex  real  =  createComplex(false,  false);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    Complex  real  =  createComplex(false,  false);		non-compiled	[CE]  not  a  statement	40	None	add
17	[BUG]  [BUGGY]    Complex  real  =  createComplex(false);  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    Complex  real  =  createComplex(false);  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    Complex  real  =  createComplex(false);		non-compiled	[CE]  not  a  statement	40	None	add
18	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ZERO;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  isNaN?  NaN  :  ZERO;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  ZERO;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
19	[BUG]  [BUGGY]  return  isNaN  ||  factor.isNaN;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]  return  isNaN  ||  factor.isNaN;  [BUGGY]  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.isNaN;	return  NaN;  	non-compiled	[CE]  not  a  statement	39	None	replace
20	[BUG]  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	40	None	add
21	[BUG]  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	40	None	add
22	[BUG]  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	40	None	add
23	[BUG]  [BUGGY]    if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	40	None	add
24	[BUG]  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  [BUGGY]    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	    if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }		non-compiled	[CE]  not  a  statement	40	None	add
