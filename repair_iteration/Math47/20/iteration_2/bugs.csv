bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  NaN?  NaN  :  ZERO;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN?  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  NaN  :  ZERO;	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
2	[BUG]  [BUGGY]  return  NaN?  NaN  :  ONE;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  NaN  :  ONE;	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
3	[BUG]  [BUGGY]  return  NaN  -  ZERO;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  ZERO;	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  return  NaN  -  factor.getDenominator();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  factor.getDenominator();  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.getDenominator();	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
5	[BUG]  [BUGGY]  return  NaN  -  factor.infinite;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  factor.infinite;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite;	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  return  NaN  -  factor.naN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  factor.naN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN;	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.real);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
8	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(real);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getNaN(real);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(real);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
9	[BUG]  [BUGGY]  Real  real  =  MathUtils.getINF(factor);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getINF(factor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getINF(factor);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
10	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(divisor);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getNaN(divisor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(divisor);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
11	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  false);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(true,  false);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  false);	      Complex    real    =    createComplex(false,    false);    	non-compiled	[CE]  not  a  statement	16	None	replace
12	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  true);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(false,  true);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  true);	      Complex    real    =    createComplex(false,    false);    	non-compiled	[CE]  not  a  statement	16	None	replace
13	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  true);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(true,  true);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  true);	      Complex    real    =    createComplex(false,    false);    	non-compiled	[CE]  not  a  statement	16	None	replace
14	[BUG]  [BUGGY]  MathUtils.checkNotNull(denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkNotNull(denominator);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(denominator);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	3	None	replace
15	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
16	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
17	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
19	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor.denominator);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator);	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
20	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.divisor);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor.divisor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.divisor);	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
21	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ZERO;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ZERO;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  null;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  null;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  null;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  NaN;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  NaN;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	11	None	replace
24	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(font.isNaN());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN());	      MathUtils.checkNotNull(font);    	non-compiled	[CE]  not  a  statement	5	None	replace
25	[BUG]  [BUGGY]  MathUtils.checkState(font.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(font.isInfinite());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isInfinite());	      MathUtils.checkNotNull(font);    	non-compiled	[CE]  not  a  statement	5	None	replace
26	[BUG]  [BUGGY]  MathUtils.checkNotNull(real);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkNotNull(real);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(real);	      MathUtils.checkNotNull(factor);    	non-compiled	[CE]  not  a  statement	1	None	replace
27	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
28	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
29	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
30	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
31	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ONE;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  ONE;	  return    isNaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
32	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  ZERO;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  |  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  :  ZERO;	  return    isNaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
33	[BUG]  [BUGGY]  return  isNaN?  NaN  :  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  NaN  :  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  1;	  return    isNaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
34	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
35	[BUG]  [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
36	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
37	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
38	[BUG]  [BUGGY]  return  isNaN?  factor.iNF  :  NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  factor.iNF  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.iNF  :  NaN;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
39	[BUG]  [BUGGY]  return  isNaN?  INF  :  NaN  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  INF  :  NaN  +  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  INF  :  NaN  +  1;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
40	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  INF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  |  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	7	None	replace
41	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor.denominator);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator);	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
42	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.divisor);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor.divisor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.divisor);	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
43	[BUG]  [BUGGY]  MathUtils.checkState(isInfinite  ||  factor.isInfinite);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(isInfinite  ||  factor.isInfinite);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isInfinite  ||  factor.isInfinite);	      MathUtils.checkState(isNaN    ||    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	4	None	replace
44	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isInfinite);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isInfinite);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  &&  factor.isInfinite);	      MathUtils.checkState(isNaN    ||    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	4	None	replace
45	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  isNaN);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  isNaN);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite  ||  isNaN);	      MathUtils.checkState(isNaN    ||    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	4	None	replace
46	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  &&  factor.isNaN);	      MathUtils.checkState(isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	2	None	replace
47	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  ||  factor.isNaN  +  1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(isNaN  ||  factor.isNaN  +  1);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  ||  factor.isNaN  +  1);	      MathUtils.checkState(isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	2	None	replace
48	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  factor.isNaN);	      MathUtils.checkState(isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	2	None	replace
49	[BUG]  [BUGGY]  Complex  real  =  createComplex(true);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(true);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true);	      Complex    real    =    createComplex(false);    	non-compiled	[CE]  not  a  statement	17	None	replace
50	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(false,  factor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor);	      Complex    real    =    createComplex(false);    	non-compiled	[CE]  not  a  statement	17	None	replace
51	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.denominator);	      Complex    real    =    createComplex(false);    	non-compiled	[CE]  not  a  statement	17	None	replace
52	[BUG]  [BUGGY]  return  isNaN  &&  factor.isNaN;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  &&  factor.isNaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &&  factor.isNaN;	  return    isNaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	19	None	replace
53	[BUG]  [BUGGY]  return  isNaN  ||  factor.isNaN  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  ||  factor.isNaN  +  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.isNaN  +  1;	  return    isNaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	19	None	replace
54	[BUG]  [BUGGY]  return  NaN  ||  factor.isNaN;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  ||  factor.isNaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  ||  factor.isNaN;	  return    isNaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	19	None	replace
55	[BUG]  [BUGGY]  return  isNaN?  Complex.ZERO  :  NaN;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  Complex.ZERO  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ZERO  :  NaN;	  return    isNaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	9	None	replace
56	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Complex.ONE;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  NaN  :  Complex.ONE;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  Complex.ONE;	  return    isNaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	9	None	replace
57	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  |  NaN  :  Complex.ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  :  Complex.ZERO;	  return    isNaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	9	None	replace
58	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
59	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
60	[BUG]  [BUGGY]  if(Divisor.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
61	[BUG]  [BUGGY]  return  isNaN?  factor.isNaN  :  NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  factor.isNaN  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.isNaN  :  NaN;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
62	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  NaN;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  factor.naN  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  NaN;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
63	[BUG]  [BUGGY]  return  NaN  -  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  1;	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
64	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
65	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
66	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
67	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
68	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.real);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor.real);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.real);	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
69	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.imaginary);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor.imaginary);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.imaginary);	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
70	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  ZERO);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor,  ZERO);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  ZERO);	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
71	[BUG]  [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
72	[BUG]  [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(infinite  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
73	[BUG]  [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
74	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  isNaN);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(factor.isNaN  ||  isNaN);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  isNaN);	      MathUtils.checkState(isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	2	None	replace
75	[BUG]  [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.isNaN);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  isNaN  ||  factor.isNaN);	      MathUtils.checkState(isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
77	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
78	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
79	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary);	      Complex    real    =    createComplex(false);    	non-compiled	[CE]  not  a  statement	17	None	replace
80	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  null);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  createComplex(false,  null);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  null);	      Complex    real    =    createComplex(false);    	non-compiled	[CE]  not  a  statement	17	None	replace
81	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
82	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
83	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
84	[BUG]  [BUGGY]  MathUtils.checkNotNull(imaginary);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkNotNull(imaginary);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(imaginary);	      MathUtils.checkNotNull(font);    	non-compiled	[CE]  not  a  statement	5	None	replace
85	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(imaginary);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getNaN(imaginary);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(imaginary);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
86	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.imaginary);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  MathUtils.getNaN(factor.imaginary);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.imaginary);	      Real    real    =    MathUtils.getNaN(factor);    	non-compiled	[CE]  not  a  statement	13	None	replace
87	[BUG]  [BUGGY]  return  isNaN  ||  factor.isNaN  -  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  ||  factor.isNaN  -  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.isNaN  -  1;	  return    isNaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	19	None	replace
88	[BUG]  [BUGGY]  MathUtils.checkDenominator(factor);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkDenominator(factor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(factor);	      MathUtils.checkNotNull(factor);    	non-compiled	[CE]  not  a  statement	1	None	replace
89	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.real);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor.real);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.real);	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
90	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ZERO);	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
91	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getINF());  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor.getINF());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getINF());	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
92	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
93	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
94	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
95	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
96	[BUG]  [BUGGY]  return  NONE  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NONE  -  1;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NONE  -  1;	  return    NONE;    	non-compiled	[CE]  not  a  statement	12	None	replace
97	[BUG]  [BUGGY]  return  isNaN?  NaN  :  NONE;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  NaN  :  NONE;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  NONE;	  return    isNaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	18	None	replace
98	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(factor.isInfinite);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite);	      MathUtils.checkState(isNaN    ||    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	4	None	replace
99	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
100	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
101	[BUG]  [BUGGY]  return  NaN?  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN?  NaN  :  Complex.ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  NaN  :  Complex.ZERO;	  return    isNaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	9	None	replace
102	[BUG]  [BUGGY]  MathUtils.checkNotNull(addend);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkNotNull(addend);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(addend);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	3	None	replace
103	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	21	None	replace
104	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  INF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  Negative.isNaN(false)?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  INF;	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
105	[BUG]  [BUGGY]  return  Negative.isNaN(false)? "NaN "  :  INF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  Negative.isNaN(false)? "NaN "  :  INF;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)? "NaN "  :  INF;	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
106	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  INF  :  NaN;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  Negative.isNaN(false)?  INF  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  INF  :  NaN;	  return    INF;    	non-compiled	[CE]  not  a  statement	6	None	replace
107	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getINFValue());  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Complex  real  =  getDivisor(factor.getINFValue());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getINFValue());	      Complex    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	14	None	replace
108	[BUG]  [BUGGY]  if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
109	[BUG]  [BUGGY]  if(Divisor.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
110	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	      if(Divisor.isInfinite(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
111	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getINF());  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  Real  real  =  getDivisor(factor.getINF());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getINF());	      Real    real    =    getDivisor(factor);    	non-compiled	[CE]  not  a  statement	15	None	replace
112	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
113	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
114	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	      if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
115	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkDenominator(divisor);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(divisor);	      MathUtils.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	3	None	replace
116	[BUG]  [BUGGY]  return  isNaN  |  Complex.ZERO;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  |  Complex.ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  Complex.ZERO;	  return    isNaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	9	None	replace
117	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN()  ||  factor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkState(font.isNaN()  ||  factor.isNaN());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN()  ||  factor.isNaN());	      MathUtils.checkNotNull(font);    	non-compiled	[CE]  not  a  statement	5	None	replace
118	[BUG]  [BUGGY]  MathUtils.checkArgument(font.isNaN());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  MathUtils.checkArgument(font.isNaN());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(font.isNaN());	      MathUtils.checkNotNull(font);    	non-compiled	[CE]  not  a  statement	5	None	replace
119	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  INF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN  ||  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	7	None	replace
120	[BUG]  [BUGGY]  return  isNaN?  INF  :  ZERO;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  INF  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  INF  :  ZERO;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
121	[BUG]  [BUGGY]  return  isNaN?  INF  :  ONE;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  isNaN?  INF  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  INF  :  ONE;	  return    isNaN?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	8	None	replace
122	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
123	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
124	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {    [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [BUGGY]    }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));	  return    ONE;    	non-compiled	[CE]  not  a  statement	10	None	replace
