bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(null  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(null  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(null  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
2	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
3	[BUG]  [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
4	[BUG]  [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
5	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.divisor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.divisor);	  Real    real    =    MathUtils.getNaN(factor.imaginary);    	non-compiled	[CE]  not  a  statement	86	None	replace
6	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.iNF);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.iNF);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.iNF);	  Real    real    =    MathUtils.getNaN(factor.imaginary);    	non-compiled	[CE]  not  a  statement	86	None	replace
7	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getDivisor());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getDivisor());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getDivisor());	  Complex    real    =    getDivisor(factor.getINFValue());    	non-compiled	[CE]  not  a  statement	107	None	replace
8	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getDenominator());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getDenominator());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getDenominator());	  Complex    real    =    getDivisor(factor.getINFValue());    	non-compiled	[CE]  not  a  statement	107	None	replace
9	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getINFValue(),  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getINFValue(),  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getINFValue(),  denominator);	  Complex    real    =    getDivisor(factor.getINFValue());    	non-compiled	[CE]  not  a  statement	107	None	replace
10	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  INF;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.naN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  INF;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
11	[BUG]  [BUGGY]  return  NaN?  factor.naN  :  isNaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  factor.naN  :  isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  factor.naN  :  isNaN;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
12	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  null);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(true,  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  null);	  Complex    real    =    createComplex(false,    null);    	non-compiled	[CE]  not  a  statement	80	None	replace
13	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  null,  factor.denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  null,  factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  null,  factor.denominator);	  Complex    real    =    createComplex(false,    null);    	non-compiled	[CE]  not  a  statement	80	None	replace
14	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN  +  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  factor.isNaN  +  1);	  MathUtils.checkState(factor.isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	48	None	replace
15	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(font.isNaN  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN  ||  factor.isNaN);	  MathUtils.checkState(factor.isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	48	None	replace
16	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  &&  factor.isNaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN  &&  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  &&  factor.isNaN);	  MathUtils.checkState(factor.isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	48	None	replace
17	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkDenominator(denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(denominator);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  not  a  statement	115	None	replace
18	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  factor.denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkDenominator(divisor,  factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(divisor,  factor.denominator);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  not  a  statement	115	None	replace
19	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.imaginary);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.imaginary);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  not  a  statement	84	None	replace
20	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.divisor);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.divisor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.divisor);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  not  a  statement	84	None	replace
21	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getDivisor());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.getDivisor());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getDivisor());	  Real    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	111	None	replace
22	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getDivisor(),  factor.getINF());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.getDivisor(),  factor.getINF());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getDivisor(),  factor.getINF());	  Real    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	111	None	replace
23	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getDenominator());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.getDenominator());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getDenominator());	  Real    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	111	None	replace
24	[BUG]  [BUGGY]  if(Divisor.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
25	[BUG]  [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
26	[BUG]  [BUGGY]  MathUtils.checkState(false,  isNaN  &&  factor.isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false,  isNaN  &&  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  isNaN  &&  factor.isNaN);	  MathUtils.checkState(false,    isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	75	None	replace
27	[BUG]  [BUGGY]  MathUtils.checkState(false,  factor.isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false,  factor.isNaN  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  factor.isNaN  ||  factor.isNaN);	  MathUtils.checkState(false,    isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	75	None	replace
28	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
29	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	83	None	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	83	None	replace
31	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	83	None	replace
32	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
33	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
34	[BUG]  [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
35	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
36	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	37	None	replace
37	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	37	None	replace
38	[BUG]  [BUGGY]  return  NaN  -  factor.getDivisor();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.getDivisor();  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.getDivisor();	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
39	[BUG]  [BUGGY]  return  NaN  -  factor.denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.denominator;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.denominator;	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
40	[BUG]  [BUGGY]  return  NaN  -  factor.getDestinator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.getDestinator();  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.getDestinator();	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
41	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN()  ||  factor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN()  ||  factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN()  ||  factor.isNaN());	  MathUtils.checkState(font.isNaN()    ||    factor.isNaN());    	non-compiled	[CE]  not  a  statement	117	None	replace
42	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN()  &&  factor.isNaN());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(font.isNaN()  &&  factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN()  &&  factor.isNaN());	  MathUtils.checkState(font.isNaN()    ||    factor.isNaN());    	non-compiled	[CE]  not  a  statement	117	None	replace
43	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN()  &&  factor.isNaN());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN()  &&  factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN()  &&  factor.isNaN());	  MathUtils.checkState(font.isNaN()    ||    factor.isNaN());    	non-compiled	[CE]  not  a  statement	117	None	replace
44	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
45	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
46	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.real)+  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.real)+  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.real)+  1;	  Complex    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	89	None	replace
47	[BUG]  [BUGGY]  return  NaN?  NaN  :  Complex.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  NaN  :  Complex.ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  NaN  :  Complex.ONE;	  return    NaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	101	None	replace
48	[BUG]  [BUGGY]  return  NaN?  Complex.ZERO  :  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  Complex.ZERO  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  Complex.ZERO  :  NaN;	  return    NaN?    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	101	None	replace
49	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  INF;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    null;    	non-compiled	[CE]  not  a  statement	22	None	replace
50	[BUG]  [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  null;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  null;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  null;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    null;    	non-compiled	[CE]  not  a  statement	22	None	replace
51	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	93	None	replace
52	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	93	None	replace
53	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	93	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.denominator);	  MathUtils.checkNotNull(denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
55	[BUG]  [BUGGY]  return  isNaN?  NONE  :  NaN;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  NONE  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NONE  :  NaN;	  return    isNaN?    NaN    :    NONE;    	non-compiled	[CE]  not  a  statement	97	None	replace
56	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  NONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  NaN  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  :  NONE;	  return    isNaN?    NaN    :    NONE;    	non-compiled	[CE]  not  a  statement	97	None	replace
57	[BUG]  [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
58	[BUG]  [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
59	[BUG]  [BUGGY]  return  NaN  -(future  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(future  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(future  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
60	[BUG]  [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)/(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)/(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(factor.infinite  *  factor.infinite)/(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
61	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
62	[BUG]  [BUGGY]  return  isNaN?  Complex.ONE  :  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  Complex.ONE  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ONE  :  NaN;	  return    isNaN?    NaN    :    Complex.ONE;    	non-compiled	[CE]  not  a  statement	56	None	replace
63	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  Complex.ONE;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  NaN  :  Complex.ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  :  Complex.ONE;	  return    isNaN?    NaN    :    Complex.ONE;    	non-compiled	[CE]  not  a  statement	56	None	replace
64	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isInfinite());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite());	  MathUtils.checkState(font.isInfinite());    	non-compiled	[CE]  not  a  statement	25	None	replace
65	[BUG]  [BUGGY]  MathUtils.checkState(font.isInfinite(),  factor.isNaN);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(font.isInfinite(),  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isInfinite(),  factor.isNaN);	  MathUtils.checkState(font.isInfinite());    	non-compiled	[CE]  not  a  statement	25	None	replace
66	[BUG]  [BUGGY]  return  NaN  -  factor.infinite  ||  Double.isInfinite(factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.infinite  ||  Double.isInfinite(factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite  ||  Double.isInfinite(factor.infinite);	  return    NaN    -    factor.infinite;    	non-compiled	[CE]  not  a  statement	5	None	replace
67	[BUG]  [BUGGY]  return  NaN  -  factor.infinite  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.infinite  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite  +  1;	  return    NaN    -    factor.infinite;    	non-compiled	[CE]  not  a  statement	5	None	replace
68	[BUG]  [BUGGY]  return  NaN  -  factor.infinite  ||  Double.isNaN(factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.infinite  ||  Double.isNaN(factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite  ||  Double.isNaN(factor.infinite);	  return    NaN    -    factor.infinite;    	non-compiled	[CE]  not  a  statement	5	None	replace
69	[BUG]  [BUGGY]  return  isNaN  &&  factor.isNaN  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &&  factor.isNaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &&  factor.isNaN  +  1;	  return    isNaN    ||    factor.isNaN    +    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
70	[BUG]  [BUGGY]  return  NaN  ||  factor.isNaN  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  ||  factor.isNaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  ||  factor.isNaN  +  1;	  return    isNaN    ||    factor.isNaN    +    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
71	[BUG]  [BUGGY]  return  isNaN  ||  factor.isNaN  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  factor.isNaN  +  2;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.isNaN  +  2;	  return    isNaN    ||    factor.isNaN    +    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
72	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	66	None	replace
73	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	66	None	replace
74	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	66	None	replace
75	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
76	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
77	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
78	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
79	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
80	[BUG]  [BUGGY]  return  isNaN?  Complex.ZERO  :  ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  Complex.ZERO  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ZERO  :  ONE;	  return    isNaN?    Complex.ZERO    :    NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
81	[BUG]  [BUGGY]  return  isNaN?  Complex.ZERO  :  INF;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  Complex.ZERO  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ZERO  :  INF;	  return    isNaN?    Complex.ZERO    :    NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
82	[BUG]  [BUGGY]  return  isNaN?  Complex.ZERO  :  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  Complex.ZERO  :  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ZERO  :  1;	  return    isNaN?    Complex.ZERO    :    NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
83	[BUG]  [BUGGY]  return  isInfinite  &&  factor.isNaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isInfinite  &&  factor.isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isInfinite  &&  factor.isNaN;	  return    isNaN    &&    factor.isNaN;    	non-compiled	[CE]  not  a  statement	52	None	replace
84	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	113	None	replace
85	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	113	None	replace
86	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	58	None	replace
87	[BUG]  [BUGGY]  Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	58	None	replace
88	[BUG]  [BUGGY]  return  isNaN?  factor.isNaN  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.isNaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.isNaN  :  INF;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
89	[BUG]  [BUGGY]  return  NaN?  factor.isNaN  :  isNaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  factor.isNaN  :  isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  factor.isNaN  :  isNaN;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
90	[BUG]  [BUGGY]  return  isNaN?  factor.real  :  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.real  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.real  :  NaN;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
91	[BUG]  [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
92	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
93	[BUG]  [BUGGY]  return  Negative.isNaN(true)?  NaN  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(true)?  NaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(true)?  NaN  :  INF;	  return    Negative.isNaN(false)?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	106	None	replace
94	[BUG]  [BUGGY]  return  Negative.isNaN(true)?  INF  :  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(true)?  INF  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(true)?  INF  :  NaN;	  return    Negative.isNaN(false)?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	106	None	replace
95	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  factor.naN  :  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  factor.naN  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  factor.naN  :  NaN;	  return    Negative.isNaN(false)?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	106	None	replace
96	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN);	  MathUtils.checkNotNull(addend);    	non-compiled	[CE]  not  a  statement	102	None	replace
97	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.addend);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.addend);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.addend);	  MathUtils.checkNotNull(addend);    	non-compiled	[CE]  not  a  statement	102	None	replace
98	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  ONE);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  ONE);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  ONE);	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
99	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  NaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  NaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  NaN);	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
100	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  denominator);	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
101	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  ZERO,  denominator);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  ZERO,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  ZERO,  denominator);	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
102	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  NaN  :  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  :  1;	  return    isNaN?    NaN    :    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
103	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
104	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
105	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
106	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
107	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getDivisor(),  factor.getINF());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getDivisor(),  factor.getINF());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getDivisor(),  factor.getINF());	  Complex    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	91	None	replace
108	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getN());	  Complex    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	91	None	replace
109	[BUG]  [BUGGY]  return  NaN  -  factor.naN  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.naN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN  +  1;	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
110	[BUG]  [BUGGY]  return  NaN  -  factor.naN,  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.naN,  denominator;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN,  denominator;	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
111	[BUG]  [BUGGY]  return  NaN  -  factor.naN,  null);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.naN,  null);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN,  null);	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
112	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN());	  MathUtils.checkState(font.isNaN());    	non-compiled	[CE]  not  a  statement	24	None	replace
113	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN(),  factor.isNaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(font.isNaN(),  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN(),  factor.isNaN);	  MathUtils.checkState(font.isNaN());    	non-compiled	[CE]  not  a  statement	24	None	replace
114	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.imaginary)));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.imaginary)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.imaginary)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
115	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.iNF)));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.iNF)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.iNF)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
116	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
117	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ONE);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  ONE);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ONE);	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
118	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  denominator);	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
119	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO,  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ZERO,  denominator);	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
120	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  NaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  NaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  NaN);	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
121	[BUG]  [BUGGY]  MathUtils.checkState(isInfinite  &&  factor.isInfinite);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(isInfinite  &&  factor.isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isInfinite  &&  factor.isInfinite);	  MathUtils.checkState(isNaN    &&    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	44	None	replace
122	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
123	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
124	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
125	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
126	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  &&  factor.isNaN  ||  factor.isNaN);	  MathUtils.checkState(isNaN    &&    factor.isNaN);    	non-compiled	[CE]  not  a  statement	46	None	replace
127	[BUG]  [BUGGY]  return  isNaN  &  NaN  :  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &  NaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &  NaN  :  ZERO;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
128	[BUG]  [BUGGY]  return  isNaN  |  NaN  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  NaN  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  -  1;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
129	[BUG]  [BUGGY]  return  NaN  |  ONE  :  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  ONE  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  ONE  :  ZERO;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
130	[BUG]  [BUGGY]  return  NaN  |  isNaN?  ONE  :  ZERO;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  isNaN?  ONE  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  isNaN?  ONE  :  ZERO;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
131	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  factor.isNaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite  ||  factor.isNaN);	  MathUtils.checkState(factor.isInfinite    ||    isNaN);    	non-compiled	[CE]  not  a  statement	45	None	replace
132	[BUG]  [BUGGY]  MathUtils.checkState(isInfinite  ||  factor.isNaN);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(isInfinite  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isInfinite  ||  factor.isNaN);	  MathUtils.checkState(factor.isInfinite    ||    isNaN);    	non-compiled	[CE]  not  a  statement	45	None	replace
133	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  isInfinite);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN  ||  isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  isInfinite);	  MathUtils.checkState(factor.isInfinite    ||    isNaN);    	non-compiled	[CE]  not  a  statement	45	None	replace
134	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	92	None	replace
135	[BUG]  [BUGGY]  return  NaN  /  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  /  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  /  ZERO;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
136	[BUG]  [BUGGY]  return  NaN  -  ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  ONE;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
137	[BUG]  [BUGGY]  return  NaN  -  ZERO  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  ZERO  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  ZERO  +  1;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
138	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  NaN  :  INF  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NaN  :  INF  +  1;	  return    isNaN?    INF    :    NaN    +    1;    	non-compiled	[CE]  not  a  statement	39	None	replace
139	[BUG]  [BUGGY]  return  isNaN?  factor.iNF  :  NaN  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.iNF  :  NaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.iNF  :  NaN  +  1;	  return    isNaN?    INF    :    NaN    +    1;    	non-compiled	[CE]  not  a  statement	39	None	replace
140	[BUG]  [BUGGY]  return  isNaN?  factor.isNaN  :  NaN  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.isNaN  :  NaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.isNaN  :  NaN  +  1;	  return    isNaN?    INF    :    NaN    +    1;    	non-compiled	[CE]  not  a  statement	39	None	replace
141	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  factor.imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(true,  factor.imaginary);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  factor.imaginary);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
142	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  factor.denominator);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary,  factor.denominator);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
143	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary,  denominator);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
144	[BUG]  [BUGGY]  return  NaN  /  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  /  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  /  1;	  return    NaN    -    1;    	non-compiled	[CE]  not  a  statement	63	None	replace
145	[BUG]  [BUGGY]  return  NaN  -  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  2;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  2;	  return    NaN    -    1;    	non-compiled	[CE]  not  a  statement	63	None	replace
146	[BUG]  [BUGGY]  return  NaN  -  1L;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  1L;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  1L;	  return    NaN    -    1;    	non-compiled	[CE]  not  a  statement	63	None	replace
147	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	36	None	replace
148	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	36	None	replace
149	[BUG]  [BUGGY]  Real  real  =  MathUtils.getINF(factor.real);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getINF(factor.real);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getINF(factor.real);	  Real    real    =    MathUtils.getINF(factor);    	non-compiled	[CE]  not  a  statement	9	None	replace
150	[BUG]  [BUGGY]  Real  real  =  MathUtils.getDivisor(factor);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getDivisor(factor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getDivisor(factor);	  Real    real    =    MathUtils.getINF(factor);    	non-compiled	[CE]  not  a  statement	9	None	replace
151	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  factor.denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(true,  factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  factor.denominator);	  Complex    real    =    createComplex(false,    factor.denominator);    	non-compiled	[CE]  not  a  statement	51	None	replace
152	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  ZERO);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.denominator,  ZERO);	  Complex    real    =    createComplex(false,    factor.denominator);    	non-compiled	[CE]  not  a  statement	51	None	replace
153	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  null);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.denominator,  null);	  Complex    real    =    createComplex(false,    factor.denominator);    	non-compiled	[CE]  not  a  statement	51	None	replace
154	[BUG]  [BUGGY]  MathUtils.checkArgument(factor.isNaN());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(factor.isNaN());	  MathUtils.checkArgument(font.isNaN());    	non-compiled	[CE]  not  a  statement	118	None	replace
155	[BUG]  [BUGGY]  MathUtils.checkArgument(font.isNaN()  ||  factor.isNaN());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(font.isNaN()  ||  factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(font.isNaN()  ||  factor.isNaN());	  MathUtils.checkArgument(font.isNaN());    	non-compiled	[CE]  not  a  statement	118	None	replace
156	[BUG]  [BUGGY]  MathUtils.checkArgument(font.isNaN(),  factor.isNaN);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(font.isNaN(),  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(font.isNaN(),  factor.isNaN);	  MathUtils.checkArgument(font.isNaN());    	non-compiled	[CE]  not  a  statement	118	None	replace
157	[BUG]  [BUGGY]  return  isNaN  &&  factor.isNaN  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &&  factor.isNaN  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &&  factor.isNaN  -  1;	  return    isNaN    ||    factor.isNaN    -    1;    	non-compiled	[CE]  not  a  statement	87	None	replace
158	[BUG]  [BUGGY]  return  NaN  ||  factor.isNaN  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  ||  factor.isNaN  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  ||  factor.isNaN  -  1;	  return    isNaN    ||    factor.isNaN    -    1;    	non-compiled	[CE]  not  a  statement	87	None	replace
159	[BUG]  [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  NaN;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    NaN;    	non-compiled	[CE]  not  a  statement	23	None	replace
160	[BUG]  [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  NaN;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  NaN;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    NaN;    	non-compiled	[CE]  not  a  statement	23	None	replace
161	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  ONE;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    ZERO;    	non-compiled	[CE]  not  a  statement	21	None	replace
162	[BUG]  [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(factor.adjivisor)?  NaN.valueOf(adjivisor):  ZERO;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    ZERO;    	non-compiled	[CE]  not  a  statement	21	None	replace
163	[BUG]  [BUGGY]  return  NaNaN?  NaN  :  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaNaN?  NaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaNaN?  NaN  :  ZERO;	  return    NaN?    NaN    :    ONE;    	non-compiled	[CE]  not  a  statement	2	None	replace
164	[BUG]  [BUGGY]  return  NaN  |  NaN  :  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  NaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  NaN  :  ONE;	  return    NaN?    NaN    :    ONE;    	non-compiled	[CE]  not  a  statement	2	None	replace
165	[BUG]  [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
166	[BUG]  [BUGGY]  Real  real  =  MathUtils.getDivisor(factor.real);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getDivisor(factor.real);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getDivisor(factor.real);	  Real    real    =    MathUtils.getNaN(real);    	non-compiled	[CE]  not  a  statement	8	None	replace
167	[BUG]  [BUGGY]  return  NaN?  INF  :  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  INF  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  INF  :  ZERO;	  return    isNaN?    INF    :    ONE;    	non-compiled	[CE]  not  a  statement	121	None	replace
168	[BUG]  [BUGGY]  Complex  real  =  createComplex(true,  factor);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(true,  factor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(true,  factor);	  Complex    real    =    createComplex(false,    factor);    	non-compiled	[CE]  not  a  statement	50	None	replace
169	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.real);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.real);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.real);	  Complex    real    =    createComplex(false,    factor);    	non-compiled	[CE]  not  a  statement	50	None	replace
170	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  ZERO);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator,  ZERO);	  Complex    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	41	None	replace
171	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator,  null);	  Complex    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	41	None	replace
172	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  factor.divisor);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  factor.divisor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator,  factor.divisor);	  Complex    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	41	None	replace
173	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(isNaN  &&  factor.isNaN  +  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  &&  factor.isNaN  +  1);	  MathUtils.checkState(isNaN    ||    factor.isNaN    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
174	[BUG]  [BUGGY]  MathUtils.checkState(font.isNaN  ||  factor.isNaN  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(font.isNaN  ||  factor.isNaN  +  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(font.isNaN  ||  factor.isNaN  +  1);	  MathUtils.checkState(isNaN    ||    factor.isNaN    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
175	[BUG]  [BUGGY]  return  isNaN  ||  factor.isNaN  :  INF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  factor.isNaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.isNaN  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	119	None	replace
176	[BUG]  [BUGGY]  return  isNaN  &&  NaN  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &&  NaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &&  NaN  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	119	None	replace
177	[BUG]  [BUGGY]  return  NaN  ||  factor.isNaN  :  INF;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  ||  factor.isNaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  ||  factor.isNaN  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	119	None	replace
178	[BUG]  [BUGGY]  return  isNaN  ||  NaN  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  NaN  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  -  1;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	119	None	replace
179	[BUG]  [BUGGY]  return  Negative.isNaN(true)?   "NaN "  :  INF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(true)?   "NaN "  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(true)?   "NaN "  :  INF;	  return    Negative.isNaN(false)?   "NaN   "    :    INF;    	non-compiled	[CE]  not  a  statement	105	None	replace
180	[BUG]  [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NaN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?   "NaN "  :  NaN;	  return    Negative.isNaN(false)?   "NaN   "    :    INF;    	non-compiled	[CE]  not  a  statement	105	None	replace
181	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.divisor,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.divisor,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.divisor,  denominator);	  Real    real    =    getDivisor(factor.divisor);    	non-compiled	[CE]  not  a  statement	20	None	replace
182	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  factor.isInfinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isInfinite  ||  factor.isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite  ||  factor.isInfinite);	  MathUtils.checkState(factor.isInfinite);    	non-compiled	[CE]  not  a  statement	98	None	replace
183	[BUG]  [BUGGY]  MathUtils.checkState(factor.isInfinite,  isNaN);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isInfinite,  isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isInfinite,  isNaN);	  MathUtils.checkState(factor.isInfinite);    	non-compiled	[CE]  not  a  statement	98	None	replace
184	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	114	None	replace
185	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	122	None	replace
186	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	122	None	replace
187	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
188	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
189	[BUG]  [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
190	[BUG]  [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
191	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Double.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	100	None	replace
192	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Double.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	100	None	replace
193	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Double.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	100	None	replace
194	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.divisor,  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.divisor,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.divisor,  denominator);	  Complex    real    =    getDivisor(factor.divisor);    	non-compiled	[CE]  not  a  statement	42	None	replace
195	[BUG]  [BUGGY]  return  isNaN  &  NaN  :  INF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &  NaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &  NaN  :  INF;	  return    isNaN    |    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	40	None	replace
196	[BUG]  [BUGGY]  return  isNaN  |  factor.isNaN  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  factor.isNaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  factor.isNaN  :  INF;	  return    isNaN    |    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	40	None	replace
197	[BUG]  [BUGGY]  return  isNaN  -  NaN  :  INF;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  -  NaN  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  -  NaN  :  INF;	  return    isNaN    |    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	40	None	replace
198	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  ONE;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  NaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  :  ONE;	  return    isNaN?    NaN    :    ONE;    	non-compiled	[CE]  not  a  statement	31	None	replace
199	[BUG]  [BUGGY]  return  isNaN?  factor.iNF  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.iNF  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.iNF  :  INF;	  return    isNaN?    factor.iNF    :    NaN;    	non-compiled	[CE]  not  a  statement	38	None	replace
200	[BUG]  [BUGGY]  return  NaN  |  Complex.ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  Complex.ZERO;	  return    isNaN    |    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	116	None	replace
201	[BUG]  [BUGGY]  return  isNaN  |  Complex.ONE;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  Complex.ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  Complex.ONE;	  return    isNaN    |    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	116	None	replace
202	[BUG]  [BUGGY]  return  isNaN  &  Complex.ZERO;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &  Complex.ZERO;	  return    isNaN    |    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	116	None	replace
203	[BUG]  [BUGGY]  return  isNaN  -  Complex.ZERO;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  -  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  -  Complex.ZERO;	  return    isNaN    |    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	116	None	replace
204	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator,  ZERO);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.denominator,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator,  ZERO);	  Real    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	19	None	replace
205	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator,  factor.divisor);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.denominator,  factor.divisor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator,  factor.divisor);	  Real    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	19	None	replace
206	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator,  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.denominator,  c);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator,  c);	  Real    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	19	None	replace
207	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	95	None	replace
208	[BUG]  [BUGGY]  return  NaN  -  factor.isNaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.isNaN;	  return    NaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	54	None	replace
209	[BUG]  [BUGGY]  return  NaN  ||  factor.isNaN  ||  ZERO;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  ||  factor.isNaN  ||  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  ||  factor.isNaN  ||  ZERO;	  return    NaN    ||    factor.isNaN;    	non-compiled	[CE]  not  a  statement	54	None	replace
210	[BUG]  [BUGGY]  return  factor.none  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  factor.none  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  factor.none  -  1;	  return    NONE    -    1;    	non-compiled	[CE]  not  a  statement	96	None	replace
211	[BUG]  [BUGGY]  return  NONE  /  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NONE  /  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NONE  /  1;	  return    NONE    -    1;    	non-compiled	[CE]  not  a  statement	96	None	replace
212	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.denominator);	  Real    real    =    MathUtils.getNaN(divisor);    	non-compiled	[CE]  not  a  statement	10	None	replace
213	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(denominator);	  Real    real    =    MathUtils.getNaN(divisor);    	non-compiled	[CE]  not  a  statement	10	None	replace
214	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real)+  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real)+  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.real)+  1;	  Real    real    =    MathUtils.getNaN(factor.real);    	non-compiled	[CE]  not  a  statement	7	None	replace
215	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real)-  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real)-  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.real)-  1;	  Real    real    =    MathUtils.getNaN(factor.real);    	non-compiled	[CE]  not  a  statement	7	None	replace
216	[BUG]  [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
217	[BUG]  [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(font.infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(font.infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font.infinite  *  factor.infinite)+(font.infinite  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
218	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
219	[BUG]  [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(factor.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
220	[BUG]  [BUGGY]  return  NaN?  INF  :  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN?  INF  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN?  INF  :  ONE;	  return    isNaN?    INF    :    ZERO;    	non-compiled	[CE]  not  a  statement	120	None	replace
221	[BUG]  [BUGGY]  return  isNaN  &  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  &  NaN  :  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  &  NaN  :  Complex.ZERO;	  return    isNaN    |    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	57	None	replace
222	[BUG]  [BUGGY]  return  isNaN  |  Complex.ZERO  :  NaN;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  Complex.ZERO  :  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  Complex.ZERO  :  NaN;	  return    isNaN    |    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	57	None	replace
223	[BUG]  [BUGGY]  return  isNaN  -  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  -  NaN  :  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  -  NaN  :  Complex.ZERO;	  return    isNaN    |    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	57	None	replace
224	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.real)+  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.real)+  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.real)+  1;	  Real    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	68	None	replace
225	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.real,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.real,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.real,  denominator);	  Real    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	68	None	replace
226	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  true,  factor.denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  true,  factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  true,  factor.denominator);	  Complex    real    =    createComplex(false,    true);    	non-compiled	[CE]  not  a  statement	12	None	replace
227	[BUG]  [BUGGY]  MathUtils.checkState(isNaN  ||  factor.denominator  ==  null);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(isNaN  ||  factor.denominator  ==  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(isNaN  ||  factor.denominator  ==  null);	  MathUtils.checkState(factor.isNaN    ||    isNaN);    	non-compiled	[CE]  not  a  statement	74	None	replace
228	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  -  1)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
229	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.next())));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.next())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.next())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
230	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.real())));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.real())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.real())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
231	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	112	None	replace
232	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	112	None	replace
233	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  Complex.ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  NaN  :  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  Complex.ZERO;	  return    Negative.isNaN(false)?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	104	None	replace
234	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  INF,  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  NaN  :  INF,  denominator;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  INF,  denominator;	  return    Negative.isNaN(false)?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	104	None	replace
235	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
236	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	64	None	replace
237	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	64	None	replace
238	[BUG]  [BUGGY]  return  NaNaN?  NaN  :  ONE;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaNaN?  NaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaNaN?  NaN  :  ONE;	  return    NaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	1	None	replace
239	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    Na    	non-compiled	[CE]  not  a  statement	99	None	replace
240	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    Na    	non-compiled	[CE]  not  a  statement	99	None	replace
241	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    Na    	non-compiled	[CE]  not  a  statement	99	None	replace
242	[BUG]  [BUGGY]  return  NaN  &&  factor.isNaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  &&  factor.isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  &&  factor.isNaN;	  return    isNaN    &&    factor.isNaN;    	non-compiled	[CE]  not  a  statement	52	None	replace
243	[BUG]  [BUGGY]  return  INF  &&  factor.isNaN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  INF  &&  factor.isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  INF  &&  factor.isNaN;	  return    isNaN    &&    factor.isNaN;    	non-compiled	[CE]  not  a  statement	52	None	replace
244	[BUG]  [BUGGY]  return  NaN  *  factor.naN;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  factor.naN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  factor.naN;	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
245	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(naN  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(naN  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(naN  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
246	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
247	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(creator  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(creator  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(creator  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
248	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  ZERO)+  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  ZERO)+  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  ZERO)+  1;	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
249	[BUG]  [BUGGY]  MathUtils.checkArgument(factor.isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(factor.isNaN);	  MathUtils.checkNotNull(addend);    	non-compiled	[CE]  not  a  statement	102	None	replace
250	[BUG]  [BUGGY]  MathUtils.checkDenominator(factor.denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkDenominator(factor.denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(factor.denominator);	  MathUtils.checkNotNull(addend);    	non-compiled	[CE]  not  a  statement	102	None	replace
251	[BUG]  [BUGGY]  return  NaN  -(font  *  factor.infinite)+(font  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font  *  factor.infinite)+(font  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font  *  factor.infinite)+(font  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
252	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
253	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
254	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
255	[BUG]  [BUGGY]  return  NaN  -(font  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font  *  factor.infinite)+(imaginary  *  factor.infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	71	None	replace
256	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isInfinite);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  factor.isInfinite);	  MathUtils.checkState(factor.isInfinite    ||    isNaN);    	non-compiled	[CE]  not  a  statement	45	None	replace
257	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.getN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getN());	  Real    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	111	None	replace
258	[BUG]  [BUGGY]  return  ZERO  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  ZERO  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  ZERO  -  1;	  return    NONE    -    1;    	non-compiled	[CE]  not  a  statement	96	None	replace
259	[BUG]  [BUGGY]  MathUtils.checkDenominator(factor.isNaN());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkDenominator(factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(factor.isNaN());	  MathUtils.checkState(font.isNaN());    	non-compiled	[CE]  not  a  statement	24	None	replace
260	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  INF  :  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  INF  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  INF  :  ZERO;	  return    Negative.isNaN(false)?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	106	None	replace
261	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  INF  :  ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  INF  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  INF  :  ONE;	  return    Negative.isNaN(false)?    INF    :    NaN;    	non-compiled	[CE]  not  a  statement	106	None	replace
262	[BUG]  [BUGGY]  return  NaN  -  factor.infinite,  isNaN;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.infinite,  isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite,  isNaN;	  return    NaN    -    factor.infinite;    	non-compiled	[CE]  not  a  statement	5	None	replace
263	[BUG]  [BUGGY]  return  NaN  -  factor.infinite,  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.infinite,  denominator;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.infinite,  denominator;	  return    NaN    -    factor.infinite;    	non-compiled	[CE]  not  a  statement	5	None	replace
264	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	113	None	replace
265	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	113	None	replace
266	[BUG]  [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
267	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()  +  1)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
268	[BUG]  [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	123	None	replace
269	[BUG]  [BUGGY]  return  NaN  -  factor.getINFDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.getINFDenominator();  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.getINFDenominator();	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
270	[BUG]  [BUGGY]  return  NaN  *  factor.getDenominator();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  factor.getDenominator();  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  factor.getDenominator();	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
271	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
272	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
273	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
274	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
275	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
276	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.real,  ZERO);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.real,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.real,  ZERO);	  Complex    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	89	None	replace
277	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.real  -  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.real  -  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.real  -  1);	  Complex    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	89	None	replace
278	[BUG]  [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN,  ZERO);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(factor.isNaN  ||  factor.isNaN,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(factor.isNaN  ||  factor.isNaN,  ZERO);	  MathUtils.checkState(factor.isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	48	None	replace
279	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	95	None	replace
280	[BUG]  [BUGGY]  return  NaN  *  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  ZERO;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
281	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	36	None	replace
282	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	36	None	replace
283	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  ZERO);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary,  ZERO);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
284	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  false);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  false);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary,  false);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
285	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  factor);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkDenominator(divisor,  factor);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkDenominator(divisor,  factor);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  not  a  statement	115	None	replace
286	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()))));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()))));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek()))));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	122	None	replace
287	[BUG]  [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.peek())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	122	None	replace
288	[BUG]  [BUGGY]  return  isNaN  |  NaN  -  Complex.ZERO;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  NaN  -  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  NaN  -  Complex.ZERO;	  return    isNaN    |    NaN    :    Complex.ZERO;    	non-compiled	[CE]  not  a  statement	57	None	replace
289	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.real,  ZERO);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.real,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.real,  ZERO);	  Real    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	68	None	replace
290	[BUG]  [BUGGY]  Complex  real  =  createComplex(null,  true);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(null,  true);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(null,  true);	  Complex    real    =    createComplex(true,    true);    	non-compiled	[CE]  not  a  statement	13	None	replace
291	[BUG]  [BUGGY]  return  isNaN?  INF  :  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  INF  :  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  INF  :  1;	  return    isNaN?    NaN    :    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
292	[BUG]  [BUGGY]  return  NaN  |  INF  :  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  INF  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  INF  :  ZERO;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
293	[BUG]  [BUGGY]  return  NaN  |  isNaN  :  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  isNaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  isNaN  :  ONE;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
294	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
295	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
296	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  null,  ZERO);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  null,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  null,  ZERO);	  Complex    real    =    createComplex(false,    null);    	non-compiled	[CE]  not  a  statement	80	None	replace
297	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  null,  factor.imaginary);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  null,  factor.imaginary);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  null,  factor.imaginary);	  Complex    real    =    createComplex(false,    null);    	non-compiled	[CE]  not  a  statement	80	None	replace
298	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.isInfinite());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.isInfinite());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.isInfinite());	  MathUtils.checkState(font.isInfinite());    	non-compiled	[CE]  not  a  statement	25	None	replace
299	[BUG]  [BUGGY]  MathUtils.checkState(false, "NaN  does  not  exist. ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false, "NaN  does  not  exist. ");  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false, "NaN  does  not  exist. ");	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  not  a  statement	26	None	replace
300	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(real,  factor.imaginary);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(real,  factor.imaginary);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(real,  factor.imaginary);	  Real    real    =    MathUtils.getNaN(factor.real);    	non-compiled	[CE]  not  a  statement	7	None	replace
301	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  false);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.denominator,  false);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.denominator,  false);	  Complex    real    =    createComplex(false,    factor.denominator);    	non-compiled	[CE]  not  a  statement	51	None	replace
302	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)    	non-compiled	[CE]  not  a  statement	30	None	replace
303	[BUG]  [BUGGY]  return  NONE?  NaN  :  isNaN;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NONE?  NaN  :  isNaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NONE?  NaN  :  isNaN;	  return    isNaN?    NaN    :    NONE;    	non-compiled	[CE]  not  a  statement	97	None	replace
304	[BUG]  [BUGGY]  return  isNaN?  Complex.ZERO  :  Complex.ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  Complex.ZERO  :  Complex.ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  Complex.ZERO  :  Complex.ONE;	  return    isNaN?    Complex.ZERO    :    NaN;    	non-compiled	[CE]  not  a  statement	55	None	replace
305	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator,  null);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.denominator,  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator,  null);	  Real    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	19	None	replace
306	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.denominator  -  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.denominator  -  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.denominator  -  1);	  Real    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	19	None	replace
307	[BUG]  [BUGGY]  MathUtils.checkNotNull(factor.isNaN());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkNotNull(factor.isNaN());  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkNotNull(factor.isNaN());	  MathUtils.checkArgument(font.isNaN());    	non-compiled	[CE]  not  a  statement	118	None	replace
308	[BUG]  [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  null;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  null;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  null;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    null;    	non-compiled	[CE]  not  a  statement	22	None	replace
309	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  NaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  ZERO;	  return    Negative.isNaN(false)?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	104	None	replace
310	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  NONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  NaN  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  NONE;	  return    Negative.isNaN(false)?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	104	None	replace
311	[BUG]  [BUGGY]  return  isNaN  -  factor.isNaN  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  -  factor.isNaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  -  factor.isNaN  +  1;	  return    isNaN    ||    factor.isNaN    +    1;    	non-compiled	[CE]  not  a  statement	53	None	replace
312	[BUG]  [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?   "NaN "  :  NONE;	  return    Negative.isNaN(false)?   "NaN   "    :    INF;    	non-compiled	[CE]  not  a  statement	105	None	replace
313	[BUG]  [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  *  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
314	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p))));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p))));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p))));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
315	[BUG]  [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p),  1));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p),  1));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p),  1));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
316	[BUG]  [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.imaginary);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.imaginary);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  isNaN  ||  factor.imaginary);	  MathUtils.checkState(false,    isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	75	None	replace
317	[BUG]  [BUGGY]  MathUtils.checkState(false,  factor.isNaN  ||  isInfinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false,  factor.isNaN  ||  isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  factor.isNaN  ||  isInfinite);	  MathUtils.checkState(false,    isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	75	None	replace
318	[BUG]  [BUGGY]  return  isNaN?  factor.isNaN  :  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.isNaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.isNaN  :  ZERO;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
319	[BUG]  [BUGGY]  return  isNaN?  factor.multiply(null,  null):  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.multiply(null,  null):  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.multiply(null,  null):  NaN;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
320	[BUG]  [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.isNaN  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false,  isNaN  ||  factor.isNaN  +  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false,  isNaN  ||  factor.isNaN  +  1);	  MathUtils.checkState(isNaN    ||    factor.isNaN    +    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
321	[BUG]  [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	NegativeFactory.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
322	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	83	None	replace
323	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	83	None	replace
324	[BUG]  [BUGGY]  if(Divisor.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(denominator)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
325	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
326	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
327	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.naN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  ZERO;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
328	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  NONE;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.naN  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  NONE;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
329	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.divisor,  ZERO);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.divisor,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.divisor,  ZERO);	  Complex    real    =    getDivisor(factor.divisor);    	non-compiled	[CE]  not  a  statement	42	None	replace
330	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
331	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.value);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.value);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.value);	  Real    real    =    MathUtils.getNaN(divisor);    	non-compiled	[CE]  not  a  statement	10	None	replace
332	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(addend)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	37	None	replace
333	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator  -  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.denominator  -  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator  -  1);	  Complex    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	41	None	replace
334	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.divisor,  ZERO);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.divisor,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.divisor,  ZERO);	  Real    real    =    getDivisor(factor.divisor);    	non-compiled	[CE]  not  a  statement	20	None	replace
335	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  Na	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    Na    	non-compiled	[CE]  not  a  statement	99	None	replace
336	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    Na    	non-compiled	[CE]  not  a  statement	99	None	replace
337	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	66	None	replace
338	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	66	None	replace
339	[BUG]  [BUGGY]  MathUtils.checkState(false  ||  factor.isInfinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false  ||  factor.isInfinite);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false  ||  factor.isInfinite);	  MathUtils.checkState(isInfinite    ||    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	43	None	replace
340	[BUG]  [BUGGY]  return  isNaN?  factor.iNF  :  NONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.iNF  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.iNF  :  NONE;	  return    isNaN?    factor.iNF    :    NaN;    	non-compiled	[CE]  not  a  statement	38	None	replace
341	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO)+  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO)+  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ZERO)+  1;	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
342	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO  +  1);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ZERO  +  1);	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
343	[BUG]  [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(isNaN)?  NaN.valueOf(adjivisor):  ZERO;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    ZERO;    	non-compiled	[CE]  not  a  statement	21	None	replace
344	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
345	[BUG]  [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real,  ZERO);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getNaN(factor.real,  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getNaN(factor.real,  ZERO);	  Real    real    =    MathUtils.getNaN(factor.imaginary);    	non-compiled	[CE]  not  a  statement	86	None	replace
346	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	113	None	replace
347	[BUG]  [BUGGY]  if(Divisor.isInfinite(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(denominator)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
348	[BUG]  [BUGGY]  Return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Return  NaN  -  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  factor.p)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
349	[BUG]  [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.p)));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.p)));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.p)));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.p)));    	non-compiled	[CE]  not  a  statement	124	None	replace
350	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	37	None	replace
351	[BUG]  [BUGGY]  return  isNaN?  NONE  :  ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  NONE  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  NONE  :  ZERO;	  return    isNaN?    NaN    :    NONE;    	non-compiled	[CE]  not  a  statement	97	None	replace
352	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  NONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  NaN  :  NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  :  NONE;	  return    isNaN?    NaN    :    NONE;    	non-compiled	[CE]  not  a  statement	97	None	replace
353	[BUG]  [BUGGY]  return  NaN  -  factor.getDenimal();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.getDenimal();  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.getDenimal();	  return    NaN    -    factor.getDenominator();    	non-compiled	[CE]  not  a  statement	4	None	replace
354	[BUG]  [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
355	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor,  ZERO),  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor,  ZERO),  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor,  ZERO),  denominator);	  Real    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	70	None	replace
356	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getINF(),  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getINF(),  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getINF(),  denominator);	  Complex    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	91	None	replace
357	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.getINF(),  ZERO);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.getINF(),  ZERO);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.getINF(),  ZERO);	  Complex    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	91	None	replace
358	[BUG]  [BUGGY]  return  NaN  -  one;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  one;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  one;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
359	[BUG]  [BUGGY]  return  NaN  -  DELIMITER;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  DELIMITER;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  DELIMITER;	  return    NaN    -    ZERO;    	non-compiled	[CE]  not  a  statement	3	None	replace
360	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.real)-  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.real)-  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.real)-  1;	  Real    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	68	None	replace
361	[BUG]  [BUGGY]  return  NaN  -  factor.naN  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.naN  -  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN  -  1;	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
362	[BUG]  [BUGGY]  return  NaN  -  factor.naN,  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  factor.naN,  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  factor.naN,  ZERO;	  return    NaN    -    factor.naN;    	non-compiled	[CE]  not  a  statement	6	None	replace
363	[BUG]  [BUGGY]  MathUtils.checkState(fact.isNaN  ||  factor.isNaN);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(fact.isNaN  ||  factor.isNaN);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(fact.isNaN  ||  factor.isNaN);	  MathUtils.checkState(factor.isNaN    ||    factor.isNaN);    	non-compiled	[CE]  not  a  statement	48	None	replace
364	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  ONE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.naN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  ONE;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
365	[BUG]  [BUGGY]  return  isNaN?  factor.naN  :  NaN  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.naN  :  NaN  +  1;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.naN  :  NaN  +  1;	  return    isNaN?    factor.naN    :    NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
366	[BUG]  [BUGGY]  MathUtils.checkState(false, "NaN  isNaN ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false, "NaN  isNaN ");  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false, "NaN  isNaN ");	  MathUtils.checkState(isNaN    &&    factor.isNaN);    	non-compiled	[CE]  not  a  statement	46	None	replace
367	[BUG]  [BUGGY]  MathUtils.checkArgument(Divisor.isNaN(factor));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(Divisor.isNaN(factor));  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(Divisor.isNaN(factor));	  MathUtils.checkNotNull(denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
368	[BUG]  [BUGGY]  return  Negative.isNaN(false)?  NaN  :  ONE;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?  NaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?  NaN  :  ONE;	  return    Negative.isNaN(false)?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	104	None	replace
369	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	95	None	replace
370	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
371	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
372	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
373	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
374	[BUG]  [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NON_NONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  Negative.isNaN(false)?   "NaN "  :  NON_NONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  Negative.isNaN(false)?   "NaN "  :  NON_NONE;	  return    Negative.isNaN(false)?   "NaN   "    :    INF;    	non-compiled	[CE]  not  a  statement	105	None	replace
375	[BUG]  [BUGGY]  return  isNaN?  factor.isNaN  :  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN?  factor.isNaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN?  factor.isNaN  :  ONE;	  return    isNaN?    factor.isNaN    :    NaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
376	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
377	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  N;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
378	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
379	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
380	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	94	None	replace
381	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.getINF(),  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.getINF(),  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.getINF(),  denominator);	  Real    real    =    getDivisor(factor.getINF());    	non-compiled	[CE]  not  a  statement	111	None	replace
382	[BUG]  [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  null);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  createComplex(false,  factor.imaginary,  null);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  createComplex(false,  factor.imaginary,  null);	  Complex    real    =    createComplex(false,    factor.imaginary);    	non-compiled	[CE]  not  a  statement	79	None	replace
383	[BUG]  [BUGGY]  Real  real  =  getDivisor(factor.imaginary,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  getDivisor(factor.imaginary,  denominator);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  getDivisor(factor.imaginary,  denominator);	  Real    real    =    getDivisor(factor.imaginary);    	non-compiled	[CE]  not  a  statement	69	None	replace
384	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.denominator,  c);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.denominator,  c);	  Complex    real    =    getDivisor(factor.denominator);    	non-compiled	[CE]  not  a  statement	41	None	replace
385	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
386	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(imaginary))  {  return  INF;  }	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
387	[BUG]  [BUGGY]  return  NaN.valueOf(denominator)?  NaN.valueOf(adjivisor):  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(denominator)?  NaN.valueOf(adjivisor):  NaN;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(denominator)?  NaN.valueOf(adjivisor):  NaN;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    NaN;    	non-compiled	[CE]  not  a  statement	23	None	replace
388	[BUG]  [BUGGY]  MathUtils.checkState(false, "NaN  is  infinite ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false, "NaN  is  infinite ");  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false, "NaN  is  infinite ");	  MathUtils.checkState(isNaN    &&    factor.isInfinite);    	non-compiled	[CE]  not  a  statement	44	None	replace
389	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(factor)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	36	None	replace
390	[BUG]  [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
391	[BUG]  [BUGGY]  ||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  INF;  }	  ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
392	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO)-  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor,  ZERO)-  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor,  ZERO)-  1;	  Complex    real    =    getDivisor(factor,    ZERO);    	non-compiled	[CE]  not  a  statement	90	None	replace
393	[BUG]  [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(factor)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(factor)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	112	None	replace
394	[BUG]  [BUGGY]  MathUtils.checkState(false, "NaN ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkState(false, "NaN ");  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkState(false, "NaN ");	  MathUtils.checkNotNull(addend);    	non-compiled	[CE]  not  a  statement	102	None	replace
395	[BUG]  [BUGGY]  return  isNaN  ||  Complex.ONE;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  Complex.ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  Complex.ONE;	  return    isNaN?    NaN    :    Complex.ONE;    	non-compiled	[CE]  not  a  statement	56	None	replace
396	[BUG]  [BUGGY]  Complex  real  =  getDivisor(factor.real)-  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Complex  real  =  getDivisor(factor.real)-  1;  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Complex  real  =  getDivisor(factor.real)-  1;	  Complex    real    =    getDivisor(factor.real);    	non-compiled	[CE]  not  a  statement	89	None	replace
397	[BUG]  [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  Complex.ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  Complex.ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN.valueOf(adjivisor)?  NaN.valueOf(adjivisor):  Complex.ZERO;	  return    NaN.valueOf(adjivisor)?    NaN.valueOf(adjivisor):    null;    	non-compiled	[CE]  not  a  statement	22	None	replace
398	[BUG]  [BUGGY]  return  NaN  |  NaN  :  ZERO;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  |  NaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  |  NaN  :  ZERO;	  return    NaN?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	1	None	replace
399	[BUG]  [BUGGY]  MathUtils.checkArgument(Divisor.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(Divisor.isInfinite(factor.imaginary));  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(Divisor.isInfinite(factor.imaginary));	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  not  a  statement	84	None	replace
400	[BUG]  [BUGGY]  MathUtils.checkArgument(Divisor.isInfinite(imaginary));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  MathUtils.checkArgument(Divisor.isInfinite(imaginary));  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	MathUtils.checkArgument(Divisor.isInfinite(imaginary));	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  not  a  statement	84	None	replace
401	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    INF    	non-compiled	[CE]  not  a  statement	82	None	replace
402	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(real)||  Double.isInfinite(real))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(real)||  Double.isInfinite(real))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(real)||  Double.isInfinite(real))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
403	[BUG]  [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  ||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
404	[BUG]  [BUGGY]  return  NaN  -(infinite  *  factor.infinite)/(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(infinite  *  factor.infinite)/(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(infinite  *  factor.infinite)/(infinite  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
405	[BUG]  [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  infinite  *  factor.infinite);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  infinite  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(font.infinite  *  factor.infinite)+(imaginary  *  factor.infinite  +  infinite  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(infinite    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	72	None	replace
406	[BUG]  [BUGGY]  return  isNaN  ||  factor.infinite  :  INF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  factor.infinite  :  INF;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  factor.infinite  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	119	None	replace
407	[BUG]  [BUGGY]  Real  real  =  MathUtils.multiply(factor.real);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.multiply(factor.real);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.multiply(factor.real);	  Real    real    =    MathUtils.getNaN(imaginary);    	non-compiled	[CE]  not  a  statement	85	None	replace
408	[BUG]  [BUGGY]  Real  real  =  MathUtils.getImaginary(factor.real);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  Real  real  =  MathUtils.getImaginary(factor.real);  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	Real  real  =  MathUtils.getImaginary(factor.real);	  Real    real    =    MathUtils.getNaN(imaginary);    	non-compiled	[CE]  not  a  statement	85	None	replace
409	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.imaginary);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.imaginary);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)+(imaginary  *  factor.infinite  +  imaginary  *  factor.imaginary);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
410	[BUG]  [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)/(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -(imaginary  *  factor.infinite)/(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -(imaginary  *  factor.infinite)/(imaginary  *  factor.infinite  +  imaginary  *  factor.infinite);	  return    NaN    -(infinite    *    factor.infinite)+(imaginary    *    factor.infinite    +    imaginary    *    factor.infinite);    	non-compiled	[CE]  not  a  statement	73	None	replace
411	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  ONE;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  ||  NaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  ||  NaN  :  ONE;	  return    isNaN?    NaN    :    ONE;    	non-compiled	[CE]  not  a  statement	31	None	replace
412	[BUG]  [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  NaN  -  Math.pow(1,  Math.pow(1,  Math.pow(1,  Math.pow(1,  factor.peek())));	  return    NaN    -    Math.pow(10,    Math.pow(10,    Math.pow(10,    Math.pow(10,    factor.peek())));    	non-compiled	[CE]  not  a  statement	122	None	replace
413	[BUG]  [BUGGY]  return  isNaN  |  factor.isNaN  :  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  factor.isNaN  :  ZERO;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  factor.isNaN  :  ZERO;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
414	[BUG]  [BUGGY]  return  isNaN  |  factor.isNaN  :  ONE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  return  isNaN  |  factor.isNaN  :  ONE;  [BUGGY]      }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	return  isNaN  |  factor.isNaN  :  ONE;	  return    isNaN    |    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	32	None	replace
415	[BUG]  [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	92	None	replace
416	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)    	non-compiled	[CE]  not  a  statement	30	None	replace
417	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  Complex  multiply(Complex  factor)  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {      [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	419	419	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Divisor.isNaN(factor)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)    	non-compiled	[CE]  not  a  statement	30	None	replace
