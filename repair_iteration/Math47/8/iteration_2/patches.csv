bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  /  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  /  c);	  double    real    =    Math.abs(d    +    c);    	non-compiled	[CE]  not  a  statement	45	None	replace
2	[BUG]  [BUGGY]  double  real  =  Math.abs(d  *  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  *  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  *  c);	  double    real    =    Math.abs(d    +    c);    	non-compiled	[CE]  not  a  statement	45	None	replace
3	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  denominator  =  Math.abs(c);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  denominator  =  Math.abs(c);	  double    denominator    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	6	None	replace
4	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  +  c);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  denominator  =  Math.abs(d  +  c);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  denominator  =  Math.abs(d  +  c);	  double    denominator    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	6	None	replace
5	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  -  c);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  denominator  =  Math.abs(d  -  c);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  denominator  =  Math.abs(d  -  c);	  double    denominator    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  double  real  =  Math.abs(d)/  c  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d)/  c  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d)/  c  +  1;	  double    real    =    Math.abs(c)/    d    +    1;    	non-compiled	[CE]  not  a  statement	11	None	replace
7	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  d  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)/  d  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)/  d  +  2;	  double    real    =    Math.abs(c)/    d    +    1;    	non-compiled	[CE]  not  a  statement	11	None	replace
8	[BUG]  [BUGGY]  double  d  =  Math.pow(10,  Math.abs(d));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.pow(10,  Math.abs(d));  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.pow(10,  Math.abs(d));	  double    d    =    Math.pow(10,    Math.abs(c));    	non-compiled	[CE]  not  a  statement	54	None	replace
9	[BUG]  [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c  +  1));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c  +  1));  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.pow(10,  Math.abs(c  +  1));	  double    d    =    Math.pow(10,    Math.abs(c));    	non-compiled	[CE]  not  a  statement	54	None	replace
10	[BUG]  [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c)-  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c)-  1);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.pow(10,  Math.abs(c)-  1);	  double    d    =    Math.pow(10,    Math.abs(c));    	non-compiled	[CE]  not  a  statement	54	None	replace
11	[BUG]  [BUGGY]  double  c  =  d  /  divisor;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  divisor;	  double    c    =    d    /    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
12	[BUG]  [BUGGY]  Double  d  =  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(d  /  1);	  Double    d    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
13	[BUG]  [BUGGY]  Double  d  =  Math.abs(c  -  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(c  -  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(c  -  1);	  Double    d    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
14	[BUG]  [BUGGY]  Double  d  =  Math.abs(d  -  2);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(d  -  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(d  -  2);	  Double    d    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
15	[BUG]  [BUGGY]  double  d  =  Math.abs(c  /  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  /  1);	  double    d    =    Math.abs(c    +    1);    	non-compiled	[CE]  not  a  statement	32	None	replace
16	[BUG]  [BUGGY]  double  d  =  Math.abs(c  *  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  *  1);	  double    d    =    Math.abs(c    +    1);    	non-compiled	[CE]  not  a  statement	32	None	replace
17	[BUG]  [BUGGY]  double  d  =  c  *  d  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  *  d  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  *  d  +  1;	  double    d    =    c    *    d;    	non-compiled	[CE]  not  a  statement	52	None	replace
18	[BUG]  [BUGGY]  double  d  =  c  *  d  +  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  *  d  +  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  *  d  +  c;	  double    d    =    c    *    d;    	non-compiled	[CE]  not  a  statement	52	None	replace
19	[BUG]  [BUGGY]  double  d  =  d  *  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  d  *  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  d  *  c;	  double    d    =    c    *    d;    	non-compiled	[CE]  not  a  statement	52	None	replace
20	[BUG]  [BUGGY]  double  d  =  d  /  c  +  3;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  d  /  c  +  3;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  d  /  c  +  3;	  double    d    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
21	[BUG]  [BUGGY]  Double  d  =  Math.abs(c  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(c  +  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(c  +  1);	  Double    d    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	7	None	replace
22	[BUG]  [BUGGY]  double  real  =  Math.abs(c  *  d);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c  *  d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c  *  d);	  double    real    =    Math.abs(c    -    d);    	non-compiled	[CE]  not  a  statement	18	None	replace
23	[BUG]  [BUGGY]  double  d  =  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d  /  1);	  double    d    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	1	None	replace
24	[BUG]  [BUGGY]  double  d  =  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d  *  1);	  double    d    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	1	None	replace
25	[BUG]  [BUGGY]  double  d  =  Math.abs(d  +  2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d  +  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d  +  2);	  double    d    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  double  q  =  c  *  d  +  2;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  d  +  2;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  d  +  2;	  double    q    =    c    *    d    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
27	[BUG]  [BUGGY]  Double  c  =  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.abs(d  /  1);	  Double    c    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	36	None	replace
28	[BUG]  [BUGGY]  Double  c  =  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.abs(d  *  1);	  Double    c    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	36	None	replace
29	[BUG]  [BUGGY]  Double  c  =  Math.abs(d  +  2);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.abs(d  +  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.abs(d  +  2);	  Double    c    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	36	None	replace
30	[BUG]  [BUGGY]  double  q  =  d  *  d  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  d  +  1;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  d  +  1;	  double    q    =    d    *    d    +    2;    	non-compiled	[CE]  not  a  statement	50	None	replace
31	[BUG]  [BUGGY]  Double  c  =  Math.abs(d  -  2);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.abs(d  -  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.abs(d  -  2);	  Double    c    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	51	None	replace
32	[BUG]  [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)-  Math.abs(d  /  1);	  double    d    =    Math.abs(c)-    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
33	[BUG]  [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)-  Math.abs(d  *  1);	  double    d    =    Math.abs(c)-    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
34	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  -  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  -  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  Math.abs(d  -  1);	  double    d    =    Math.abs(c)-    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
35	[BUG]  [BUGGY]  double  real  =  Math.abs(c  /  d  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c  /  d  +  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c  /  d  +  1);	  double    real    =    Math.abs(c    /    d);    	non-compiled	[CE]  not  a  statement	20	None	replace
36	[BUG]  [BUGGY]  double  d  =  divisor  /  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  divisor  /  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  divisor  /  c;	  double    d    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	17	None	replace
37	[BUG]  [BUGGY]  double  d  =  c  /  divisor.getDivisor();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  divisor.getDivisor();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  divisor.getDivisor();	  double    d    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	17	None	replace
38	[BUG]  [BUGGY]  double  d  =  c  /  divisor.getDenominator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  divisor.getDenominator();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  divisor.getDenominator();	  double    d    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	17	None	replace
39	[BUG]  [BUGGY]  double  c  =  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(d  /  1);	  double    c    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	4	None	replace
40	[BUG]  [BUGGY]  double  c  =  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(d  *  1);	  double    c    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	4	None	replace
41	[BUG]  [BUGGY]  Double  c  =  Math.min(c,  FastMath.abs(d));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.min(c,  FastMath.abs(d));  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.min(c,  FastMath.abs(d));	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
42	[BUG]  [BUGGY]  Double  c  =  Math.max(c,  FastMath.abs(d));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.max(c,  FastMath.abs(d));  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.max(c,  FastMath.abs(d));	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
43	[BUG]  [BUGGY]  Double  c  =  Math.max(d,  c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.max(d,  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.max(d,  c);	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
44	[BUG]  [BUGGY]  double  c  =  d  *  c  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  c  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  c  +  1;	  double    c    =    d    *    c;    	non-compiled	[CE]  not  a  statement	24	None	replace
45	[BUG]  [BUGGY]  double  c  =  d  *  c  +  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  c  +  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  c  +  c;	  double    c    =    d    *    c;    	non-compiled	[CE]  not  a  statement	24	None	replace
46	[BUG]  [BUGGY]  double  c  =  d  *  c  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  c  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  c  +  2;	  double    c    =    d    *    c;    	non-compiled	[CE]  not  a  statement	24	None	replace
47	[BUG]  [BUGGY]  double  q  =  d  *  c  +  c;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  c  +  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  c  +  c;	  double    q    =    d    *    c    +    1;    	non-compiled	[CE]  not  a  statement	39	None	replace
48	[BUG]  [BUGGY]  double  d  =  FastMath.abs(d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  FastMath.abs(d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  FastMath.abs(d);	  double    d    =    FastMath.abs(c);    	non-compiled	[CE]  not  a  statement	5	None	replace
49	[BUG]  [BUGGY]  double  d  =  FastMath.abs(c  +  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  FastMath.abs(c  +  1);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  FastMath.abs(c  +  1);	  double    d    =    FastMath.abs(c);    	non-compiled	[CE]  not  a  statement	5	None	replace
50	[BUG]  [BUGGY]  double  c  =  FastMath.abs(c);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  FastMath.abs(c);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  FastMath.abs(c);	  double    d    =    FastMath.abs(c);    	non-compiled	[CE]  not  a  statement	5	None	replace
51	[BUG]  [BUGGY]  double  c  =  d  /  c  +  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  c  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  c  +  2;	  double    c    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	23	None	replace
52	[BUG]  [BUGGY]  double  c  =  d  /  c  +  3;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  c  +  3;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  c  +  3;	  double    c    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	23	None	replace
53	[BUG]  [BUGGY]  double  c  =  d  /  d.doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  d.doubleValue()  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  d.doubleValue()  +  1;	  double    c    =    d    /    d.doubleValue();    	non-compiled	[CE]  not  a  statement	49	None	replace
54	[BUG]  [BUGGY]  double  c  =  d  *  d.doubleValue();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  d.doubleValue();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  d.doubleValue();	  double    c    =    d    /    d.doubleValue();    	non-compiled	[CE]  not  a  statement	49	None	replace
55	[BUG]  [BUGGY]  double  c  =  d  /  c.doubleValue();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  c.doubleValue();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  c.doubleValue();	  double    c    =    d    /    d.doubleValue();    	non-compiled	[CE]  not  a  statement	49	None	replace
56	[BUG]  [BUGGY]  double  q  =  d  *  q;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  q;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  q;	  double    q    =    c    *    q;    	non-compiled	[CE]  not  a  statement	44	None	replace
57	[BUG]  [BUGGY]  double  q  =  c  *  q  +  c;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  q  +  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  q  +  c;	  double    q    =    c    *    q;    	non-compiled	[CE]  not  a  statement	44	None	replace
58	[BUG]  [BUGGY]  double  real  =  Math.abs(c  /  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c  /  1);	  double    real    =    Math.abs(c    -    1);    	non-compiled	[CE]  not  a  statement	19	None	replace
59	[BUG]  [BUGGY]  double  real  =  d  *  Math.abs(c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  d  *  Math.abs(c);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  d  *  Math.abs(c);	  double    real    =    c    *    Math.abs(d);    	non-compiled	[CE]  not  a  statement	46	None	replace
60	[BUG]  [BUGGY]  double  real  =  c  *  Math.log(d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  c  *  Math.log(d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  c  *  Math.log(d);	  double    real    =    c    *    Math.abs(d);    	non-compiled	[CE]  not  a  statement	46	None	replace
61	[BUG]  [BUGGY]  double  real  =  Math.abs(c)*  Math.abs(d);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)*  Math.abs(d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)*  Math.abs(d);	  double    real    =    c    *    Math.abs(d);    	non-compiled	[CE]  not  a  statement	46	None	replace
62	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  /  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  /  1);	  double    real    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	38	None	replace
63	[BUG]  [BUGGY]  double  real  =  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  *  1);	  double    real    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	38	None	replace
64	[BUG]  [BUGGY]  double  real  =  Math.abs(d)/  divisor;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d)/  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d)/  divisor;	  double    real    =    Math.abs(c)/    divisor;    	non-compiled	[CE]  not  a  statement	12	None	replace
65	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c)/  divisor;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  /  c)/  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  /  c)/  divisor;	  double    real    =    Math.abs(c)/    divisor;    	non-compiled	[CE]  not  a  statement	12	None	replace
66	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  divisor.getReal();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)/  divisor.getReal();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)/  divisor.getReal();	  double    real    =    Math.abs(c)/    divisor;    	non-compiled	[CE]  not  a  statement	12	None	replace
67	[BUG]  [BUGGY]  double  c  =  Math.min(c,  FastMath.abs(d));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.min(c,  FastMath.abs(d));  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.min(c,  FastMath.abs(d));	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
68	[BUG]  [BUGGY]  double  c  =  Math.abs(d  +  c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(d  +  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(d  +  c);	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
69	[BUG]  [BUGGY]  double  c  =  Math.abs(c  -  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(c  -  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(c  -  1);	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
70	[BUG]  [BUGGY]  double  real  =  Math.log(d)/  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.log(d)/  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.log(d)/  c;	  double    real    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
71	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  +  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  Math.abs(d  +  1);	  double    d    =    Math.abs(c)-    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
72	[BUG]  [BUGGY]  Double  d  =  Math.abs(d  *  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(d  *  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(d  *  1);	  Double    d    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	8	None	replace
73	[BUG]  [BUGGY]  Double  d  =  Math.abs(d  +  2);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(d  +  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(d  +  2);	  Double    d    =    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	8	None	replace
74	[BUG]  [BUGGY]  double  imaginary  =  Math.abs(d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  imaginary  =  Math.abs(d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  imaginary  =  Math.abs(d);	  double    imaginary    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
75	[BUG]  [BUGGY]  double  imaginary  =  Math.abs(c  +  d);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  imaginary  =  Math.abs(c  +  d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  imaginary  =  Math.abs(c  +  d);	  double    imaginary    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
76	[BUG]  [BUGGY]  double  imaginary  =  Math.abs(c  -  d);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  imaginary  =  Math.abs(c  -  d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  imaginary  =  Math.abs(c  -  d);	  double    imaginary    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
77	[BUG]  [BUGGY]  double  q  =  d  *  q  +  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  q  +  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  q  +  c;	  double    q    =    c    *    q    +    d;    	non-compiled	[CE]  not  a  statement	43	None	replace
78	[BUG]  [BUGGY]  double  q  =  c  *  q  +  d  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  q  +  d  +  1;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  q  +  d  +  1;	  double    q    =    c    *    q    +    d;    	non-compiled	[CE]  not  a  statement	43	None	replace
79	[BUG]  [BUGGY]  double  d  =  c  /  d  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  d  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  d  +  2;	  double    d    =    d    /    c    +    2;    	non-compiled	[CE]  not  a  statement	34	None	replace
80	[BUG]  [BUGGY]  double  d  =  d  *  c  +  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  d  *  c  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  d  *  c  +  2;	  double    d    =    d    /    c    +    2;    	non-compiled	[CE]  not  a  statement	34	None	replace
81	[BUG]  [BUGGY]  double  q  =  d  /  divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  /  divisor;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  /  divisor;	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
82	[BUG]  [BUGGY]  double  q  =  divisor  /  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  divisor  /  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  divisor  /  c;	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
83	[BUG]  [BUGGY]  double  q  =  c  *  divisor;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  divisor;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  divisor;	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
84	[BUG]  [BUGGY]  double  d  =  Math.abs(d)/  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d)/  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d)/  c;	  double    d    =    Math.abs(c)/    d;    	non-compiled	[CE]  not  a  statement	53	None	replace
85	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  divisor;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  divisor;	  double    d    =    Math.abs(c)/    d;    	non-compiled	[CE]  not  a  statement	53	None	replace
86	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  d  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  d  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  d  +  1;	  double    d    =    Math.abs(c)/    d;    	non-compiled	[CE]  not  a  statement	53	None	replace
87	[BUG]  [BUGGY]  double  d  =  Math.abs(d  -  2);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d  -  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d  -  2);	  double    d    =    Math.abs(d    -    1);    	non-compiled	[CE]  not  a  statement	2	None	replace
88	[BUG]  [BUGGY]  double  c  =  d  /  d  +  2;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  d  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  d  +  2;	  double    c    =    d    /    d    +    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
89	[BUG]  [BUGGY]  double  c  =  d  /  d  +  3;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  d  +  3;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  d  +  3;	  double    c    =    d    /    d    +    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
90	[BUG]  [BUGGY]  double  c  =  d  *  d  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  d  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  d  +  1;	  double    c    =    d    /    d    +    1;    	non-compiled	[CE]  not  a  statement	48	None	replace
91	[BUG]  [BUGGY]  double  d  =  Math.abs(c  /  2);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  /  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  /  2);	  double    d    =    Math.abs(c    -    2);    	non-compiled	[CE]  not  a  statement	41	None	replace
92	[BUG]  [BUGGY]  double  d  =  Math.abs(c  *  2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  *  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  *  2);	  double    d    =    Math.abs(c    -    2);    	non-compiled	[CE]  not  a  statement	41	None	replace
93	[BUG]  [BUGGY]  double  d  =  c  /  d  +  3;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  d  +  3;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  d  +  3;	  double    d    =    c    /    d    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
94	[BUG]  [BUGGY]  double  d  =  Math.abs(d)/  Math.abs(c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d)/  Math.abs(c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d)/  Math.abs(c);	  double    d    =    Math.abs(c)/    Math.abs(d);    	non-compiled	[CE]  not  a  statement	25	None	replace
95	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d,  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d,  1);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  Math.abs(d,  1);	  double    d    =    Math.abs(c)/    Math.abs(d);    	non-compiled	[CE]  not  a  statement	25	None	replace
96	[BUG]  [BUGGY]  double  q  =  d  /  c  +  3;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  /  c  +  3;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  /  c  +  3;	  double    q    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	21	None	replace
97	[BUG]  [BUGGY]  double  d  =  c  /  divisor  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  divisor  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  divisor  +  1;	  double    d    =    c    /    d    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
98	[BUG]  [BUGGY]  double  d  =  d  *  c  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  d  *  c  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  d  *  c  +  1;	  double    d    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
99	[BUG]  [BUGGY]  double  d  =  c  /  divisor.getReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  /  divisor.getReal();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  /  divisor.getReal();	  double    d    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	17	None	replace
100	[BUG]  [BUGGY]  double  q  =  d  *  d  +  c;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  d  +  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  d  +  c;	  double    q    =    d    *    d    +    2;    	non-compiled	[CE]  not  a  statement	50	None	replace
101	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  divisor.getReal()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)/  divisor.getReal()  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)/  divisor.getReal()  +  1;	  double    real    =    Math.abs(c)/    d    +    1;    	non-compiled	[CE]  not  a  statement	11	None	replace
102	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  divisor  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)/  divisor  +  1;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)/  divisor  +  1;	  double    real    =    Math.abs(c)/    d    +    1;    	non-compiled	[CE]  not  a  statement	11	None	replace
103	[BUG]  [BUGGY]  double  imaginary  =  Math.abs(c  -  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  imaginary  =  Math.abs(c  -  1);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  imaginary  =  Math.abs(c  -  1);	  double    imaginary    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
104	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(Divisor.NaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(Divisor.NaN);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  Math.abs(Divisor.NaN);	  double    d    =    Math.abs(c)/    Math.abs(d);    	non-compiled	[CE]  not  a  statement	25	None	replace
105	[BUG]  [BUGGY]  double  q  =  d  *  c  +  3;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  *  c  +  3;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  *  c  +  3;	  double    q    =    d    *    c    +    2;    	non-compiled	[CE]  not  a  statement	29	None	replace
106	[BUG]  [BUGGY]  double  q  =  c  *  q  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  q  +  1;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  q  +  1;	  double    q    =    c    *    d    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
107	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c)/  divisor.getImaginary();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c)/  divisor.getImaginary();	  double    real    =    Math.abs(c)/    divisor;    	non-compiled	[CE]  not  a  statement	12	None	replace
108	[BUG]  [BUGGY]  double  c  =  d  *  d  +  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  d  +  c;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  d  +  c;	  double    c    =    d    *    c;    	non-compiled	[CE]  not  a  statement	24	None	replace
109	[BUG]  [BUGGY]  double  c  =  d  *  c  +  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  c  +  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  c  +  d;	  double    c    =    d    *    c;    	non-compiled	[CE]  not  a  statement	24	None	replace
110	[BUG]  [BUGGY]  double  d  =  d  /  c  *  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  d  /  c  *  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  d  /  c  *  2;	  double    d    =    d    /    c    +    2;    	non-compiled	[CE]  not  a  statement	34	None	replace
111	[BUG]  [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  +  2);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)-  Math.abs(d  +  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)-  Math.abs(d  +  2);	  double    d    =    Math.abs(c)-    Math.abs(d    +    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
112	[BUG]  [BUGGY]  double  c  =  d  /  divisor.doubleValue();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  /  divisor.doubleValue();  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  /  divisor.doubleValue();	  double    c    =    d    /    d.doubleValue();    	non-compiled	[CE]  not  a  statement	49	None	replace
113	[BUG]  [BUGGY]  double  q  =  d  /  c  *  2;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  /  c  *  2;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  /  c  *  2;	  double    q    =    d    /    c    +    2;    	non-compiled	[CE]  not  a  statement	28	None	replace
114	[BUG]  [BUGGY]  double  real  =  Math.abs(c  -  2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c  -  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c  -  2);	  double    real    =    Math.abs(c    -    1);    	non-compiled	[CE]  not  a  statement	19	None	replace
115	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  denominator;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  denominator;	  double    d    =    Math.abs(c)/    d;    	non-compiled	[CE]  not  a  statement	53	None	replace
116	[BUG]  [BUGGY]  double  d  =  Math.abs(d)/  divisor;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d)/  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d)/  divisor;	  double    d    =    Math.abs(c)/    d;    	non-compiled	[CE]  not  a  statement	53	None	replace
117	[BUG]  [BUGGY]  Double  c  =  Math.sqrt(d);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.sqrt(d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.sqrt(d);	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
118	[BUG]  [BUGGY]  Double  c  =  Math.abs(d  +  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.abs(d  +  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.abs(d  +  c);	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
119	[BUG]  [BUGGY]  double  d  =  c  *  d  +  2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  *  d  +  2;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  *  d  +  2;	  double    d    =    c    *    d;    	non-compiled	[CE]  not  a  statement	52	None	replace
120	[BUG]  [BUGGY]  double  c  =  Math.abs(DivisorMath.abs(d));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(DivisorMath.abs(d));  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(DivisorMath.abs(d));	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
121	[BUG]  [BUGGY]  double  c  =  Math.sqrt(d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.sqrt(d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.sqrt(d);	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
122	[BUG]  [BUGGY]  double  q  =  c  /  divisor.getQualifiedName();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  /  divisor.getQualifiedName();  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  /  divisor.getQualifiedName();	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
123	[BUG]  [BUGGY]  double  q  =  c  /  divisor.getReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  /  divisor.getReal();  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  /  divisor.getReal();	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
124	[BUG]  [BUGGY]  double  real  =  c  *  Math.sqrt(d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  c  *  Math.sqrt(d);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  c  *  Math.sqrt(d);	  double    real    =    c    *    Math.abs(d);    	non-compiled	[CE]  not  a  statement	46	None	replace
125	[BUG]  [BUGGY]  Double  d  =  Math.abs(c  -  2);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  d  =  Math.abs(c  -  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  d  =  Math.abs(c  -  2);	  Double    d    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	7	None	replace
126	[BUG]  [BUGGY]  double  real  =  Math.abs(c  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(c  d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(c  d);	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	37	None	replace
127	[BUG]  [BUGGY]  double  d  =  c  *  divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  c  *  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  c  *  divisor;	  double    d    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	17	None	replace
128	[BUG]  [BUGGY]  double  q  =  Math.pow(10,  c)*  c;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  Math.pow(10,  c)*  c;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  Math.pow(10,  c)*  c;	  double    q    =    c    *    c;    	non-compiled	[CE]  not  a  statement	30	None	replace
129	[BUG]  [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  +  2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c)/  Math.abs(d  +  2);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c)/  Math.abs(d  +  2);	  double    d    =    Math.abs(c)/    Math.abs(d);    	non-compiled	[CE]  not  a  statement	25	None	replace
130	[BUG]  [BUGGY]  double  d  =  Math.abs(c  -  d);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  -  d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  -  d);	  double    real    =    Math.abs(c    -    d);    	non-compiled	[CE]  not  a  statement	18	None	replace
131	[BUG]  [BUGGY]  double  d  =  Math.abs(c  /  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(c  /  d);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(c  /  d);	  double    real    =    Math.abs(c    /    d);    	non-compiled	[CE]  not  a  statement	20	None	replace
132	[BUG]  [BUGGY]  double  c  =  Math.abs(d)/  divisor;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.abs(d)/  divisor;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.abs(d)/  divisor;	  double    real    =    Math.abs(c)/    divisor;    	non-compiled	[CE]  not  a  statement	12	None	replace
133	[BUG]  [BUGGY]  double  q  =  c  *  d  +  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  *  d  +  d;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  *  d  +  d;	  double    q    =    c    *    q    +    d;    	non-compiled	[CE]  not  a  statement	43	None	replace
134	[BUG]  [BUGGY]  Double  c  =  Math.min(d,  c);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  Double  c  =  Math.min(d,  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	Double  c  =  Math.min(d,  c);	  Double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	35	None	replace
135	[BUG]  [BUGGY]  double  q  =  c  /  q;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  c  /  q;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  c  /  q;	  double    q    =    c    *    q;    	non-compiled	[CE]  not  a  statement	44	None	replace
136	[BUG]  [BUGGY]  double  c  =  Math.max(d,  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  Math.max(d,  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  Math.max(d,  c);	  double    c    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	3	None	replace
137	[BUG]  [BUGGY]  double  d  =  Math.abs(d  /  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.abs(d  /  c);  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.abs(d  /  c);	  double    real    =    Math.abs(d    +    c);    	non-compiled	[CE]  not  a  statement	45	None	replace
138	[BUG]  [BUGGY]  double  q  =  d  /  Divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  q  =  d  /  Divisor;  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  q  =  d  /  Divisor;	  double    q    =    c    /    divisor;    	non-compiled	[CE]  not  a  statement	40	None	replace
139	[BUG]  [BUGGY]  double  c  =  d  *  d;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  c  =  d  *  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  c  =  d  *  d;	  double    c    =    d    /    d;    	non-compiled	[CE]  not  a  statement	22	None	replace
140	[BUG]  [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c  -  1));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  Math.pow(10,  Math.abs(c  -  1));  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  Math.pow(10,  Math.abs(c  -  1));	  double    d    =    Math.pow(10,    Math.abs(c));    	non-compiled	[CE]  not  a  statement	54	None	replace
141	[BUG]  [BUGGY]  double  real  =  Math.abs(d  -  c)/  d;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  real  =  Math.abs(d  -  c)/  d;  [BUGGY]      double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  real  =  Math.abs(d  -  c)/  d;	  double    real    =    Math.abs(d)/    c;    	non-compiled	[CE]  not  a  statement	10	None	replace
142	[BUG]  [BUGGY]  double  d  =  FastMath.abs(c  -  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {      [BUGGY]  double  d  =  FastMath.abs(c  -  1);  [BUGGY]      double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	268	268	2	replace	double  d  =  FastMath.abs(c  -  1);	  double    d    =    FastMath.abs(c);    	non-compiled	[CE]  not  a  statement	5	None	replace
