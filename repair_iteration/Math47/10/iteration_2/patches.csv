bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  real  =(d  *  c)/  divisor.getDenominator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(d  *  c)/  divisor.getDenominator();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  *  c)/  divisor.getDenominator();	  double    real    =(d    *    c)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	7	None	replace
2	[BUG]  [BUGGY]  double  real  =  d  /  q;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  /  q;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  q;	  double    real    =    c    /    q;    	non-compiled	[CE]  not  a  statement	63	None	replace
3	[BUG]  [BUGGY]  double  real  =  c  /  divisor;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor;	  double    real    =    c    /    q;    	non-compiled	[CE]  not  a  statement	63	None	replace
4	[BUG]  [BUGGY]  double  real  =  Math.max(d,  denominator,  c);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  denominator,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  denominator,  c);	  double    real    =    Math.max(c,    denominator,    d);    	non-compiled	[CE]  not  a  statement	27	None	replace
5	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d,  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d,  denominator);	  double    real    =    Math.max(c,    denominator,    d);    	non-compiled	[CE]  not  a  statement	27	None	replace
6	[BUG]  [BUGGY]  (real  *  q  -  real)/  denominator,  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  real)/  denominator,  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  real)/  denominator,  denominator;	  (real    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	39	None	replace
7	[BUG]  [BUGGY]  (real  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  imaginary)/  denominator;	  (real    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	39	None	replace
8	[BUG]  [BUGGY]  (real  *  q  -  denominator)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  denominator)/  denominator;	  (imaginary    *    q    -    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	47	None	replace
9	[BUG]  [BUGGY]  (divisor  *  q  -  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  -  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  denominator)/  denominator;	  (imaginary    *    q    -    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	47	None	replace
10	[BUG]  [BUGGY]  (denominator  *  q  -  denominator)/  divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (denominator  *  q  -  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(denominator  *  q  -  denominator)/  divisor;	  (imaginary    *    q    -    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	47	None	replace
11	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  2);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  2);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  2);	  double    real    =    Math.max(c,    denominator    *    q    +    1);    	non-compiled	[CE]  not  a  statement	31	None	replace
12	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  /  q  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  /  q  +  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  /  q  +  1);	  double    real    =    Math.max(c,    denominator    *    q    +    1);    	non-compiled	[CE]  not  a  statement	31	None	replace
13	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  3);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  3);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  3);	  double    real    =    Math.max(c,    denominator    *    q    +    1);    	non-compiled	[CE]  not  a  statement	31	None	replace
14	[BUG]  [BUGGY]  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	78	None	replace
15	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c  /  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(c  /  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(c  /  d);	  double    denominator    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
16	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  /  c,  denominator);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(d  /  c,  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  /  c,  denominator);	  double    denominator    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
17	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  /  c  +  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(d  /  c  +  1);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  /  c  +  1);	  double    denominator    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  (real  *  q  +  denominator)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  denominator)/  denominator;	  (imaginary    *    q    +    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	37	None	replace
19	[BUG]  [BUGGY]  (divisor  *  q  +  denominator)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  denominator)/  denominator;	  (imaginary    *    q    +    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	37	None	replace
20	[BUG]  [BUGGY]  (denominator  *  q  +  denominator)/  divisor;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (denominator  *  q  +  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(denominator  *  q  +  denominator)/  divisor;	  (imaginary    *    q    +    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	37	None	replace
21	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c)/  denominator;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  /  c)/  denominator;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  /  c)/  denominator;	  double    real    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c,  denominator);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  /  c,  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  /  c,  denominator);	  double    real    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  double  real  =  Math.abs(c  /  d);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(c  /  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c  /  d);	  double    real    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	11	None	replace
24	[BUG]  [BUGGY]  double  real  =  c  /  d  +  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  d  +  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  d  +  denominator;	  double    real    =    d    /    c    +    denominator;    	non-compiled	[CE]  not  a  statement	53	None	replace
25	[BUG]  [BUGGY]  double  real  =  d  *  c  +  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  c  +  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  c  +  denominator;	  double    real    =    d    /    c    +    denominator;    	non-compiled	[CE]  not  a  statement	53	None	replace
26	[BUG]  [BUGGY]  double  real  =  c  *  d  +  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  d  +  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  d  +  denominator;	  double    real    =    d    /    c    +    denominator;    	non-compiled	[CE]  not  a  statement	53	None	replace
27	[BUG]  [BUGGY]  double  real  =  Math.max(d,  denominator  *  q  +  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  denominator  *  q  +  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  denominator  *  q  +  c);	  double    real    =    Math.max(c,    denominator    *    q    +    d);    	non-compiled	[CE]  not  a  statement	67	None	replace
28	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  q  +  denominator);	  double    real    =    Math.max(c,    denominator    *    q    +    d);    	non-compiled	[CE]  not  a  statement	67	None	replace
29	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  d,  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  d,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  d,  c);	  double    real    =    Math.max(c,    denominator    *    q    +    d);    	non-compiled	[CE]  not  a  statement	67	None	replace
30	[BUG]  [BUGGY]  double  real  =  Math.log(c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.log(c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.log(c);	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
31	[BUG]  [BUGGY]  double  real  =  Math.log(d,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.log(d,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.log(d,  denominator);	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
32	[BUG]  [BUGGY]  double  real  =  Math.rint(d);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.rint(d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.rint(d);	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
33	[BUG]  [BUGGY]  double  real  =  Math.log(d,  c);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.log(d,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.log(d,  c);	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
34	[BUG]  [BUGGY]  double  real  =  Math.min(d,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(d,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(d,  denominator);	  double    real    =    Math.max(d,    denominator);    	non-compiled	[CE]  not  a  statement	50	None	replace
35	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  /  q,  d);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  /  q,  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  /  q,  d);	  double    real    =    Math.max(c,    denominator    /    q);    	non-compiled	[CE]  not  a  statement	32	None	replace
36	[BUG]  [BUGGY]  double  real  =  c  /  d  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  d  +  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  d  +  1;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
37	[BUG]  [BUGGY]  double  real  =  d  *  c  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  c  +  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  c  +  1;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
38	[BUG]  [BUGGY]  double  real  =  d  /  c  +  2;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  /  c  +  2;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  c  +  2;	  double    real    =    d    /    c    +    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
39	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    c    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	26	None	replace
40	[BUG]  [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    c    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	14	None	replace
41	[BUG]  [BUGGY]  double  real  =  Math.abs(c  -  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(c  -  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c  -  d);	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	49	None	replace
42	[BUG]  [BUGGY]  double  real  =  Math.abs(d  -  c,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  -  c,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  -  c,  denominator);	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	49	None	replace
43	[BUG]  [BUGGY]  double  real  =  Math.abs(d  *  c);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  *  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  *  c);	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	49	None	replace
44	[BUG]  [BUGGY]  (denominator  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (denominator  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(denominator  *  q  -  real)/  denominator;	  (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	38	None	replace
45	[BUG]  [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  denominator  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  denominator  :  Math.pow(10,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  <  0)?  Math.pow(10,  c)/  denominator  :  Math.pow(10,  d);	  double    real    =(d    <    0)?    Math.pow(10,    d)/    c    :    Math.pow(10,    d);    	non-compiled	[CE]  not  a  statement	85	None	replace
46	[BUG]  [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  d  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  d  :  Math.pow(10,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  <  0)?  Math.pow(10,  c)/  d  :  Math.pow(10,  d);	  double    real    =(d    <    0)?    Math.pow(10,    d)/    c    :    Math.pow(10,    d);    	non-compiled	[CE]  not  a  statement	85	None	replace
47	[BUG]  [BUGGY]  double  real  =(c  <  0)?  Math.pow(10,  d)/  d  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  <  0)?  Math.pow(10,  d)/  d  :  Math.pow(10,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  <  0)?  Math.pow(10,  d)/  d  :  Math.pow(10,  d);	  double    real    =(d    <    0)?    Math.pow(10,    d)/    c    :    Math.pow(10,    d);    	non-compiled	[CE]  not  a  statement	85	None	replace
48	[BUG]  [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  q  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  c)/  q  :  Math.pow(10,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  <  0)?  Math.pow(10,  c)/  q  :  Math.pow(10,  d);	  double    real    =(d    <    0)?    Math.pow(10,    d)/    c    :    Math.pow(10,    d);    	non-compiled	[CE]  not  a  statement	85	None	replace
49	[BUG]  [BUGGY]  (real  *  q  +  denominator)/  divisor;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  denominator)/  divisor;	  (imaginary    *    q    +    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	16	None	replace
50	[BUG]  [BUGGY]  (divisor  *  q  +  denominator)/  divisor;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  denominator)/  divisor;	  (imaginary    *    q    +    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	16	None	replace
51	[BUG]  [BUGGY]  (divisor  *  q  +  denominator)/  imaginary;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  denominator)/  imaginary;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  denominator)/  imaginary;	  (imaginary    *    q    +    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	16	None	replace
52	[BUG]  [BUGGY]  double  real  =  divisor  /  c.getReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor  /  c.getReal();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  /  c.getReal();	  double    real    =    c    /    divisor.getReal();    	non-compiled	[CE]  not  a  statement	44	None	replace
53	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor.getDenominator();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getDenominator();	  double    real    =    c    /    divisor.getReal();    	non-compiled	[CE]  not  a  statement	44	None	replace
54	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c  -  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(c  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(c  -  d);	  double    denominator    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	10	None	replace
55	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  *  c);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(d  *  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  *  c);	  double    denominator    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	10	None	replace
56	[BUG]  [BUGGY]  double  denominator  =  Math.abs(denominator  -  c);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(denominator  -  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(denominator  -  c);	  double    denominator    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	10	None	replace
57	[BUG]  [BUGGY]  double  real  =  divisor  /  d.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor  /  d.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  /  d.getImaginary();	  double    real    =    d    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	46	None	replace
58	[BUG]  [BUGGY]  double  real  =  d  /  divisor.getReal();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  /  divisor.getReal();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  divisor.getReal();	  double    real    =    d    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	46	None	replace
59	[BUG]  [BUGGY]  double  real  =  d  *  divisor.getImaginary();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  divisor.getImaginary();	  double    real    =    d    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	46	None	replace
60	[BUG]  [BUGGY]  (real  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  imaginary)/  denominator;	  (real    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	17	None	replace
61	[BUG]  [BUGGY]  (real  *  q  +  real)/  denominator,  denominator;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  real)/  denominator,  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  real)/  denominator,  denominator;	  (real    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	17	None	replace
62	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator,  c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator,  c);	  double    real    =    Math.max(c,    denominator,    c);    	non-compiled	[CE]  not  a  statement	29	None	replace
63	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  divisor);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  divisor);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  divisor);	  return    createComplex((    double    *    q    +    real)/    denominator,    (imaginary    *    q    -    imaginary)/    denominator);    	non-compiled	[CE]  not  a  statement	22	None	replace
64	[BUG]  [BUGGY]  double  real  =  Math.max(real,  c  /  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  c  /  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  c  /  denominator);	  double    real    =    Math.max(real,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	51	None	replace
65	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator  *  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  denominator  *  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator  *  c);	  double    real    =    Math.max(real,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	51	None	replace
66	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d  *  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  denominator);	  double    real    =    Math.max(c,    q    *    denominator);    	non-compiled	[CE]  not  a  statement	84	None	replace
67	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c  *  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c  *  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c  *  denominator);	  double    real    =    Math.max(c,    q    *    denominator);    	non-compiled	[CE]  not  a  statement	84	None	replace
68	[BUG]  [BUGGY]  double  real  =(c  -  q)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  -  q)/  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  q)/  divisor.getImaginary();	  double    real    =(c    -    d)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	4	None	replace
69	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c  /  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c  /  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c  /  denominator);	  double    real    =    Math.max(d,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	42	None	replace
70	[BUG]  [BUGGY]  double  real  =  Math.min(d,  c  /  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(d,  c  /  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(d,  c  /  denominator);	  double    real    =    Math.max(d,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	42	None	replace
71	[BUG]  [BUGGY]  double  real  =  Math.max(d,  denominator  *  c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  denominator  *  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  denominator  *  c);	  double    real    =    Math.max(d,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	42	None	replace
72	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator,  c);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  denominator,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator,  c);	  double    real    =    Math.max(real,    denominator);    	non-compiled	[CE]  not  a  statement	69	None	replace
73	[BUG]  [BUGGY]  double  real  =  Math.min(real,  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(real,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(real,  denominator);	  double    real    =    Math.max(real,    denominator);    	non-compiled	[CE]  not  a  statement	69	None	replace
74	[BUG]  [BUGGY]  double  real  =  c  *  q;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  q;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  q;	  double    real    =    c    *    denominator;    	non-compiled	[CE]  not  a  statement	24	None	replace
75	[BUG]  [BUGGY]  double  real  =  c  *  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  d;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  d;	  double    real    =    c    *    denominator;    	non-compiled	[CE]  not  a  statement	24	None	replace
76	[BUG]  [BUGGY]  (imaginary  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  +  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  imaginary)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	71	None	replace
77	[BUG]  [BUGGY]  (imaginary  *  q  +  imaginary)/  divisor;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  +  imaginary)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  imaginary)/  divisor;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	71	None	replace
78	[BUG]  [BUGGY]  (denominator  *  q  -  real)/  divisor;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (denominator  *  q  -  real)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(denominator  *  q  -  real)/  divisor;	  (divisor    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	40	None	replace
79	[BUG]  [BUGGY]  double  real  =(c  *  q)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  *  q)/  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  q)/  divisor.getImaginary();	  double    real    =(c    *    d)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	61	None	replace
80	[BUG]  [BUGGY]  double  real  =(d  *  q)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(d  *  q)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  *  q)/  denominator;	  double    real    =(d    *    c)/    denominator;    	non-compiled	[CE]  not  a  statement	36	None	replace
81	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  c)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    q    *    q    +    real)/    denominator,    (imaginary    *    q    -    imaginary)/    denominator);    	non-compiled	[CE]  not  a  statement	12	None	replace
82	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c,  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(c,  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c,  denominator);	  Complex    imaginary    =    createComplex(c);    	non-compiled	[CE]  not  a  statement	73	None	replace
83	[BUG]  [BUGGY]  Complex  imaginary  =  createNaN(c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createNaN(c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createNaN(c);	  Complex    imaginary    =    createComplex(c);    	non-compiled	[CE]  not  a  statement	73	None	replace
84	[BUG]  [BUGGY]  Complex  imaginary  =  createImaginary(c);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createImaginary(c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createImaginary(c);	  Complex    imaginary    =    createComplex(c);    	non-compiled	[CE]  not  a  statement	73	None	replace
85	[BUG]  [BUGGY]  return  createComplex((  c  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  c  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  c  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    imaginary    *    q    +    c)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	57	None	replace
86	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  d  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  d  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    imaginary    *    q    +    c)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	57	None	replace
87	[BUG]  [BUGGY]  return  createComplex((  q  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  q  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  q  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    imaginary    *    q    +    c)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	57	None	replace
88	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c,  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(c,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c,  d);	  Complex    imaginary    =    createComplex(c,    real);    	non-compiled	[CE]  not  a  statement	74	None	replace
89	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c,  real,  denominator);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(c,  real,  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c,  real,  denominator);	  Complex    imaginary    =    createComplex(c,    real);    	non-compiled	[CE]  not  a  statement	74	None	replace
90	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(d,  c);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(d,  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(d,  c);	  Complex    imaginary    =    createComplex(c,    real);    	non-compiled	[CE]  not  a  statement	74	None	replace
91	[BUG]  [BUGGY]  (divisor  *  q  -  denominator)/  imaginary;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  -  denominator)/  imaginary;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  denominator)/  imaginary;	  (imaginary    *    q    -    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	41	None	replace
92	[BUG]  [BUGGY]  (real  *  q  -  denominator)/  divisor;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  denominator)/  divisor;	  (imaginary    *    q    -    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	41	None	replace
93	[BUG]  [BUGGY]  (divisor  *  q  -  denominator)/  divisor;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  -  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  denominator)/  divisor;	  (imaginary    *    q    -    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	41	None	replace
94	[BUG]  [BUGGY]  double  real  =  Math.abs(q  -  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(q  -  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(q  -  denominator);	  double    real    =    Math.abs(q);    	non-compiled	[CE]  not  a  statement	75	None	replace
95	[BUG]  [BUGGY]  double  real  =  Math.log(q);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.log(q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.log(q);	  double    real    =    Math.abs(q);    	non-compiled	[CE]  not  a  statement	75	None	replace
96	[BUG]  [BUGGY]  double  real  =(c  *  q)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  *  q)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  q)/  denominator;	  double    real    =(c    *    d)/    denominator;    	non-compiled	[CE]  not  a  statement	35	None	replace
97	[BUG]  [BUGGY]  double  real  =(denominator  *  c)/  d;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(denominator  *  c)/  d;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(denominator  *  c)/  d;	  double    real    =(c    *    d)/    denominator;    	non-compiled	[CE]  not  a  statement	35	None	replace
98	[BUG]  [BUGGY]  double  real  =  divisor  *  c.getImaginary();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor  *  c.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  *  c.getImaginary();	  double    real    =    divisor    *    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	52	None	replace
99	[BUG]  [BUGGY]  double  real  =  c  *  divisor.getImaginary();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  divisor.getImaginary();	  double    real    =    divisor    *    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	52	None	replace
100	[BUG]  [BUGGY]  double  real  =  q  *  divisor.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  *  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  *  divisor.getImaginary();	  double    real    =    divisor    *    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	52	None	replace
101	[BUG]  [BUGGY]  return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);	  return    createDenominator((    real    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    divisor);    	non-compiled	[CE]  not  a  statement	54	None	replace
102	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  /  q);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  /  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  /  q);	  double    real    =    Math.min(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	33	None	replace
103	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  *  q  +  1);	  double    real    =    Math.min(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	33	None	replace
104	[BUG]  [BUGGY]  double  real  =  Math.min(denominator,  c  *  q);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(denominator,  c  *  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(denominator,  c  *  q);	  double    real    =    Math.min(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	33	None	replace
105	[BUG]  [BUGGY]  (divisor  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  real)/  denominator;	  (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
106	[BUG]  [BUGGY]  (d  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (d  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(d  *  q  +  real)/  denominator;	  (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
107	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
108	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  denominator);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  -  denominator);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
109	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  /  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  /  c):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  /  c):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
110	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  d):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  d):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  -  d):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
111	[BUG]  [BUGGY]  double  real  =  Math.min(d,  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(d,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(d,  c);	  double    real    =    Math.max(d,    c);    	non-compiled	[CE]  not  a  statement	88	None	replace
112	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c,  denominator);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c,  denominator);	  double    real    =    Math.max(d,    c);    	non-compiled	[CE]  not  a  statement	88	None	replace
113	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c  +  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c  +  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c  +  1);	  double    real    =    Math.max(d,    c);    	non-compiled	[CE]  not  a  statement	88	None	replace
114	[BUG]  [BUGGY]  double  real  =(c  -  q)/  divisor.getReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  -  q)/  divisor.getReal();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  q)/  divisor.getReal();	  double    real    =(c    -    d)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	6	None	replace
115	[BUG]  [BUGGY]  double  real  =(c  *  q)/  divisor.getReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  *  q)/  divisor.getReal();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  q)/  divisor.getReal();	  double    real    =(c    *    d)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	58	None	replace
116	[BUG]  [BUGGY]  double  real  =(c  /  d)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  /  d)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  /  d)/  denominator;	  double    real    =(d    /    c)/    denominator;    	non-compiled	[CE]  not  a  statement	77	None	replace
117	[BUG]  [BUGGY]  double  real  =  Math.abs(c  -  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(c  -  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c  -  denominator);	  double    real    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	48	None	replace
118	[BUG]  [BUGGY]  double  real  =  Math.abs(c  -  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(c  -  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c  -  1);	  double    real    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	48	None	replace
119	[BUG]  [BUGGY]  double  real  =  d  /  c.getImaginary();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  /  c.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  c.getImaginary();	  double    real    =    divisor    /    c.getImaginary();    	non-compiled	[CE]  not  a  statement	45	None	replace
120	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    d    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	76	None	replace
121	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    d    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	76	None	replace
122	[BUG]  [BUGGY]  double  real  =  Math.sqrt(d,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.sqrt(d,  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(d,  denominator);	  double    real    =    Math.sqrt(d);    	non-compiled	[CE]  not  a  statement	72	None	replace
123	[BUG]  [BUGGY]  double  real  =  Math.sqrt(c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.sqrt(c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(c);	  double    real    =    Math.sqrt(d);    	non-compiled	[CE]  not  a  statement	72	None	replace
124	[BUG]  [BUGGY]  double  real  =  Math.sqrt(d,  c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.sqrt(d,  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(d,  c);	  double    real    =    Math.sqrt(d);    	non-compiled	[CE]  not  a  statement	72	None	replace
125	[BUG]  [BUGGY]  double  real  =  Math.min(denominator,  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(denominator,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(denominator,  c);	  double    real    =    Math.min(c,    denominator);    	non-compiled	[CE]  not  a  statement	30	None	replace
126	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator,  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator,  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator,  d);	  double    real    =    Math.min(c,    denominator);    	non-compiled	[CE]  not  a  statement	30	None	replace
127	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  d);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  *  q  +  d);	  double    real    =    Math.max(c,    denominator    *    q    +    c);    	non-compiled	[CE]  not  a  statement	68	None	replace
128	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  *  q  +  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  *  q  +  c);	  double    real    =    Math.max(c,    denominator    *    q    +    c);    	non-compiled	[CE]  not  a  statement	68	None	replace
129	[BUG]  [BUGGY]  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	79	None	replace
130	[BUG]  [BUGGY]  (imaginary  *  q  -  real,  denominator)/  divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  -  real,  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  real,  denominator)/  divisor;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	79	None	replace
131	[BUG]  [BUGGY]  (real  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	79	None	replace
132	[BUG]  [BUGGY]  double  real  =  divisor.getReal();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getReal();  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getReal();	  double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
133	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  -  c;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getImaginary()  -  c;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getImaginary()  -  c;	  double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
134	[BUG]  [BUGGY]  double  real  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getDenominator();  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getDenominator();	  double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
135	[BUG]  [BUGGY]  double  real  =  c  *  denominator  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  denominator  +  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  denominator  +  1;	  double    real    =    c    /    denominator    +    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
136	[BUG]  [BUGGY]  double  real  =  c  /  denominator  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  denominator  +  2;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator  +  2;	  double    real    =    c    /    denominator    +    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
137	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c  *  q);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c  *  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c  *  q);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
138	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  q  +  1);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
139	[BUG]  [BUGGY]  double  real  =  Math.min(c,  d  *  q);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  d  *  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  d  *  q);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
140	[BUG]  [BUGGY]  return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createDenominator((    c    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	80	None	replace
141	[BUG]  [BUGGY]  return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    c    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	80	None	replace
142	[BUG]  [BUGGY]  return  createDenominator((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    c    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	80	None	replace
143	[BUG]  [BUGGY]  double  real  =  c  *  d;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  d;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  d;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	56	None	replace
144	[BUG]  [BUGGY]  double  real  =  c  *  q;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  q;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  q;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	56	None	replace
145	[BUG]  [BUGGY]  double  real  =  d  *  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  denominator;	  double    real    =    d    /    denominator;    	non-compiled	[CE]  not  a  statement	25	None	replace
146	[BUG]  [BUGGY]  double  real  =  denominator  /  d;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  denominator  /  d;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  denominator  /  d;	  double    real    =    d    /    denominator;    	non-compiled	[CE]  not  a  statement	25	None	replace
147	[BUG]  [BUGGY]  double  real  =  q  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  *  denominator;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	55	None	replace
148	[BUG]  [BUGGY]  (real  *  q  -  real,  denominator)/  divisor;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  real,  denominator)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  real,  denominator)/  divisor;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	81	None	replace
149	[BUG]  [BUGGY]  (divisor  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	81	None	replace
150	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);	  return    createComplex((    double    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	23	None	replace
151	[BUG]  [BUGGY]  return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    imaginary    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
152	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator,  q  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator,  q  +  1);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator,  q  +  1);	  double    real    =    Math.max(c,    denominator,    q);    	non-compiled	[CE]  not  a  statement	28	None	replace
153	[BUG]  [BUGGY]  return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createDenominator((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
154	[BUG]  [BUGGY]  (real  *  q  +  real)/  divisor;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  real)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  real)/  divisor;	  (imaginary    *    q    +    real)/    divisor;    	non-compiled	[CE]  not  a  statement	18	None	replace
155	[BUG]  [BUGGY]  (divisor  *  q  +  real)/  imaginary;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  real)/  imaginary;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  real)/  imaginary;	  (imaginary    *    q    +    real)/    divisor;    	non-compiled	[CE]  not  a  statement	18	None	replace
156	[BUG]  [BUGGY]  (divisor  *  q  +  real)/  divisor;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  +  real)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  +  real)/  divisor;	  (imaginary    *    q    +    real)/    divisor;    	non-compiled	[CE]  not  a  statement	18	None	replace
157	[BUG]  [BUGGY]  (imaginary  *  q  -  real)/  divisor;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  -  real)/  divisor;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  real)/  divisor;	  double    real    =    c    /    divisor.getReal();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	66	None	replace
158	[BUG]  [BUGGY]  double  real  =  d  *  q;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  q;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  q;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	21	None	replace
159	[BUG]  [BUGGY]  double  real  =  c  *  q;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  q;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  q;  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	59	None	replace
160	[BUG]  [BUGGY]  double  real  =(c  -  q)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  -  q)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  q)/  denominator;	  double    real    =(c    -    d)/    denominator;    	non-compiled	[CE]  not  a  statement	34	None	replace
161	[BUG]  [BUGGY]  double  real  =  q  /  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  /  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  /  denominator;	  double    real    =    d    /    denominator;    	non-compiled	[CE]  not  a  statement	25	None	replace
162	[BUG]  [BUGGY]  double  real  =  imaginary  /  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  /  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  /  denominator;	  double    real    =    d    /    denominator;    	non-compiled	[CE]  not  a  statement	25	None	replace
163	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	82	None	replace
164	[BUG]  [BUGGY]  double  real  =  imaginary  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	82	None	replace
165	[BUG]  [BUGGY]  double  real  =  Math.max(c,  q  *  d);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  q  *  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  q  *  d);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
166	[BUG]  [BUGGY]  double  real  =  Math.max(d,  q  *  c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  q  *  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  q  *  c);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
167	[BUG]  [BUGGY]  double  real  =  Math.floor(d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.floor(d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.floor(d);	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
168	[BUG]  [BUGGY]  double  real  =  q  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	65	None	replace
169	[BUG]  [BUGGY]  double  real  =  imaginary  *  q  +  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  q  +  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  q  +  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	65	None	replace
170	[BUG]  [BUGGY]  double  real  =  divisor  *  c.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor  *  c.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  *  c.getImaginary();  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	65	None	replace
171	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(real,  c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(real,  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(real,  c);	  Complex    imaginary    =    createComplex(c,    real);    	non-compiled	[CE]  not  a  statement	74	None	replace
172	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c,  imaginary);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(c,  imaginary);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c,  imaginary);	  Complex    imaginary    =    createComplex(c,    real);    	non-compiled	[CE]  not  a  statement	74	None	replace
173	[BUG]  [BUGGY]  return  createDenominator((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    c    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	80	None	replace
174	[BUG]  [BUGGY]  double  real  =  c  *  imaginary;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  imaginary;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  imaginary;	  double    real    =    c    *    denominator;    	non-compiled	[CE]  not  a  statement	24	None	replace
175	[BUG]  [BUGGY]  double  real  =  q  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  *  denominator;  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	59	None	replace
176	[BUG]  [BUGGY]  double  real  =  imaginary  *  q  +  denominator;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  q  +  denominator;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  q  +  denominator;  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	59	None	replace
177	[BUG]  [BUGGY]  double  real  =  Math.abs(q  -  c);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(q  -  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(q  -  c);	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	49	None	replace
178	[BUG]  [BUGGY]  double  real  =(c  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);	  double    real    =(d    <    0)?    Math.pow(10,    d)/    c    :    Math.pow(10,    d);    	non-compiled	[CE]  not  a  statement	85	None	replace
179	[BUG]  [BUGGY]  double  real  =  imaginary  *  q;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  q;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  q;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	55	None	replace
180	[BUG]  [BUGGY]  double  real  =  denominator  *  imaginary;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  denominator  *  imaginary;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  denominator  *  imaginary;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	55	None	replace
181	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator  /  q);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  denominator  /  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator  /  q);	  double    real    =    Math.max(real,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	51	None	replace
182	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  /  c)+  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(d  /  c)+  1;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  /  c)+  1;	  double    denominator    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
183	[BUG]  [BUGGY]  double  real  =  Math.abs(q  +  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(q  +  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(q  +  c);	  double    real    =    Math.abs(q);    	non-compiled	[CE]  not  a  statement	75	None	replace
184	[BUG]  [BUGGY]  (divisor  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (divisor  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  imaginary)/  denominator;	  (divisor    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	40	None	replace
185	[BUG]  [BUGGY]  double  real  =(q  *  d)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(q  *  d)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(q  *  d)/  denominator;	  double    real    =(c    *    d)/    denominator;    	non-compiled	[CE]  not  a  statement	35	None	replace
186	[BUG]  [BUGGY]  double  real  =  imaginary  *  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;	  double    real    =    c    /    divisor.getReal();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	66	None	replace
187	[BUG]  [BUGGY]  double  real  =  q  /  c;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  q  /  c;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  q  /  c;	  double    real    =    c    /    q;    	non-compiled	[CE]  not  a  statement	63	None	replace
188	[BUG]  [BUGGY]  double  real  =  c  /  q  +  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  q  +  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  q  +  denominator;	  double    real    =    c    /    q;    	non-compiled	[CE]  not  a  statement	63	None	replace
189	[BUG]  [BUGGY]  double  real  =  Math.max(d,  q  *  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  q  *  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  q  *  denominator);	  double    real    =    Math.max(c,    q    *    denominator);    	non-compiled	[CE]  not  a  statement	84	None	replace
190	[BUG]  [BUGGY]  double  real  =  Math.max(c,  q  *  denominator  +  c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  q  *  denominator  +  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  q  *  denominator  +  c);	  double    real    =    Math.max(c,    denominator    *    q    +    c);    	non-compiled	[CE]  not  a  statement	68	None	replace
191	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  -  q);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  -  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  -  q);	  double    real    =    Math.min(c,    denominator);    	non-compiled	[CE]  not  a  statement	30	None	replace
192	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator,  q);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator,  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator,  q);	  double    real    =    Math.min(c,    denominator);    	non-compiled	[CE]  not  a  statement	30	None	replace
193	[BUG]  [BUGGY]  double  real  =  Math.abs(c)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(c)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c)/  denominator;	  double    real    =    Math.abs(c);    	non-compiled	[CE]  not  a  statement	48	None	replace
194	[BUG]  [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	78	None	replace
195	[BUG]  [BUGGY]  double  real  =  imaginary  *  q  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  q  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  q  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	78	None	replace
196	[BUG]  [BUGGY]  double  real  =  Math.sqrt(d  +  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.sqrt(d  +  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(d  +  c);	  double    real    =    Math.sqrt(d);    	non-compiled	[CE]  not  a  statement	72	None	replace
197	[BUG]  [BUGGY]  double  real  =  Math.sqrt(d  /  c);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.sqrt(d  /  c);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(d  /  c);	  double    real    =    Math.sqrt(d);    	non-compiled	[CE]  not  a  statement	72	None	replace
198	[BUG]  [BUGGY]  double  real  =  divisor  *  divisor.getReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor  *  divisor.getReal();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  *  divisor.getReal();	  double    real    =    divisor    *    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	52	None	replace
199	[BUG]  [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	81	None	replace
200	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	81	None	replace
201	[BUG]  [BUGGY]  double  real  =  Math.max(c,  imaginary,  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  imaginary,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  imaginary,  denominator);	  double    real    =    Math.max(c,    denominator,    c);    	non-compiled	[CE]  not  a  statement	29	None	replace
202	[BUG]  [BUGGY]  double  real  =  c  /  denominator  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  denominator  *  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator  *  1;	  double    real    =    c    /    denominator    +    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
203	[BUG]  [BUGGY]  double  real  =  Math.max(c,  q,  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  q,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  q,  denominator);	  double    real    =    Math.max(c,    denominator,    q);    	non-compiled	[CE]  not  a  statement	28	None	replace
204	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c)+  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  /  c)+  1;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  /  c)+  1;	  double    real    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	11	None	replace
205	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (Imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (Imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  imaginary)/  denominator,  (Imaginary  *  q  -  real)/  denominator);	  return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    *    q    -    imaginary)/    denominator);    	non-compiled	[CE]  not  a  statement	64	None	replace
206	[BUG]  [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createDenominator((    real    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	1	None	replace
207	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator,  imaginary);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  denominator,  imaginary);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator,  imaginary);	  double    real    =    Math.max(real,    denominator);    	non-compiled	[CE]  not  a  statement	69	None	replace
208	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator  -  c);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  denominator  -  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator  -  c);	  double    real    =    Math.max(real,    denominator);    	non-compiled	[CE]  not  a  statement	69	None	replace
209	[BUG]  [BUGGY]  double  real  =  Math.max(real,  c);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(real,  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  c);	  double    real    =    Math.max(c,    d);    	non-compiled	[CE]  not  a  statement	87	None	replace
210	[BUG]  [BUGGY]  return  createDenominator((  definition  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  definition  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  definition  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    imaginary    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
211	[BUG]  [BUGGY]  double  denominator  =  Math.abs(c  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(c  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(c  d);	  double    denominator    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	10	None	replace
212	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  *  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  *  c):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  *  c):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
213	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(q  -  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(q  -  c):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(q  -  c):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
214	[BUG]  [BUGGY]  double  real  =(c  >  0)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  0)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  0)?  Math.abs(d  -  c):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
215	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  /  d);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  /  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  -  c):  Math.abs(d  /  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
216	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  imaginary)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	71	None	replace
217	[BUG]  [BUGGY]  double  real  =  divisor.getReal()  /  c.getImaginary();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getReal()  /  c.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getReal()  /  c.getImaginary();	  double    real    =    divisor    /    c.getImaginary();    	non-compiled	[CE]  not  a  statement	45	None	replace
218	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  -  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getImaginary()  -  1;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getImaginary()  -  1;	  double    real    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	8	None	replace
219	[BUG]  [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  +  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  denominator;  (imaginary  *  q  +  imaginary)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    +    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	60	None	replace
220	[BUG]  [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	79	None	replace
221	[BUG]  [BUGGY]  double  real  =  c  *  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    /    divisor.getReal();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	70	None	replace
222	[BUG]  [BUGGY]  double  real  =  divisor.getReal()  /  divisor.getImaginary();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getReal()  /  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getReal()  /  divisor.getImaginary();	  double    real    =    d    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	46	None	replace
223	[BUG]  [BUGGY]  double  real  =  d  *  c  +  c;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  c  +  c;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  c  +  c;	  double    real    =    d    *    c;    	non-compiled	[CE]  not  a  statement	21	None	replace
224	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    *    q    -    imaginary)/    denominator);    	non-compiled	[CE]  not  a  statement	64	None	replace
225	[BUG]  [BUGGY]  double  real  =  d  /  denominator  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  /  denominator  +  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  denominator  +  1;	  double    real    =    c    /    denominator    +    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
226	[BUG]  [BUGGY]  double  real  =  c  /  q  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  q  +  1;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  q  +  1;	  double    real    =    c    /    denominator    +    1;    	non-compiled	[CE]  not  a  statement	62	None	replace
227	[BUG]  [BUGGY]  double  real  =  imaginary  *  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	78	None	replace
228	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  /  c);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  /  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  /  c);	  double    real    =    Math.max(real,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	51	None	replace
229	[BUG]  [BUGGY]  double  real  =  Math.min(c,  q  *  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  q  *  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  q  *  denominator);	  double    real    =    Math.min(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	33	None	replace
230	[BUG]  [BUGGY]  double  real  =  Math.min(c,  d);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  d);	  double    real    =    Math.max(c,    d);    	non-compiled	[CE]  not  a  statement	87	None	replace
231	[BUG]  [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  divisor.getImaginary();	  double    real    =    divisor    *    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	52	None	replace
232	[BUG]  [BUGGY]  double  real  =  c  /  d,  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  d,  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  d,  denominator;	  double    real    =    c    /    d;    	non-compiled	[CE]  not  a  statement	19	None	replace
233	[BUG]  [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  q):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =(c  >  d)?  Math.abs(d  -  q):  Math.abs(d  -  d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  >  d)?  Math.abs(d  -  q):  Math.abs(d  -  d);	  double    real    =(d    >    c)?    Math.abs(d    -    c):    Math.abs(d    -    d);    	non-compiled	[CE]  not  a  statement	86	None	replace
234	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  d);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  q  +  d);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
235	[BUG]  [BUGGY]  double  real  =  Math.max(d  /  c,  d  *  q);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d  /  c,  d  *  q);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d  /  c,  d  *  q);	  double    real    =    Math.max(c,    d    *    q);    	non-compiled	[CE]  not  a  statement	83	None	replace
236	[BUG]  [BUGGY]  double  real  =  Math.max(c,  q  /  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  q  /  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  q  /  denominator);	  double    real    =    Math.max(c,    q    *    denominator);    	non-compiled	[CE]  not  a  statement	84	None	replace
237	[BUG]  [BUGGY]  (imaginary  *  q  -  divisor)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  q  -  divisor)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  divisor)/  denominator;	  (imaginary    *    q    -    denominator)/    divisor;    	non-compiled	[CE]  not  a  statement	41	None	replace
238	[BUG]  [BUGGY]  (real  *  q  -  fictional)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  -  fictional)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  fictional)/  denominator;	  (real    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	39	None	replace
239	[BUG]  [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary,  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary,  denominator)/  denominator;	  double    real    =    c    /    denominator;    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	79	None	replace
240	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(d);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  Complex  imaginary  =  createComplex(d);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(d);	  Complex    imaginary    =    createComplex(c);    	non-compiled	[CE]  not  a  statement	73	None	replace
241	[BUG]  [BUGGY]  double  real  =  d  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  denominator;  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	55	None	replace
242	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  /  q,  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator  /  q,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  /  q,  denominator);	  double    real    =    Math.max(c,    denominator    /    q);    	non-compiled	[CE]  not  a  statement	32	None	replace
243	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    double    *    q    +    real)/    denominator,    (imaginary    *    q    -    imaginary)/    denominator);    	non-compiled	[CE]  not  a  statement	22	None	replace
244	[BUG]  [BUGGY]  (imaginary  *  c  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (imaginary  *  c  -  real,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  c  -  real,  denominator)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real,    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	81	None	replace
245	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary()  /  c.getImaginary();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  divisor.getImaginary()  /  c.getImaginary();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getImaginary()  /  c.getImaginary();	  double    real    =    divisor    /    c.getImaginary();    	non-compiled	[CE]  not  a  statement	45	None	replace
246	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  /  c)-  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  denominator  =  Math.abs(d  /  c)-  1;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  /  c)-  1;	  double    denominator    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
247	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  /  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  /  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  /  d);	  double    real    =    Math.max(d,    denominator    /    c);    	non-compiled	[CE]  not  a  statement	42	None	replace
248	[BUG]  [BUGGY]  return  createDenominator((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  return  createDenominator((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  d  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    imaginary    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
249	[BUG]  [BUGGY]  (d  *  q  +  denominator)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (d  *  q  +  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(d  *  q  +  denominator)/  denominator;	  (imaginary    *    q    +    denominator)/    denominator;    	non-compiled	[CE]  not  a  statement	37	None	replace
250	[BUG]  [BUGGY]  double  real  =  Math.random();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.random();  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.random();	  double    real    =    Math.log(d);    	non-compiled	[CE]  not  a  statement	89	None	replace
251	[BUG]  [BUGGY]  double  real  =  c  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;	  double    real    =    imaginary    *    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	65	None	replace
252	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  -  d);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.min(c,  denominator  -  d);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  -  d);	  double    real    =    Math.min(c,    denominator);    	non-compiled	[CE]  not  a  statement	30	None	replace
253	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c)/  divisor;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  /  c)/  divisor;  [BUGGY]      (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  /  c)/  divisor;	  double    real    =    Math.abs(d    /    c);    	non-compiled	[CE]  not  a  statement	11	None	replace
254	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary,  denominator)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary,  denominator)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary,  denominator)/  denominator;	  double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    imaginary)/    denominator;    	non-compiled	[CE]  not  a  statement	82	None	replace
255	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c  *  q  +  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(d,  c  *  q  +  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c  *  q  +  denominator);	  double    real    =    Math.max(c,    denominator    *    q    +    d);    	non-compiled	[CE]  not  a  statement	67	None	replace
256	[BUG]  [BUGGY]  double  real  =  c  *  d;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  c  *  d;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  d;  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	59	None	replace
257	[BUG]  [BUGGY]  double  real  =  d  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  d  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  denominator;  (imaginary  *  q  +  real)/  denominator;	  double    real    =    c    *    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	59	None	replace
258	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator,  q,  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  denominator,  q,  denominator);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator,  q,  denominator);	  double    real    =    Math.max(c,    denominator,    q);    	non-compiled	[CE]  not  a  statement	28	None	replace
259	[BUG]  [BUGGY]  (real  *  q  +  fictional)/  denominator;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  (real  *  q  +  fictional)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  fictional)/  denominator;	  (real    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	17	None	replace
260	[BUG]  [BUGGY]  double  real  =  Math.abs(d  -  c)/  denominator;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.abs(d  -  c)/  denominator;  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  -  c)/  denominator;	  double    real    =    Math.abs(d    -    c);    	non-compiled	[CE]  not  a  statement	49	None	replace
261	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  c);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;      [BUGGY]  double  real  =  Math.max(c,  d  *  q  +  c);  [BUGGY]      return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  q  +  c);	  double    real    =    Math.max(c,    denominator    *    q    +    c);    	non-compiled	[CE]  not  a  statement	68	None	replace
