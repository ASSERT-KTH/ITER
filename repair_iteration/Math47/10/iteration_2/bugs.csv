bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    real    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	10	None	replace
2	[BUG]  [BUGGY]  return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    real    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	10	None	replace
3	[BUG]  [BUGGY]  return  createDenominator((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createDenominator((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    real    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  double  real  =(c  -  d)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  -  d)/  divisor.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  d)/  divisor.getImaginary();	      double    real    =(d    -    c)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	17	None	replace
5	[BUG]  [BUGGY]  double  real  =(d  *  c)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  *  c)/  divisor.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  *  c)/  divisor.getImaginary();	      double    real    =(d    -    c)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	17	None	replace
6	[BUG]  [BUGGY]  double  real  =(c  -  d)/  divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  -  d)/  divisor.getReal();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  d)/  divisor.getReal();	      double    real    =(d    -    c)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	20	None	replace
7	[BUG]  [BUGGY]  double  real  =(d  *  c)/  divisor.getReal();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  *  c)/  divisor.getReal();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  *  c)/  divisor.getReal();	      double    real    =(d    -    c)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	20	None	replace
8	[BUG]  [BUGGY]  double  real  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  divisor.getImaginary();  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor.getImaginary();	      	non-compiled	[CE]  not  a  statement	4	None	replace
9	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  /  c);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  denominator  =  Math.abs(d  /  c);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  /  c);	      	non-compiled	[CE]  not  a  statement	4	None	replace
10	[BUG]  [BUGGY]  double  denominator  =  Math.abs(d  -  c);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  denominator  =  Math.abs(d  -  c);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  denominator  =  Math.abs(d  -  c);	      	non-compiled	[CE]  not  a  statement	4	None	replace
11	[BUG]  [BUGGY]  double  real  =  Math.abs(d  /  c);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.abs(d  /  c);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  /  c);	      	non-compiled	[CE]  not  a  statement	4	None	replace
12	[BUG]  [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
13	[BUG]  [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  q  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
14	[BUG]  [BUGGY]  return  createComplex((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
15	[BUG]  [BUGGY]  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  +  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
16	[BUG]  [BUGGY]  (imaginary  *  q  +  denominator)/  divisor;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  +  denominator)/  divisor;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  denominator)/  divisor;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
17	[BUG]  [BUGGY]  (real  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (real  *  q  +  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  +  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
18	[BUG]  [BUGGY]  (imaginary  *  q  +  real)/  divisor;  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  +  real)/  divisor;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  real)/  divisor;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
19	[BUG]  [BUGGY]  double  real  =  c  /  d;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  d;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  d;	      double    real    =    d    /    c;    	non-compiled	[CE]  not  a  statement	7	None	replace
20	[BUG]  [BUGGY]  double  real  =  d  /  c  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  d  /  c  +  1;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  c  +  1;	      double    real    =    d    /    c;    	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  double  real  =  d  *  c;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  d  *  c;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  *  c;	      double    real    =    d    /    c;    	non-compiled	[CE]  not  a  statement	7	None	replace
22	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    double    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    double    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
24	[BUG]  [BUGGY]  double  real  =  c  *  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  *  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  denominator;	      double    real    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	19	None	replace
25	[BUG]  [BUGGY]  double  real  =  d  /  denominator;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  d  /  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  denominator;	      double    real    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	19	None	replace
26	[BUG]  [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  c  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    imaginary    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
27	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator,  d);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator,  d);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator,  d);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
28	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator,  q);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator,  q);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator,  q);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator,  c);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator,  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator,  c);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
30	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.min(c,  denominator);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
31	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  1);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  1);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  1);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  /  q);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator  /  q);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  /  q);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
33	[BUG]  [BUGGY]  double  real  =  Math.min(c,  denominator  *  q);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.min(c,  denominator  *  q);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.min(c,  denominator  *  q);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
34	[BUG]  [BUGGY]  double  real  =(c  -  d)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  -  d)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  -  d)/  denominator;	      double    real    =(d    -    c)/    denominator;    	non-compiled	[CE]  not  a  statement	18	None	replace
35	[BUG]  [BUGGY]  double  real  =(c  *  d)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  *  d)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  d)/  denominator;	      double    real    =(d    -    c)/    denominator;    	non-compiled	[CE]  not  a  statement	18	None	replace
36	[BUG]  [BUGGY]  double  real  =(d  *  c)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  *  c)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  *  c)/  denominator;	      double    real    =(d    -    c)/    denominator;    	non-compiled	[CE]  not  a  statement	18	None	replace
37	[BUG]  [BUGGY]  (imaginary  *  q  +  denominator)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  +  denominator)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  +  denominator)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	14	None	replace
38	[BUG]  [BUGGY]  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
39	[BUG]  [BUGGY]  (real  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (real  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(real  *  q  -  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  (divisor  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (divisor  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(divisor  *  q  -  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
41	[BUG]  [BUGGY]  (imaginary  *  q  -  denominator)/  divisor;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  -  denominator)/  divisor;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  denominator)/  divisor;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
42	[BUG]  [BUGGY]  double  real  =  Math.max(d,  denominator  /  c);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(d,  denominator  /  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  denominator  /  c);	      double    real    =    Math.max(c,    denominator    /    d);    	non-compiled	[CE]  not  a  statement	8	None	replace
43	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  d);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator  *  d);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  d);	      double    real    =    Math.max(c,    denominator    /    d);    	non-compiled	[CE]  not  a  statement	8	None	replace
44	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getReal();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();	      double    real    =    c    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	13	None	replace
45	[BUG]  [BUGGY]  double  real  =  divisor  /  c.getImaginary();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  divisor  /  c.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  /  c.getImaginary();	      double    real    =    c    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	13	None	replace
46	[BUG]  [BUGGY]  double  real  =  d  /  divisor.getImaginary();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  d  /  divisor.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  divisor.getImaginary();	      double    real    =    c    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	13	None	replace
47	[BUG]  [BUGGY]  (imaginary  *  q  -  denominator)/  denominator;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  (imaginary  *  q  -  denominator)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	(imaginary  *  q  -  denominator)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	11	None	replace
48	[BUG]  [BUGGY]  double  real  =  Math.abs(c);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.abs(c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(c);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
49	[BUG]  [BUGGY]  double  real  =  Math.abs(d  -  c);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.abs(d  -  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(d  -  c);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
50	[BUG]  [BUGGY]  double  real  =  Math.max(d,  denominator);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(d,  denominator);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  denominator);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
51	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator  /  c);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(real,  denominator  /  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator  /  c);	      double    real    =    Math.max(c,    denominator    /    d);    	non-compiled	[CE]  not  a  statement	8	None	replace
52	[BUG]  [BUGGY]  double  real  =  divisor  *  divisor.getImaginary();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  divisor  *  divisor.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  divisor  *  divisor.getImaginary();	      double    real    =    c    /    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	13	None	replace
53	[BUG]  [BUGGY]  double  real  =  d  /  c  +  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  d  /  c  +  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  d  /  c  +  denominator;	      double    real    =    d    /    c;    	non-compiled	[CE]  not  a  statement	7	None	replace
54	[BUG]  [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  divisor);	  return    createDenominator((    real    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	10	None	replace
55	[BUG]  [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  denominator;  (imaginary  *  q  -  real)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	11	None	replace
56	[BUG]  [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  denominator;  (imaginary  *  q  -  real)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	11	None	replace
57	[BUG]  [BUGGY]  return  createComplex((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  imaginary  *  q  +  c)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
58	[BUG]  [BUGGY]  double  real  =(c  *  d)/  divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  *  d)/  divisor.getReal();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  d)/  divisor.getReal();	      double    real    =(d    -    c)/    divisor.getReal();    	non-compiled	[CE]  not  a  statement	20	None	replace
59	[BUG]  [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  *  denominator;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  *  denominator;  (imaginary  *  q  +  real)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	14	None	replace
60	[BUG]  [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  +  imaginary)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator;  (imaginary  *  q  +  imaginary)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	14	None	replace
61	[BUG]  [BUGGY]  double  real  =(c  *  d)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(c  *  d)/  divisor.getImaginary();  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(c  *  d)/  divisor.getImaginary();	      double    real    =(d    -    c)/    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	17	None	replace
62	[BUG]  [BUGGY]  double  real  =  c  /  denominator  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  denominator  +  1;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator  +  1;	      double    real    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	19	None	replace
63	[BUG]  [BUGGY]  double  real  =  c  /  q;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  q;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  q;	      double    real    =    c    /    denominator;    	non-compiled	[CE]  not  a  statement	19	None	replace
64	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  imaginary)/  denominator);	  return    createComplex((    real    *    q    +    real)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	1	None	replace
65	[BUG]  [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  imaginary  *  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
66	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();  (imaginary  *  q  -  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
67	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  d);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  d);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  d);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
68	[BUG]  [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  c);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  denominator  *  q  +  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  denominator  *  q  +  c);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  double  real  =  Math.max(real,  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(real,  denominator);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(real,  denominator);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
70	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getReal();  (imaginary  *  q  +  real)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
71	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  imaginary)/  denominator;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  imaginary)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  imaginary)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    +    real)/    denominator;    	non-compiled	[CE]  not  a  statement	15	None	replace
72	[BUG]  [BUGGY]  double  real  =  Math.sqrt(d);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.sqrt(d);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.sqrt(d);	      	non-compiled	[CE]  not  a  statement	4	None	replace
73	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  Complex  imaginary  =  createComplex(c);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c);	      	non-compiled	[CE]  not  a  statement	4	None	replace
74	[BUG]  [BUGGY]  Complex  imaginary  =  createComplex(c,  real);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  Complex  imaginary  =  createComplex(c,  real);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	Complex  imaginary  =  createComplex(c,  real);	      	non-compiled	[CE]  not  a  statement	4	None	replace
75	[BUG]  [BUGGY]  double  real  =  Math.abs(q);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.abs(q);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.abs(q);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
76	[BUG]  [BUGGY]  return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  d  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createComplex((    q    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	16	None	replace
77	[BUG]  [BUGGY]  double  real  =(d  /  c)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  /  c)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  /  c)/  denominator;	      double    real    =(d    -    c)/    denominator;    	non-compiled	[CE]  not  a  statement	18	None	replace
78	[BUG]  [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator;  (imaginary  *  q  -  imaginary)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	11	None	replace
79	[BUG]  [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  denominator;  (imaginary  *  q  -  real,  denominator)/  denominator;	      double    real    =    c    /    denominator;    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	11	None	replace
80	[BUG]  [BUGGY]  return  createDenominator((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  return  createDenominator((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  c  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	  return    createDenominator((    real    *    q    +    imaginary)/    denominator,    (imaginary    *    q    -    real)/    denominator);    	non-compiled	[CE]  not  a  statement	10	None	replace
81	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real,  denominator)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
82	[BUG]  [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  imaginary)/  denominator;	      double    real    =    c    /    divisor.getImaginary();    (imaginary    *    q    -    real)/    denominator;    	non-compiled	[CE]  not  a  statement	12	None	replace
83	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d  *  q);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  d  *  q);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d  *  q);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
84	[BUG]  [BUGGY]  double  real  =  Math.max(c,  q  *  denominator);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  q  *  denominator);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  q  *  denominator);	      double    real    =    Math.max(c,    denominator    *    q);    	non-compiled	[CE]  not  a  statement	6	None	replace
85	[BUG]  [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  <  0)?  Math.pow(10,  d)/  c  :  Math.pow(10,  d);	      	non-compiled	[CE]  not  a  statement	4	None	replace
86	[BUG]  [BUGGY]  double  real  =(d  >  c)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =(d  >  c)?  Math.abs(d  -  c):  Math.abs(d  -  d);  [BUGGY]    (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =(d  >  c)?  Math.abs(d  -  c):  Math.abs(d  -  d);	      	non-compiled	[CE]  not  a  statement	4	None	replace
87	[BUG]  [BUGGY]  double  real  =  Math.max(c,  d);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(c,  d);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(c,  d);	      double    real    =    Math.max(c,    denominator);    	non-compiled	[CE]  not  a  statement	5	None	replace
88	[BUG]  [BUGGY]  double  real  =  Math.max(d,  c);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.max(d,  c);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.max(d,  c);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
89	[BUG]  [BUGGY]  double  real  =  Math.log(d);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;    [BUGGY]  double  real  =  Math.log(d);  [BUGGY]    return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	double  real  =  Math.log(d);	      double    real    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	9	None	replace
