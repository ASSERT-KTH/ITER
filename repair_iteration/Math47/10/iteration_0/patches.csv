bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]  return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  real  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
2	[BUG]  [BUGGY]  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]  return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  imaginary  *  q  +  real)/  denominator,  (imaginary  *  q  -  real)/  denominator);	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
3	[BUG]  [BUGGY]  return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]  return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  double  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
4	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	  	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
5	[BUG]  [BUGGY]    double  real  =  Math.max(c,  denominator);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  Math.max(c,  denominator);  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  Math.max(c,  denominator);		non-compiled	[CE]  not  a  statement	20	None	add
6	[BUG]  [BUGGY]    double  real  =  Math.max(c,  denominator  *  q);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  Math.max(c,  denominator  *  q);  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  Math.max(c,  denominator  *  q);		non-compiled	[CE]  not  a  statement	20	None	add
7	[BUG]  [BUGGY]    double  real  =  d  /  c;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  d  /  c;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  d  /  c;		non-compiled	[CE]  not  a  statement	20	None	add
8	[BUG]  [BUGGY]    double  real  =  Math.max(c,  denominator  /  d);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  Math.max(c,  denominator  /  d);  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  Math.max(c,  denominator  /  d);		non-compiled	[CE]  not  a  statement	20	None	add
9	[BUG]  [BUGGY]    double  real  =  Math.abs(d);  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  Math.abs(d);  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  Math.abs(d);		non-compiled	[CE]  not  a  statement	20	None	add
10	[BUG]  [BUGGY]  return  createDenominator((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]  return  createDenominator((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createDenominator((  real  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
11	[BUG]  [BUGGY]    double  real  =  c  /  denominator;  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  denominator;  (imaginary  *  q  -  real)/  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  denominator;  (imaginary  *  q  -  real)/  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
12	[BUG]  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  -  real)/  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
13	[BUG]  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  divisor.getImaginary();		non-compiled	[CE]  not  a  statement	20	None	add
14	[BUG]  [BUGGY]    double  real  =  c  /  denominator;  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  denominator;  (imaginary  *  q  +  real)/  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  denominator;  (imaginary  *  q  +  real)/  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
15	[BUG]  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  real)/  denominator;  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  real)/  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  divisor.getImaginary();  (imaginary  *  q  +  real)/  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
16	[BUG]  [BUGGY]  return  createComplex((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]  return  createComplex((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);  [BUGGY]  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	return  createComplex((  q  *  q  +  imaginary)/  denominator,  (imaginary  *  q  -  real)/  denominator);	return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  	non-compiled	[CE]  not  a  statement	19	None	replace
17	[BUG]  [BUGGY]    double  real  =(d  -  c)/  divisor.getImaginary();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =(d  -  c)/  divisor.getImaginary();  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =(d  -  c)/  divisor.getImaginary();		non-compiled	[CE]  not  a  statement	20	None	add
18	[BUG]  [BUGGY]    double  real  =(d  -  c)/  denominator;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =(d  -  c)/  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =(d  -  c)/  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
19	[BUG]  [BUGGY]    double  real  =  c  /  denominator;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =  c  /  denominator;  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =  c  /  denominator;		non-compiled	[CE]  not  a  statement	20	None	add
20	[BUG]  [BUGGY]    double  real  =(d  -  c)/  divisor.getReal();  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  [BUGGY]    double  real  =(d  -  c)/  divisor.getReal();  [BUGGY]  return  createComplex((real  *  q  +  imaginary)  /  denominator,    (imaginary  *  q  -  real)  /  denominator);  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  return  createComplex((imaginary  *  q  +  real)  /  denominator,  (imaginary  -  real  *  q)  /  denominator);  }  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	270	271	2	replace	    double  real  =(d  -  c)/  divisor.getReal();		non-compiled	[CE]  not  a  statement	20	None	add
