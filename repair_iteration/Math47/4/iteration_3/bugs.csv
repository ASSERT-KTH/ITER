bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MathUtils.checkState(d.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isInfinite(),  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isInfinite(),  divisor.isNaN());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
2	[BUG]  [BUGGY]  MathUtils.checkState(d.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
3	[BUG]  [BUGGY]  MathUtils.checkState(d.isReal(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isReal(),  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isReal(),  divisor.isNaN());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
5	[BUG]  [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
6	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
7	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
8	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
9	[BUG]  [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
10	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal())||  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal())||  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal())||  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal())&&    nisipisNaN(divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
11	[BUG]  [BUGGY]  nisipisNaN(divisor.getDenominator())&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getDenominator())&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getDenominator())&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal())&&    nisipisNaN(divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
12	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	17	None	replace
15	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	17	None	replace
16	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
17	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
18	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
21	[BUG]  [BUGGY]  nisipisNaN(divisor.getDenominator(),  divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getDenominator(),  divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getDenominator(),  divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
22	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary()))  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary()))  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  divisor.getImaginary()))  {  return  NaN;  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
23	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary(),  c))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary(),  c))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  divisor.getImaginary(),  c))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
24	[BUG]  [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  1.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  1.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipa.add(divisor.getReal(),  divisor.getImaginary(),  1.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipa.add(divisor.getReal(),    divisor.getImaginary(),    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
25	[BUG]  [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.5)  {  throw  new  IllegalArgumentException( " ");  }	  nisipa.add(divisor.getReal(),    divisor.getImaginary(),    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
26	[BUG]  [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.0001)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.0001)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipa.add(divisor.getReal(),  divisor.getImaginary(),  0.0001)  {  throw  new  IllegalArgumentException( " ");  }	  nisipa.add(divisor.getReal(),    divisor.getImaginary(),    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
27	[BUG]  [BUGGY]  final  double  d  =  divisor.getReal();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getReal();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	final  double  d  =  divisor.getReal();	  final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	15	None	replace
28	[BUG]  [BUGGY]  final  double  d  =  divisor.getDenominator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getDenominator();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	final  double  d  =  divisor.getDenominator();	  final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	15	None	replace
29	[BUG]  [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  final  double  d  =  divisor.getImaginary()  +  1;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	final  double  d  =  divisor.getImaginary()  +  1;	  final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  ';'  expected	15	None	replace
30	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
31	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
32	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
33	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
34	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
35	[BUG]  [BUGGY]  Context.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkArgument(divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkArgument(divisor.isNaN());	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
36	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	66	None	replace
37	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getImaginary();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	36	None	replace
38	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINFDenominator();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	36	None	replace
39	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  {  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite(),    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
40	[BUG]  [BUGGY]  Context.checkState(divisor.isReal(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite(),    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
41	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
42	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  ';'  expected	35	None	replace
43	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
44	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
45	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isNaN());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
46	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)this.divisor.clone();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)this.divisor.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)this.divisor.clone();	  NeighborDivisor    divisor    =(NaN)divisor.clone();    	non-compiled	[CE]  ';'  expected	65	None	replace
47	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)denominator.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)denominator.clone();	  NeighborDivisor    divisor    =(NaN)divisor.clone();    	non-compiled	[CE]  ';'  expected	65	None	replace
48	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getImaginary();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getImaginary();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getImaginary();	  NeighborDivisor    divisor    =(NaN)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
49	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDestinator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDestinator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDestinator();	  NeighborDivisor    divisor    =(NaN)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
50	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getImaginary()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
51	[BUG]  [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getImaginary()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
52	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  if(divisor!=    null)    {    if(divisor.isNaN()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
53	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
54	[BUG]  [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(divisor)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
55	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
56	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
57	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
58	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
59	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
60	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0);	  if(divisor!=    null)    {    if(divisor.isReal()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
61	[BUG]  [BUGGY]  Context.checkState(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getRal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
62	[BUG]  [BUGGY]  if  (divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {	  if    (divisor.getReal()    ==    0.5    ||    divisor.getImaginary()    ==    0.5)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
63	[BUG]  [BUGGY]  if  (divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  1.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  1.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  1.0)  {	  if    (divisor.getReal()    ==    0.5    ||    divisor.getImaginary()    ==    0.5)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
64	[BUG]  [BUGGY]  MathUtils.checkState(d.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isNaN()  &&  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isNaN()  &&  divisor.isNaN());	  MathUtils.checkState(d.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  MathUtils.checkState(d.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isInfinite()  ||  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkState(d.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  MathUtils.checkState(d.isNaN()  +  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isNaN()  +  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isNaN()  +  divisor.isNaN());	  MathUtils.checkState(d.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	12	None	replace
68	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  isNaN);	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	12	None	replace
69	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
70	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDivisor(divisor,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDivisor(divisor,  imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =  getDivisor(divisor,  imaginary);	  NeighborDivisor    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  ';'  expected	67	None	replace
71	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDivisor(real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDivisor(real);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =  getDivisor(real);	  NeighborDivisor    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  ';'  expected	67	None	replace
72	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDivisor(divisor.getINF());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDivisor(divisor.getINF());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =  getDivisor(divisor.getINF());	  NeighborDivisor    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  ';'  expected	67	None	replace
73	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)this.divisor.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	42	None	replace
74	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.clone();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)super.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)super.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	42	None	replace
75	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)denominator.clone();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)denominator.clone();	  MutableDivisor    divisor    =(MutableDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	42	None	replace
76	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
77	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal()  ||  divisor.isNaN())  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
78	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
79	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
80	[BUG]  [BUGGY]  MathUtils.checkInternal(divisor.getImaginary());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkInternal(divisor.getImaginary());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkInternal(divisor.getImaginary());	  MathUtils.checkInternal(divisor);    	non-compiled	[CE]  ';'  expected	69	None	replace
81	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0);	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
82	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
83	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
84	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
85	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
86	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	6	None	replace
87	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	6	None	replace
88	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	6	None	replace
89	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	6	None	replace
90	[BUG]  [BUGGY]  if  (divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {	  if    (divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
91	[BUG]  [BUGGY]  MathUtils.checkDenominator(d);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(d);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(d);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  ';'  expected	47	None	replace
92	[BUG]  [BUGGY]  MathUtils.checkNotNull(d);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkNotNull(d);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkNotNull(d);	  MathUtils.checkNotNull(imaginary);    	non-compiled	[CE]  ';'  expected	47	None	replace
93	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getImaginary())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  divisor.getImaginary())  {  return  NaN;  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	23	None	replace
94	[BUG]  [BUGGY]  nisipisNaN(divisor.getDenominator(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getDenominator(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getDenominator(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
95	[BUG]  [BUGGY]  nisipisNaN(divisor.getRal(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getRal(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getRal(),  divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
96	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
97	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
98	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
99	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
100	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
101	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestinator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	30	None	replace
102	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINFDenominator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	30	None	replace
103	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
104	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
105	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
106	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
107	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
108	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
109	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
110	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getINF();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDestination();    	non-compiled	[CE]  ';'  expected	32	None	replace
111	[BUG]  [BUGGY]  Magimizer.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkInfinite(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkInfinite(divisor);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
112	[BUG]  [BUGGY]  Magimizer.checkInternal(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkInternal(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkInternal(divisor);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
113	[BUG]  [BUGGY]  Magimizer.checkNotNull(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkNotNull(real);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkNotNull(real);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
114	[BUG]  [BUGGY]  if  (divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {	  if    (divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
115	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	11	None	replace
116	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor.getDenominator());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(divisor.getDenominator());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	11	None	replace
117	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
119	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
120	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
121	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.5    ||    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
122	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(divisor,  imaginary);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	10	None	replace
123	[BUG]  [BUGGY]  MathUtils.checkDigits(divisor);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDigits(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDigits(divisor);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	10	None	replace
124	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(divisor,  real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	10	None	replace
125	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
126	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	16	None	replace
127	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  1.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	16	None	replace
128	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0);	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
129	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
130	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
131	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite());	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
132	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
133	[BUG]  [BUGGY]  if  (divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {	  if    (divisor.getReal()    ==    1.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
134	[BUG]  [BUGGY]  if  (divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.0)  {	  if    (divisor.getReal()    ==    1.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
135	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
136	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	31	None	replace
137	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.divisor.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	31	None	replace
138	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()!=  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
139	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getINFImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getINFImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getINFImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
140	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getINFDenominator();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getINFDenominator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.getINFDenominator();	  MutableDivisor    divisor    =(MutableDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	43	None	replace
141	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getImaginary();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getImaginary();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.getImaginary();	  MutableDivisor    divisor    =(MutableDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	43	None	replace
142	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	21	None	replace
143	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	21	None	replace
144	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
145	[BUG]  [BUGGY]  MathUtils.checkDenominator(d.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(d.isNaN(),  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(d.isNaN(),  divisor.isNaN());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
146	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
147	[BUG]  [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
148	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
149	[BUG]  [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
150	[BUG]  [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(imaginary)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
151	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
152	[BUG]  [BUGGY]  if(divisor.getImaginary()  ==  0  ||  divisor.getReal()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getImaginary()  ==  0  ||  divisor.getReal()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getImaginary()  ==  0  ||  divisor.getReal()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
153	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
154	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
155	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.getDivisor();	  if(divisor!=    null)    {    if(divisor.isNaN()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
156	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
157	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0);  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
158	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0);  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0);  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0);    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
159	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite(),  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  Context.checkState(divisor.isInfinite(),    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
160	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite(),  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite(),    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN(),  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isInfinite(),    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	5	None	replace
162	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  	38	None	replace
163	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getImaginary();  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getImaginary();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getImaginary();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDestination();    	non-compiled	[CE]  	32	None	replace
164	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  	21	None	replace
165	[BUG]  [BUGGY]  Magimizer.checkNotNull(imaginary);  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkNotNull(imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkNotNull(imaginary);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  	46	None	replace
166	[BUG]  [BUGGY]  Magimizer.checkNotNull(divisor,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkNotNull(divisor,  imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkNotNull(divisor,  imaginary);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
167	[BUG]  [BUGGY]  Magimizer.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkArgument(divisor!=  null);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkArgument(divisor!=  null);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
168	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	16	None	replace
169	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	16	None	replace
170	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getINF();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getINF();	  NeighborDivisor    divisor    =(NaN)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
171	[BUG]  [BUGGY]  Context.checkState(divisor.isDenominator()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isDenominator()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isDenominator()  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.isReal()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
172	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
173	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
174	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal())&&  nisipisNaN(real))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal())&&  nisipisNaN(real))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal())&&  nisipisNaN(real))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal())&&    nisipisNaN(divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
175	[BUG]  [BUGGY]  MathUtils.checkDenominator(d.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(d.isNaN()  ||  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(d.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(d.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	14	None	replace
176	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkArgument(divisor.isNaN());	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
177	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
178	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;	  Context.checkState(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	6	None	replace
179	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
180	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
181	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
182	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
183	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	18	None	replace
184	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
185	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDenominator(divisor);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDenominator(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =  getDenominator(divisor);	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.5    ||    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
186	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.denominator.clone();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	17	None	replace
187	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  Context.checkState(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
188	[BUG]  [BUGGY]  if  (divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if  (divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if  (divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {	  if    (divisor.getImaginary()    ==    0.0    ||    divisor.getReal()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
189	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)this.denominator.clone();	  MutableDenominator    divisor    =(MutableDenominator)divisor.clone();    	non-compiled	[CE]  ';'  expected	31	None	replace
190	[BUG]  [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getReal(),  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipa.add(divisor.getReal(),  divisor.getReal(),  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipa.add(divisor.getReal(),  divisor.getReal(),  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  nisipa.add(divisor.getReal(),    divisor.getImaginary(),    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
191	[BUG]  [BUGGY]  Magimizer.checkDigit(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkDigit(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkDigit(divisor.isNaN(),  divisor.isNaN());	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
192	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
193	[BUG]  [BUGGY]  MathUtils.checkInternal(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkInternal(imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkInternal(imaginary);	  MathUtils.checkInternal(divisor);    	non-compiled	[CE]  ';'  expected	69	None	replace
194	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
195	[BUG]  [BUGGY]  Context.checkNotNull(divisor,  imaginary);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkNotNull(divisor,  imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkNotNull(divisor,  imaginary);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
196	[BUG]  [BUGGY]  Context.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkNotNull(imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkNotNull(imaginary);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
197	[BUG]  [BUGGY]  NeighborDivisor  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =  getDivisor(imaginary);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =  getDivisor(imaginary);	  NeighborDivisor    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  ';'  expected	67	None	replace
198	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
199	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isDenominator());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(divisor.isDenominator());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(divisor.isDenominator());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	12	None	replace
200	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
201	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
202	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
203	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  &&  divisor.isNaN())  {  return  ONE;  }	  if(divisor.isNaN())    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
204	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
205	[BUG]  [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getDenominator()  ==  0.0  &&  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }	  if(divisor.getImaginary()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
206	[BUG]  [BUGGY]  if(divisor.getReal()!=  0  &&  divisor.getImaginary()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getReal()!=  0  &&  divisor.getImaginary()  ==  0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getReal()!=  0  &&  divisor.getImaginary()  ==  0)  {	  if    (divisor.getReal()    ==    0    &&    divisor.getImaginary()    ==    0)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
207	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isReal()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
208	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isReal()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
209	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
210	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getReal())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getReal())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  divisor.getReal())  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
211	[BUG]  [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getINF();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDivisor  divisor  =(MutableDivisor)divisor.getINF();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDivisor  divisor  =(MutableDivisor)divisor.getINF();	  MutableDivisor    divisor    =(MutableDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	43	None	replace
212	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getReal()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  divisor.getReal()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  divisor.getReal()))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal(),    divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
213	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.getReal()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
214	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.getReal()    ==    0.5    ||    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
215	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
216	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
217	[BUG]  [BUGGY]  nisipisNaN(divisor.getReal(),  imaginary)&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipisNaN(divisor.getReal(),  imaginary)&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipisNaN(divisor.getReal(),  imaginary)&&  nisipisNaN(divisor.getImaginary()))  {  throw  new  IllegalArgumentException( " ");  }	  nisipisNaN(divisor.getReal())&&    nisipisNaN(divisor.getImaginary()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
218	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkDenominator(denominator);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkDenominator(denominator);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	10	None	replace
219	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
220	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
221	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
222	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
223	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
224	[BUG]  [BUGGY]  MathUtils.checkState(d.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isInfinite(),  divisor.isInfinite());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isInfinite(),  divisor.isInfinite());	  MathUtils.checkState(d.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	13	None	replace
225	[BUG]  [BUGGY]  Context.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkArgument(divisor!=  null);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkArgument(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	20	None	replace
226	[BUG]  [BUGGY]  if(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getImaginary()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
227	[BUG]  [BUGGY]  if(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getDenominator()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
228	[BUG]  [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getDenominator()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getDenominator()  ==  0.0  &&  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
229	[BUG]  [BUGGY]  if(divisor.getDenominator()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor.getDenominator()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor.getDenominator()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor.getDenominator()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
230	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
231	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getReal()!=  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
232	[BUG]  [BUGGY]  MathUtils.checkInternal(divisor.getReal());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkInternal(divisor.getReal());  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkInternal(divisor.getReal());	  MathUtils.checkInternal(divisor);    	non-compiled	[CE]  ';'  expected	69	None	replace
233	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
234	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
235	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  ONE;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  ||  divisor.isNaN())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
236	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
237	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isDenominator()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isDenominator()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isDenominator()  ||  divisor.isNaN())  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
238	[BUG]  [BUGGY]  MathUtils.checkState(d.isNaN()  ||  imaginary.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MathUtils.checkState(d.isNaN()  ||  imaginary.isNaN());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MathUtils.checkState(d.isNaN()  ||  imaginary.isNaN());	  MathUtils.checkState(d.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	14	None	replace
239	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getINF();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	36	None	replace
240	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDiminator();	  MutableDenominator    divisor    =(MutableDenominator)divisor.getDenominator();    	non-compiled	[CE]  ';'  expected	30	None	replace
241	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
242	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
243	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
244	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	39	None	replace
245	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent!=  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	39	None	replace
246	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  &&  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	39	None	replace
247	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isNaN();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  parent  ==  null  &&  divisor.isNaN();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	parent  ==  null  &&  divisor.isNaN();	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	39	None	replace
248	[BUG]  [BUGGY]  Magimizer.checkAndFix(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Magimizer.checkAndFix(divisor);  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Magimizer.checkAndFix(divisor);	  Magimizer.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
249	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
250	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
251	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  if(divisor    ==    null)    {    if(divisor.isInfinite()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
252	[BUG]  [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }      [BUGGY]  nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	256	256	2	replace	nisipTo(real)  {  if(divisor.isNaN()  ||  divisor.getDenominator()  ==  0.0)  {  return  NaN;  }	  nisipTo(real)    {    if(divisor.isNaN()    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
