bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  denominator);	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
2	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  1);	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
3	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
4	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
5	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
6	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
8	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	throw  new  IllegalArgumentException( " ");	  return    0;    	non-compiled	[CE]  	48	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	throw  new  IllegalStateException( " ");	  return    0;    	non-compiled	[CE]  	48	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "FastMath.abs(divisor.getReal())= "  +  divisor.getImaginary());  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  throw  new  IllegalArgumentException( "FastMath.abs(divisor.getReal())= "  +  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	throw  new  IllegalArgumentException( "FastMath.abs(divisor.getReal())= "  +  divisor.getImaginary());	  return    0;    	non-compiled	[CE]  	48	None	replace
12	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  *  divisor.getImaginary());  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  *  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  *  divisor.getImaginary());	  return    NegativeMath.abs(divisor.getReal()    /    divisor.getImaginary());    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  +  divisor.getImaginary());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  +  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  +  divisor.getImaginary());	  return    NegativeMath.abs(divisor.getReal()    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	17	None	replace
14	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary()  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary()  +  1);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary()  +  1);	  return    NegativeMath.abs(divisor.getReal()    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	17	None	replace
15	[BUG]  [BUGGY]  return  divisor;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  divisor;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  divisor;	  return    NONE;    	non-compiled	[CE]  not  a  statement	50	None	replace
16	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
19	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  NaN;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  NaN;	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
20	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  return  NaN;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  return  NaN;	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
21	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  ==  return  NaN;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  ==  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  ==  return  NaN;	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
22	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  '  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  '	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  line  end  in  character  literal	46	None	replace
23	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
24	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
25	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	47	None	replace
27	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	47	None	replace
28	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.denominator.clone();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.denominator.clone();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)this.denominator.clone();	  NegativeFactory    divisor    =(NegativeFactory)denominator.clone();    	non-compiled	[CE]  not  a  statement	30	None	replace
29	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	7	None	replace
30	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	7	None	replace
31	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	7	None	replace
32	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	42	None	replace
33	[BUG]  [BUGGY]  return  NeRO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NeRO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NeRO;	  return    NiRO;    	non-compiled	[CE]  not  a  statement	49	None	replace
34	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	33	None	replace
35	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	33	None	replace
36	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	33	None	replace
37	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	40	None	replace
38	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	40	None	replace
39	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
40	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary(),  denominator);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary(),  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary(),  denominator);	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
41	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
42	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary()  +  1);  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary()  +  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary()  +  1);	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
43	[BUG]  [BUGGY]  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal(),    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {	  GrimMath.abs(divisor.getReal(),    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	13	None	replace
45	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)super.divisor.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)super.divisor.clone();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)super.divisor.clone();	  NegativeFactory    divisor    =(NegativeFactory)this.divisor.clone();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
46	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)Divisor.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)Divisor.clone();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)Divisor.clone();	  NegativeFactory    divisor    =(NegativeFactory)this.divisor.clone();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
47	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  real);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  real);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary(),  real);	  NegativeMath.abs(divisor.getImaginary(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
48	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary,  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary(),  imaginary,  denominator);	  NegativeMath.abs(divisor.getImaginary(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
49	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
50	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	70	None	replace
51	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	70	None	replace
52	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	70	None	replace
53	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getImaginary()  -  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary()  -  1);	  NegativeMath.abs(divisor.getReal()    -    1);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
54	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal()  +  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal()  +  1);	  NegativeMath.abs(divisor.getReal()    -    1);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
55	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
56	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0,  divisor.getImaginary()  ==  0.0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0,  divisor.getImaginary()  ==  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  1.0,  divisor.getImaginary()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
57	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
58	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
59	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	28	None	replace
60	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	28	None	replace
61	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >=    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	67	None	replace
62	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >=    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	67	None	replace
63	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getReal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getReal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getReal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	74	None	replace
64	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	74	None	replace
65	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  *  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	74	None	replace
66	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  >=  0.0  ||  divisor.getImaginary()  ==  0.0)  {	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
67	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getRal()  ==  0.0)  {	  Context.checkState(divisor.getReal()!=    0.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
68	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
69	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
70	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
71	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
72	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	44	None	replace
73	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	10	None	replace
74	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	10	None	replace
75	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  +  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  +  1);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	10	None	replace
76	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getLowerCase())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getLowerCase())*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getLowerCase())*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
77	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
78	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
79	[BUG]  [BUGGY]  &&  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  &&  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	&&  divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
80	[BUG]  [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
81	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	78	None	replace
82	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.super.clone();  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.super.clone();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)this.super.clone();	  NegativeFactory    divisor    =(NegativeFactory)super.clone();    	non-compiled	[CE]  	31	None	replace
83	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
84	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
85	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
86	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary());	  GrimMath.abs(divisor.getReal()    /    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	63	None	replace
87	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal()    /    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	63	None	replace
88	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	61	None	replace
89	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
90	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	61	None	replace
91	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	58	None	replace
92	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getDenominator());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getDenominator());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getDenominator());	  return    NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  not  a  statement	5	None	replace
94	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  1);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  -  1);	  return    NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  not  a  statement	5	None	replace
95	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	24	None	replace
96	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	24	None	replace
97	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	24	None	replace
98	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	20	None	replace
99	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	20	None	replace
100	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  -  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
102	[BUG]  [BUGGY]  return  NegativeMath.abs(real  -  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(real  -  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(real  -  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
103	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
104	[BUG]  [BUGGY]  return  NegativeMath.abs(denominator  -  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(denominator  -  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(denominator  -  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
105	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  1.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
106	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	25	None	replace
107	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	25	None	replace
108	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	75	None	replace
109	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	75	None	replace
110	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
112	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
113	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
114	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  1);	  GrimMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  GrimMath.abs(divisor.getDenominator());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getDenominator());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getDenominator());	  GrimMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
117	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary());	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
118	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
119	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
120	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
121	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
122	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
123	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
124	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
125	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
126	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  	38	None	replace
127	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  	66	None	replace
128	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  ||  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  	66	None	replace
129	[BUG]  [BUGGY]  Neighbor  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Neighbor  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Neighbor  divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  	66	None	replace
130	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
131	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  	76	None	replace
132	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	76	None	replace
133	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	76	None	replace
134	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  denominator);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  denominator);	  NegativeMath.abs(divisor.getImaginary(),    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
135	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getRal(),  denominator);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getRal(),  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getRal(),  denominator);	  NegativeMath.abs(divisor.getImaginary(),    denominator);    	non-compiled	[CE]  not  a  statement	36	None	replace
136	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getDenominator(),  imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getDenominator(),  imaginary);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getDenominator(),  imaginary);	  NegativeMath.abs(divisor.getDenominator());    	non-compiled	[CE]  not  a  statement	11	None	replace
137	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  real);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  real);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  real);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  not  a  statement	52	None	replace
138	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  not  a  statement	52	None	replace
139	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  real);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  imaginary,  real);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  not  a  statement	52	None	replace
140	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  /  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  /  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  /  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	80	None	replace
141	[BUG]  [BUGGY]  return  NegativeMath.abs(real  /  divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(real  /  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(real  /  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	80	None	replace
142	[BUG]  [BUGGY]  return  NegativeMath.abs(denominator  /  divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(denominator  /  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(denominator  /  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	80	None	replace
143	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  *  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  *  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  *  divisor.getImaginary());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	80	None	replace
144	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
145	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
146	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
147	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.get  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.get  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.get	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	45	None	replace
148	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary()  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary()  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary()	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	45	None	replace
149	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary(),  denominator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary(),  denominator);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary(),  denominator);	  return    NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	6	None	replace
150	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
151	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
152	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()!=  0.0)  {  throw  new  IllegalStateException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
153	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary()  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary()  +  1);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary()  +  1);	  return    NegativeMath.abs(divisor.getReal()    -    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	18	None	replace
154	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getRal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	8	None	replace
155	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getReal())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getReal())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getReal())>  GrimMath.abs(di	  GrimMath.abs(divisor.getRal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	8	None	replace
156	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal());	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
157	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
158	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)>  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)>  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  imaginary)>  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
159	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
160	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
161	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  	66	None	replace
162	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)real.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)real.clone();  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)real.clone();	  NegativeFactory    divisor    =(NegativeFactory)super.clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
163	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  	38	None	replace
164	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal(),  imaginary);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal(),  imaginary);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal(),  imaginary);	  return    NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
165	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getReal()  +  1);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  +  1);	  return    NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  not  a  statement	5	None	replace
166	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	40	None	replace
167	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  /  divisor.getReal());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  /  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  /  divisor.getReal());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	80	None	replace
168	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  divisor.getImaginary());	  GrimMath.abs(divisor.getReal(),    divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
169	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
170	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
171	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	7	None	replace
172	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)/  GrimMath.abs(divisor.getImaginary()  +  imaginary)>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)/  GrimMath.abs(divisor.getImaginary()  +  imaginary)>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  imaginary)/  GrimMath.abs(divisor.getImaginary()  +  imaginary)>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	7	None	replace
173	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
174	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
175	[BUG]  [BUGGY]  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getReal());  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getReal());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getReal());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
176	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
177	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
178	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  ZERO);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  ZERO);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary(),  ZERO);	  NegativeMath.abs(divisor.getImaginary(),    imaginary);    	non-compiled	[CE]  not  a  statement	51	None	replace
179	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	20	None	replace
180	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	20	None	replace
181	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  '  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  '  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  >>  return  '	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
182	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
183	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
184	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
185	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	41	None	replace
186	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	61	None	replace
187	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getRal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getRal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getRal())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal()    -    divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	74	None	replace
188	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	25	None	replace
189	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	25	None	replace
190	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	44	None	replace
191	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	44	None	replace
192	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  :  expected	72	None	replace
193	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getDenominator()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  :  expected	72	None	replace
194	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
195	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
196	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	24	None	replace
197	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	28	None	replace
198	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
199	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
200	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getReal());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getReal());	  return    NegativeMath.abs(divisor.getReal()    /    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
201	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary(),  imaginary);	  return    NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
202	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getReal());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  -  divisor.getReal());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
203	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getDenominator());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor  -  divisor.getDenominator());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor  -  divisor.getDenominator());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
204	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
205	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
206	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
207	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	42	None	replace
208	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
209	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
210	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.abs(divisor.getImaginary()  -  d)*  GrimMath.	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  <identifier>  expected	9	None	replace
211	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getDenominator())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getDenominator())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getDenominator())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
212	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
213	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
214	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
215	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
216	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
217	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
218	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	47	None	replace
219	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  >  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  >  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  >  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
220	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  >  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
221	[BUG]  [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getDenominator()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
222	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	45	None	replace
223	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  <identifier>  expected	45	None	replace
224	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
225	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
226	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
227	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getReal());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary()  -  divisor.getReal());	  return    NegativeMath.abs(divisor.getReal()    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
228	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	75	None	replace
229	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  1);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  1);	  GrimMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
230	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
231	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
232	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
233	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  ZERO);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  ZERO);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  ZERO);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
234	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getReal()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
235	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
236	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
237	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
238	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  ZERO;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  ZERO;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
239	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  Divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  Divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.0  &&  Divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
240	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()!=  0.0)  {  return  NaN;  }	  if(divisor.getReal()!=    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
241	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  '  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor!=  '	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor    	non-compiled	[CE]  illegal  line  end  in  character  literal	46	None	replace
242	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
243	[BUG]  [BUGGY]  return  NegativeMath.abs(imaginary  -  divisor.getReal());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(imaginary  -  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(imaginary  -  divisor.getReal());	  return    NegativeMath.abs(imaginary    -    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
244	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	45	None	replace
245	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	24	None	replace
246	[BUG]  [BUGGY]  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	24	None	replace
247	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  <  =  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
248	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
249	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
250	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  >>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  >>  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  >>  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    >>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	69	None	replace
251	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    Math.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
252	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
253	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary())*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
254	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	9	None	replace
255	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  imaginary);	  GrimMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
256	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
257	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	23	None	replace
258	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
259	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
260	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())||  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
261	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	42	None	replace
262	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary)>  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary)>  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  imaginary)>  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
263	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	12	None	replace
264	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())-  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())-  divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())-  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	75	None	replace
265	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0);	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
266	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
267	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
268	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
269	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	27	None	replace
270	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.5    &&    divisor.getImaginary()    ==    0.5)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
271	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  if(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
272	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
273	[BUG]  [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getImaginary()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0    ||    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	43	None	replace
274	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	28	None	replace
275	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  	76	None	replace
276	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  return  NaN;  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
277	[BUG]  [BUGGY]  return  NegativeMath.abs(imaginary  /  divisor.getReal());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(imaginary  /  divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(imaginary  /  divisor.getReal());	  return    NegativeMath.abs(imaginary    /    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
278	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	40	None	replace
279	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	40	None	replace
280	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getImaginary());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getImaginary());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary()  /  divisor.getImaginary());	  return    NegativeMath.abs(divisor.getReal()    /    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
281	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0,  divisor.getImaginary()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  Context.checkState(divisor.getReal()    ==    0.0,    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
282	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
283	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)>  GrimMath.abs(  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary(),  imaginary)>  GrimMath.abs(	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
284	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	  GrimMath.abs(divisor.getRal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
285	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary)*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal(),  imaginary)*  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  imaginary)*  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
286	[BUG]  [BUGGY]  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	15	None	replace
287	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	41	None	replace
288	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
289	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
290	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	61	None	replace
291	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {      [BUGGY]  Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  [BUGGY]      return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;	  Context.checkState(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    	non-compiled	[CE]  ';'  expected	22	None	replace
