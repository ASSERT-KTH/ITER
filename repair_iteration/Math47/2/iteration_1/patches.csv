bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
4	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(divisor.getReal());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal());	  return    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(divisor.getImaginary());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getImaginary());	  return    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	4	None	replace
8	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	4	None	replace
9	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(di  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	4	None	replace
10	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getDenominator());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getDenominator());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getDenominator());	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	5	None	replace
13	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal(),  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal());  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	5	None	replace
16	[BUG]  [BUGGY]  return  Neg;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  Neg;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  Neg;	  return    ENF;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  /  divisor.getImaginary());	  return    INF;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(divisor.getReal()  -  divisor.getImaginary());	  return    INF;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
20	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
21	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()!=  0.0  ||  divisor.getImaginary()  ==  0.0)  {	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
22	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
23	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	3	None	replace
24	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	3	None	replace
25	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
28	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
29	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.divisor.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)this.divisor.clone();  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)this.divisor.clone();	      NegativeFactory    divisor    =(NegativeFactory)divisor.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)denominator.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)denominator.clone();  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)denominator.clone();	      NegativeFactory    divisor    =(NegativeFactory)divisor.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)super.clone();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeFactory  divisor  =(NegativeFactory)super.clone();  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeFactory  divisor  =(NegativeFactory)super.clone();	      NegativeFactory    divisor    =(NegativeFactory)divisor.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  denominator);  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary(),  denominator);	      NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
37	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	2	None	replace
41	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	2	None	replace
42	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	2	None	replace
43	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
45	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
46	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	1	None	replace
47	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  return  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  0;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  0;	  return    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  return  NiRO;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NiRO;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NiRO;	  return    ONE;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  return  NONE;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NONE;	  return    ONE;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getImaginary(),  imaginary);	      NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary);  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal(),  imaginary);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
53	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  NegativeMath.abs(divisor.getReal()  -  1);  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	NegativeMath.abs(divisor.getReal()  -  1);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  return  NiN;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NiN;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NiN;	  return    ZERO;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
56	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
57	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
58	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	4	None	replace
59	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	2	None	replace
62	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()))    {    return    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	5	None	replace
64	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0  ||  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
65	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
66	[BUG]  [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()  ==  0.5  &&  divisor.getImaginary()  ==  0.5)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >=  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
68	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  >>  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	1	None	replace
70	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  Math.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	2	None	replace
71	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);  [CE]  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0.0,  divisor.getImaginary()  ==  0.0);	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())>  GrimMath.abs(di	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())>    GrimMath.abs(di    	non-compiled	[CE]  ')'  expected	4	None	replace
75	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  divisor.getImaginary());  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  divisor.getImaginary());  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	3	None	replace
76	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	3	None	replace
77	[BUG]  [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	Context.checkState(divisor.getReal()  ==  0  ||  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
78	[BUG]  [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	if(divisor.getReal()!=  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }	      if(divisor.getReal()    ==    0.0    &&    divisor.getImaginary()    ==    0.0)    {    return    ZERO;    }    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  return  NegativeMath.abs(imaginary  -  divisor.getImaginary());  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(imaginary  -  divisor.getImaginary());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(imaginary  -  divisor.getImaginary());	  return    ZERO;    	non-compiled	[CE]  	7	None	replace
80	[BUG]  [BUGGY]  return  NegativeMath.abs(imaginary  /  divisor.getImaginary());  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {    [BUGGY]  return  NegativeMath.abs(imaginary  /  divisor.getImaginary());  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  NegativeMath.abs(imaginary  /  divisor.getImaginary());	  return    ZERO;    	non-compiled	[CE]  	7	None	replace
