bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(divisor.getImaginary())		non-compiled	[CE]  not  a  statement	4	None	add
2	[BUG]  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())		non-compiled	[CE]  not  a  statement	4	None	add
3	[BUG]  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary()));  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary()));		non-compiled	[CE]  not  a  statement	4	None	add
4	[BUG]  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [CE]  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())>  GrimMath.abs(di		non-compiled	[CE]  	4	None	add
5	[BUG]  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()))  {  return  GrimMath.abs(divisor.getImaginary());		non-compiled	[CE]  not  a  statement	4	None	add
6	[BUG]  [BUGGY]  return  INF;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]  return  INF;  [BUGGY]  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  INF;	return  NaN;  	non-compiled	[CE]  not  a  statement	3	None	replace
7	[BUG]  [BUGGY]  return  ZERO;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]  return  ZERO;  [BUGGY]  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  ZERO;	return  NaN;  	non-compiled	[CE]  not  a  statement	3	None	replace
8	[BUG]  [BUGGY]  return  ONE;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]  return  ONE;  [BUGGY]  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  ONE;	return  NaN;  	non-compiled	[CE]  not  a  statement	3	None	replace
9	[BUG]  [BUGGY]  return  1;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]  return  1;  [BUGGY]  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  1;	return  NaN;  	non-compiled	[CE]  not  a  statement	3	None	replace
10	[BUG]  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	4	None	add
11	[BUG]  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  not  a  statement	4	None	add
12	[BUG]  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  ZERO;  }		non-compiled	[CE]  not  a  statement	4	None	add
13	[BUG]  [BUGGY]    NegativeFactory  divisor  =(NegativeFactory)divisor.clone();  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    NegativeFactory  divisor  =(NegativeFactory)divisor.clone();  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    NegativeFactory  divisor  =(NegativeFactory)divisor.clone();		non-compiled	[CE]  not  a  statement	4	None	add
14	[BUG]  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  not  a  statement	4	None	add
15	[BUG]  [BUGGY]  return  ENF;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]  return  ENF;  [BUGGY]  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	return  ENF;	return  NaN;  	non-compiled	[CE]  not  a  statement	3	None	replace
16	[BUG]  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    if(divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  not  a  statement	4	None	add
17	[BUG]  [BUGGY]    NegativeMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    NegativeMath.abs(divisor.getImaginary());  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    NegativeMath.abs(divisor.getImaginary());		non-compiled	[CE]  not  a  statement	4	None	add
18	[BUG]  [BUGGY]    NegativeMath.abs(divisor.getReal());  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.getReal()  ==  0.0  &&  divisor.getImaginary()  ==  0.0)  {  [BUGGY]    NegativeMath.abs(divisor.getReal());  [BUGGY]  return  NaN;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math47/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	257	257	2	replace	    NegativeMath.abs(divisor.getReal());		non-compiled	[CE]  not  a  statement	4	None	add
