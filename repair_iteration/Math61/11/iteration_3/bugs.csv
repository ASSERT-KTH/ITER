bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  p;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean  =  p;	  this.mean    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	34	1	replace
2	[BUG]  [BUGGY]  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  p;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  p;	  this.mean    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	34	1	replace
3	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
4	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
6	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
7	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	5	None	add
8	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	5	None	add
9	[BUG]  [BUGGY]  this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    This.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
10	[BUG]  [BUGGY]  this.maxIterations  =  epsilon;  This.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon;  This.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon;  This.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    This.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
11	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    This.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
12	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  +  1;	  int    maxIterations    =    epsilon.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	38	None	replace
13	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;	  int    maxIterations    =    epsilon.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	38	None	replace
14	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	26	None	replace
15	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	26	None	replace
16	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	26	None	replace
17	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.MAX_ITERATIONS;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  DEFAULT_EPSILON.MAX_ITERATIONS;	  int    maxIterations    =    DEFAULT_EPSILON.maxIterations;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
18	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  DEFAULT_EPSILON.maxIterations  +  1;	  int    maxIterations    =    DEFAULT_EPSILON.maxIterations;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
19	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  1;	  int    maxIterations    =    DEFAULT_EPSILON.maxIterations;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
20	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	28	None	replace
21	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	28	None	replace
22	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	28	None	replace
23	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_MIN_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIters    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	70	None	replace
24	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON  /  maxIterations);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	78	None	replace
25	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  mean);  [CE]  possible  loss  of  precision  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  mean);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
26	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations  *  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations  *  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations  *  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	78	None	replace
27	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
28	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
29	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
30	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  /  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  /  DEFAULT_EPSILON;	  this.maxIterations    =    epsilon    -    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
31	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  epsilon;  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  epsilon;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON  -  epsilon;	  this.maxIterations    =    epsilon    -    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
32	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
33	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(int,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,int)	22	None	replace
34	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(maxIterations,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(maxIterations,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(maxIterations,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
35	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
36	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
37	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	13	None	add
38	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	13	None	add
39	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	13	None	add
40	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	13	None	add
41	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    int    maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
42	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    int    maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
43	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)	25	None	replace
44	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  normal);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  normal);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON,  normal);	  this.maxIterations    =    Math.max(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	25	None	replace
45	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double,double)	25	None	replace
46	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  -  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	40	None	replace
47	[BUG]  [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  mean.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	40	None	replace
48	[BUG]  [BUGGY]  int  maxIterations  =  this.epsilon.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  this.epsilon.getMaxIterations()  -  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  this.epsilon.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	40	None	replace
49	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
50	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
51	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
52	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  3;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
53	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;	  	non-compiled	[CE]  cannot  find  symbol  This	74	None	add
54	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	74	None	add
55	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  /  maxIterations;  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  /  maxIterations;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON  /  maxIterations;	  this.maxIterations    =    DEFAULT_EPSILON    -    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
56	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  /  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  FunctionEvaluationException  	80	8	replace
57	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_MAX_ITERATIONS;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  FunctionEvaluationException  	80	8	replace
58	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON  -  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
59	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  This.maxIterations  =  epsilon  +  1;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  1;  This.maxIterations  =  epsilon  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  1;  This.maxIterations  =  epsilon  +  1;	  this.maxIterations    =    maxIterations    +    1;    This.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	73	None	replace
60	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  This.maxIterations  =  maxIterations  +  2;  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  This.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  2;  This.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    This.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	73	None	replace
61	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  +  1;  This.maxIterations  =  maxIterations  +  1;  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  +  1;  This.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  +  1;  This.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    This.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
62	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  maxIterations);  [CE]  possible  loss  of  precision  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
63	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  mean);  [CE]  possible  loss  of  precision  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  mean);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
64	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  MAX_ITERATIONS);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	63	None	replace
65	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.maxIterations  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  epsilon.maxIterations  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  epsilon.maxIterations  +  1;	  int    maxIterations    =    epsilon.maxIterations;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
66	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  +  3;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	1	replace
67	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  3;  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  3;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	1	replace
68	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
69	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
70	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	71	None	replace
71	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	71	None	replace
72	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  /  2;	  this.maxIterations    =    maxIterations    /    1;    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
73	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  2;	  this.maxIterations    =    maxIterations    /    1;    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
74	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS  /  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS  /  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS  /  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS	53	None	replace
75	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	53	None	replace
76	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  it.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  it.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  it.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    it.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
77	[BUG]  [BUGGY]  this.maxIterations  =  epsilon;  it.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon;  it.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon;  it.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    it.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
78	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	65	None	replace
79	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	65	None	replace
80	[BUG]  [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	65	None	replace
81	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	62	None	replace
82	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	44	1	add
83	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	44	1	add
84	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  minIterations;  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  minIterations  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  minIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    this.maxIterations  =  minIterations;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  cannot  find  symbol  minIterations	44	None	add
85	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  This.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  This.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    This.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  cannot  find  symbol  This	44	None	add
86	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  int  maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  int  maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    int  maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	44	None	add
87	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;	  this.mean    =    mean;    	non-compiled	[CE]  incompatible  types	30	None	replace
88	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	  this.mean    =    mean;    	non-compiled	[CE]  incompatible  types	30	None	replace
89	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  epsilon);  [CE]  possible  loss  of  precision  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
90	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON  /  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	54	None	replace
91	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(epsilon  *  DEFAULT_EPSILON,  maxIterations);  [CE]  possible  loss  of  precision  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(epsilon  *  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(epsilon  *  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
92	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	33	6	add
93	[BUG]  [BUGGY]  this.mean  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	33	6	add
94	[BUG]  [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	33	None	add
95	[BUG]  [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	33	None	add
96	[BUG]  [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	33	None	add
97	[BUG]  [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	33	None	add
98	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(maxIterations,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(maxIterations,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(maxIterations,  epsilon);	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
99	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(Math.max(epsilon,  maxIterations));  [CE]  no  suitable  method  found  for  min(double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(Math.max(epsilon,  maxIterations));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(Math.max(epsilon,  maxIterations));	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	23	None	replace
100	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(mean,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(mean,  epsilon,  maxIterations);	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	23	None	replace
101	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  maxIterations);  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  maxIterations);  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  maxIterations);  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    maxIterations);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	64	None	replace
102	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  maxIterations);  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  maxIterations);  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  maxIterations);  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    maxIterations);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	64	None	replace
103	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    maxIterations);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	64	None	replace
104	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  *  1;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  *  1;	  this.maxIterations    =    maxIterations    *    1;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
105	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  *  2;	  this.maxIterations    =    maxIterations    *    1;    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
106	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  2;	  this.maxIterations    =    maxIterations    *    1;    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
107	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  -  2;	  this.maxIterations    =    maxIterations    -    1;    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
108	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  2;	  this.maxIterations    =    maxIterations    -    1;    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
109	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  -  1;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  -  1;	  this.maxIterations    =    maxIterations    -    1;    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
110	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  normal.maxIterations;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  normal.maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  DEFAULT_EPSILON.maxIterations  -  normal.maxIterations;	  int    maxIterations    =    normal.maxIterations    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	51	None	replace
111	[BUG]  [BUGGY]  int  maxIterations  =  normal.maxIterations  /  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.maxIterations  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.maxIterations  /  DEFAULT_EPSILON;	  int    maxIterations    =    normal.maxIterations    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	51	None	replace
112	[BUG]  [BUGGY]  int  maxIterations  =  mean.maxIterations  -  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  mean.maxIterations  -  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  mean.maxIterations  -  DEFAULT_EPSILON;	  int    maxIterations    =    normal.maxIterations    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	51	None	replace
113	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON  +  1;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON  +  1;	  this.maxIterations    =    maxIterations    -    mean    +    1;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
114	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  -  maxIterations  +  1;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  -  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  -  maxIterations  +  1;	  this.maxIterations    =    maxIterations    -    mean    +    1;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
115	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  mean  +  1;  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON  -  mean  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON  -  mean  +  1;	  this.maxIterations    =    maxIterations    -    mean    +    1;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
116	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  1;	  this.maxIterations    =    0;    	compilable	  [FE]  FunctionEvaluationException  	37	8	replace
117	[BUG]  [BUGGY]  this.maxIterations  =  1;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  1;	  this.maxIterations    =    0;    	compilable	  [FE]  FunctionEvaluationException  	37	8	replace
118	[BUG]  [BUGGY]  timeout  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean  =  DEFAULT_MAX_ITERATIONS;	  this.mean    =    DEFAULT_EPSILON;    	compilable	timeout	32	1	replace
119	[BUG]  [BUGGY]  this.mean  =  DEFAULT_MAX_ITERATIONS;  timeout  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_MAX_ITERATIONS;	  this.mean    =    DEFAULT_EPSILON;    	compilable	timeout	32	1	replace
120	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	79	1	add
121	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	79	1	add
122	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  This  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    This.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  This	79	None	add
123	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  int  maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  int  maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    int  maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	add
124	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS);  [CE]  ';'  expected  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  ';'  expected	79	None	add
125	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    *    1;    this.maxIterations  =  maxIterations  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
126	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    this.maxIterations  =  maxIterations  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
127	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	11	None	add
128	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	11	None	add
129	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	11	None	add
130	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.maxIterations  =  maxIterations  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	11	None	add
131	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean    =    mean;    this.mean  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	29	1	add
132	[BUG]  [BUGGY]  this.mean  =  mean;  this.mean  =  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    this.mean  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	29	1	add
133	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	29	None	add
134	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	29	None	add
135	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	29	None	add
136	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	29	None	add
137	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  /  maxIterations;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  /  maxIterations;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  /  maxIterations;	  this.maxIterations    =    maxIterations    /    mean;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
138	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  mean;  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  mean;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  mean;	  this.maxIterations    =    maxIterations    /    mean;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
139	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
140	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
141	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  2;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  +  1;  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
142	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
143	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  +  2;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
144	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.getMaxIterations()  /  1;	  int    maxIterations    =    normal.getMaxIterations()    +    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	39	None	replace
145	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	72	None	replace
146	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
147	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(defULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(defULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(defULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	52	None	replace
148	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean    =    DEFAULT_EPSILON;    this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
149	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
150	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	31	None	add
151	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	31	None	add
152	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	31	None	add
153	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	31	None	add
154	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON_MEAN;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON_MEAN;	  this.maxIterations    =    maxIterations    -    DEFAULT_EPSILON_MEAN;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	69	None	replace
155	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS  -  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS  -  DEFAULT_EPSILON_MEAN;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_MAX_ITERATIONS  -  DEFAULT_EPSILON_MEAN;	  this.maxIterations    =    maxIterations    -    DEFAULT_EPSILON_MEAN;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	69	None	replace
156	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  epsilon);  [CE]  possible  loss  of  precision  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
157	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  p);  [CE]  possible  loss  of  precision  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  p);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
158	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  This	3	None	replace
159	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	3	1	replace
160	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	3	1	replace
161	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  DEFAULT_EPSILON;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  This	3	None	replace
162	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	24	None	replace
163	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	24	None	replace
164	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon,  mean);  [CE]  no  suitable  method  found  for  max(int,double,double)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations,  epsilon,  mean);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double)	24	None	replace
165	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  maxIterations,  epsilon);  [CE]  no  suitable  method  found  for  max(double,int,double)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  maxIterations,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  maxIterations,  epsilon);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double)	24	None	replace
166	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON;	  this.maxIterations    =    maxIterations    /    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
167	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  epsilon;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  epsilon;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  epsilon;	  this.maxIterations    =    epsilon    -    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
168	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    -    1;    this.maxIterations  =  maxIterations  -  1;	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
169	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    this.maxIterations  =  maxIterations  -  1;	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
170	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  -  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
171	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  -  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
172	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  -  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
173	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  -  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	9	None	add
174	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	replace
175	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	replace
176	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    this.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	replace
177	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	45	1	replace
178	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations;	          this.maxIterations    =    maxIterations;    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	45	1	replace
179	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
180	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
181	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	1	None	add
182	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  This.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  This	1	None	add
183	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  maxIters  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  maxIters	1	None	add
184	[BUG]  [BUGGY]  int  maxIterations  =  this.maxIterations  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  this.maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  this.maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    int    maxIterations    =    this.maxIterations    +    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
185	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  +  1;  int  maxIterations  =  this.maxIterations  +  1;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  +  1;  int  maxIterations  =  this.maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  +  1;  int  maxIterations  =  this.maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    int    maxIterations    =    this.maxIterations    +    1;    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
186	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    0;    this.maxIterations  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
187	[BUG]  [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  0;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    this.maxIterations  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
188	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  this.maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    0;    epsilon  =  0;  this.maxIterations  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
189	[BUG]  [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  this.maxIterations  =  0;  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  this.maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    epsilon  =  0;  this.maxIterations  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
190	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    0;    epsilon  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
191	[BUG]  [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  epsilon  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    epsilon  =  0;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
192	[BUG]  [BUGGY]  this.maxIterations  =  0;  int  maxIterations  =  0;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  int  maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    int  maxIterations  =  0;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	36	None	add
193	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
194	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
195	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
196	[BUG]  [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
197	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
198	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    /    1;    this.maxIterations  =  maxIterations  /  1;	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
199	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    this.maxIterations  =  maxIterations  /  1;	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
200	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  /  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.maxIterations  =  maxIterations  /  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	add
201	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  /  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.maxIterations  =  maxIterations  /  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	add
202	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  /  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations  /  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	add
203	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  /  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.maxIterations  =  maxIterations  /  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	7	None	add
204	[BUG]  [BUGGY]  this.maxIterations  =  MAX_EPSILON;  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  MAX_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  MAX_EPSILON;	  this.maxIterations    =    MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	35	None	replace
205	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS,  mean);  [CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_MAX_ITERATIONS,  mean);	  this.maxIterations    =    Math.max(deFAULT_EPSILON,    mean);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS	67	None	replace
206	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  mean);	  this.maxIterations    =    Math.max(mean,    DEFAULT_EPSILON,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double,double)	66	None	replace
207	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
208	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
209	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
210	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  3;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
211	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  int  maxIterations  =  maxIterations  +  2;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  int  maxIterations  =  maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    +    2;    int  maxIterations  =  maxIterations  +  2;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	add
212	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
213	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
214	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  mean  +  2;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  mean  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  mean  +  2;	  this.maxIterations    =    maxIterations    -    mean    +    1;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
215	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  mean  +  3;  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  mean  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  mean  +  3;	  this.maxIterations    =    maxIterations    -    mean    +    1;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
216	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    int  maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	add
217	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    This.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	13	None	add
218	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIters  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  maxIters  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIters  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIters  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  maxIters	13	None	add
219	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean  =  DEFAULT_EPSILON  +  1;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	32	6	replace
220	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON  +  1;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	32	6	replace
221	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON;  [CE]  variable  DEFAULT_EPSILON  might  not  have  been  initialized  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    int  DEFAULT_EPSILON  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  DEFAULT_EPSILON  might  not  have  been  initialized	31	None	add
222	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean    =    DEFAULT_EPSILON;    p  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
223	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    p  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
224	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  This.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  This.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    This.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	31	None	add
225	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	28	None	replace
226	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  mean);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(deFAULT_EPSILON  /  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(deFAULT_EPSILON  /  mean);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	63	None	replace
227	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    /    1;    this.maxIterations  =  maxIterations  /  2;	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
228	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    this.maxIterations  =  maxIterations  /  2;	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
229	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.getMaxIterations()  *  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	40	None	replace
230	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
231	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
232	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
233	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAIN_ITERATIONS;  epsilon  =  DEFAULT_MAIN_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MAIN_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAIN_ITERATIONS;  epsilon  =  DEFAULT_MAIN_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAIN_ITERATIONS;  epsilon  =  DEFAULT_MAIN_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAIN_ITERATIONS	5	None	add
234	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  -  3;	  this.maxIterations    =    maxIterations    -    1;    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
235	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  3;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  3;	  this.maxIterations    =    maxIterations    -    1;    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
236	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  3;  This.maxIterations  =  maxIterations  +  3;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  3;  This.maxIterations  =  maxIterations  +  3;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  3;  This.maxIterations  =  maxIterations  +  3;	  this.maxIterations    =    maxIterations    +    1;    This.maxIterations    =    maxIterations    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	73	None	replace
237	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_IMAGES  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_IMAGES	1	None	add
238	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_IMAGES  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_IMAGES;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_IMAGES	1	None	add
239	[BUG]  [BUGGY]  this.maxIterations  =  mean  -  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  mean  -  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  mean  -  DEFAULT_EPSILON;	  this.maxIterations    =    DEFAULT_EPSILON    -    mean;    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
240	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  mean);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  mean);	  this.maxIterations    =    Math.max(deFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double)	67	None	replace
241	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  deFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  deFAULT_EPSILON);	  this.maxIterations    =    Math.max(deFAULT_EPSILON,    mean);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	67	None	replace
242	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
243	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  4;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
244	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  5;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  5;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
245	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  5;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  5;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  5;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
246	[BUG]  [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
247	[BUG]  [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
248	[BUG]  [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
249	[BUG]  [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    if(epsilon  <  =  0)  {  this.mean  =  epsilon;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
250	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  this.maxIterations  =  DEFAULT_EPSILON;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MIN_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	56	None	replace
251	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON  +  mean;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON  +  mean;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  DEFAULT_EPSILON  +  mean;	  this.maxIterations    =    maxIterations    /    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
252	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  normal,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)	24	None	replace
253	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  epsilon  +  1);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations,  epsilon  +  1);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
254	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  -  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  -  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
255	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  *  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	80	1	replace
256	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	80	1	replace
257	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  -  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  -  DEFAULT_EPSILON_MEAN;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  -  DEFAULT_EPSILON_MEAN;	  this.maxIterations    =    maxIterations    -    DEFAULT_EPSILON_MEAN;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	69	None	replace
258	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON_MEAN;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  DEFAULT_EPSILON_MEAN;	  this.maxIterations    =    maxIterations    -    DEFAULT_EPSILON_MEAN;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	69	None	replace
259	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  epsilon;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  this.maxIterations  =  epsilon;	          this.maxIterations    =    maxIterations;    this.maxIterations    =    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	77	None	replace
260	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  epsilon);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  epsilon);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	52	None	replace
261	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(message  /  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(message  /  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(message  /  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  cannot  find  symbol  message	52	None	replace
262	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  This.maxIterations  =  DEFAULT_EPSILON;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    This.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  This	3	None	replace
263	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    *    1;    this.maxIterations  =  maxIterations  *  2;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
264	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  this.maxIterations  =  maxIterations  *  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    this.maxIterations  =  maxIterations  *  2;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
265	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  int  maxIterations  =  normal.maxIterations  *  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  int  maxIterations  =  normal.maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    int  maxIterations  =  normal.maxIterations  *  1;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
266	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  int  maxIterations  =  this.maxIterations  *  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  int  maxIterations  =  this.maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    int  maxIterations  =  this.maxIterations  *  1;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
267	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
268	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
269	[BUG]  [BUGGY]  timeout  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;	  this.mean    =    mean;    	compilable	timeout	30	1	replace
270	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  timeout  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;	  this.mean    =    mean;    	compilable	timeout	30	1	replace
271	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIters  =  maxIterations;  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIters  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    this.maxIters  =  maxIterations;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  cannot  find  symbol  maxIters	44	None	add
272	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  *  4;	  this.maxIterations    =    maxIterations    *    1;    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
273	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  4;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  *  4;	  this.maxIterations    =    maxIterations    *    1;    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
274	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
275	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  4;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    +    2;    this.maxIterations  =  maxIterations  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	57	1	add
276	[BUG]  [BUGGY]  this.maxIterations  =  MAX_ITERATIONS  -  maxIterations;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  MAX_ITERATIONS  -  maxIterations;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  MAX_ITERATIONS  -  maxIterations;	  this.maxIterations    =    DEFAULT_EPSILON    -    maxIterations;    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	41	None	replace
277	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  +  4;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	17	1	replace
278	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  4;  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  4;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  4;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	17	1	replace
279	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  mean);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  mean);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	62	None	replace
280	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	62	None	replace
281	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
282	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  defsilon);  [CE]  cannot  find  symbol  defsilon  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  defsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_EPSILON,  defsilon);	  this.maxIterations    =    Math.max(epsilon    /    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  cannot  find  symbol  defsilon	55	None	replace
283	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal  /  DEFAULT_EPSILON);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal  /  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal  /  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    DEFAULT_EPSILON);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	53	None	replace
284	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	add
285	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  maxIterations);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON  /  maxIterations);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	78	None	replace
286	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON_MEAN;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIters    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	70	None	replace
287	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON;  this.maxIters  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIters    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
288	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    0;    this.maxIterations  =  1;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
289	[BUG]  [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  1;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  this.maxIterations  =  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    this.maxIterations  =  1;	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
290	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  normal,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(mean,    DEFAULT_EPSILON,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double)	66	None	replace
291	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);	  this.maxIterations    =    Math.max(mean,    DEFAULT_EPSILON,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	66	None	replace
292	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(mean,  maxIterations);  [CE]  possible  loss  of  precision  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(mean,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(mean,  maxIterations);	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
293	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(deFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(deFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(deFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	23	None	replace
294	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON_MEAN;  int  maxIterations  =  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    int    maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	4	None	replace
295	[BUG]  [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
296	[BUG]  [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  throw  new  MathRuntimeException( " ");  }	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
297	[BUG]  [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  super.setMaxIterations(maxIterations);  }  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  super.setMaxIterations(maxIterations);  }  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  super.setMaxIterations(maxIterations);  }	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
298	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
299	[BUG]  [BUGGY]  this.maxIterations  =  0;  This.maxIterations  =  0;  [CE]  cannot  find  symbol  This  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  0;  This.maxIterations  =  0;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    0;    This.maxIterations  =  0;	  	non-compiled	[CE]  cannot  find  symbol  This	36	None	add
300	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  *  1;  This.maxIterations  =  maxIterations  *  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  *  1;  This.maxIterations  =  maxIterations  *  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    *    1;    This.maxIterations  =  maxIterations  *  1;	  	non-compiled	[CE]  cannot  find  symbol  This	11	None	add
301	[BUG]  [BUGGY]  this.maxIterations  =  epsilon  /  1;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  epsilon  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  epsilon  /  1;	  this.maxIterations    =    maxIterations    /    1;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
302	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  -  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
303	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  -  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  -  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    2;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
304	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  DEFAULT_MAX_ITERATIONS  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  DEFAULT_MAX_ITERATIONS  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    int  DEFAULT_MAX_ITERATIONS  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
305	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
306	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	31	6	add
307	[BUG]  [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]          this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;  this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	                this.maxIterations        =        maxIterations;        this.maxIterations    =    maxIterations;    this.maxIterations  =  epsilon;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  possible  loss  of  precision	44	None	add
308	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_IMAGES  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAGES;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_IMAGES;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_IMAGES	5	None	add
309	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MASK_ITERATIONS;  epsilon  =  DEFAULT_MASK_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MASK_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MASK_ITERATIONS;  epsilon  =  DEFAULT_MASK_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        epsilon    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MASK_ITERATIONS;  epsilon  =  DEFAULT_MASK_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MASK_ITERATIONS	5	None	add
310	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  +  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    maxIterations);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	64	1	replace
311	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  DEFAULT_MAX_ITERATIONS;	  this.maxIterations    =    maxIterations    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    maxIterations);    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	64	1	replace
312	[BUG]  [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  maxIterations;  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  maxIterations;  }  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  maxIterations;  }	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
313	[BUG]  [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  DEFAULT_EPSILON;  }  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	if(maxIterations  <  =  0)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  else  {  this.maxIterations  =  DEFAULT_EPSILON;  }	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
314	[BUG]  [BUGGY]  this.mean  =  epsilon;  This.mean  =  epsilon;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  This.mean  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    This.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  This	33	None	add
315	[BUG]  [BUGGY]  this.mean  =  epsilon;  int  epsilon  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  int  epsilon  =  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    int  epsilon  =  epsilon;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	33	None	add
316	[BUG]  [BUGGY]  this.mean  =  epsilon;  this.mean  =  epsileon;  [CE]  cannot  find  symbol  epsileon  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  epsilon;  this.mean  =  epsileon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    epsilon;    this.mean  =  epsileon;	  	non-compiled	[CE]  cannot  find  symbol  epsileon	33	None	add
317	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  normal,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  normal,  maxIterations);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,int)	24	None	replace
318	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  p,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  p,  epsilon,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  p,  epsilon,  maxIterations);	  this.maxIterations    =    Math.max(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	24	None	replace
319	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  epsilon);  [CE]  ')'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(Math.max(mean  /  epsilon);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    epsilon);    	non-compiled	[CE]  ')'  expected	52	None	replace
320	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  int  maxIterations  =  this.maxIterations  +  2;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  +  1;  int  maxIterations  =  this.maxIterations  +  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  1;  int  maxIterations  =  this.maxIterations  +  2;	  this.maxIterations    =    maxIterations    +    1;    int    maxIterations    =    this.maxIterations    +    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
321	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	78	None	replace
322	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations  /  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(maxIterations    /    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
323	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON));  [CE]  no  suitable  method  found  for  max(double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON));	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	53	None	replace
324	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON);  [CE]  ')'  expected  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(Math.max(mean  /  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(deFAULT_EPSILON    /    DEFAULT_EPSILON);    	non-compiled	[CE]  ')'  expected	53	None	replace
325	[BUG]  [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_IMAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  DEFAULT_IMAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        DEFAULT_MAX_ITERATIONS;        this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  DEFAULT_IMAX_ITERATIONS;  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_IMAX_ITERATIONS	1	None	add
326	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
327	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations  +  1;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
328	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  2;  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  /  2;  this.maxIterations  =  maxIterations  /  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
329	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  2;  this.maxIterations  =  maxIterations  /  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  2;  this.maxIterations  =  maxIterations  /  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  /  2;  this.maxIterations  =  maxIterations  /  2;	  this.maxIterations    =    maxIterations    +    1;    this.maxIterations    =    maxIterations    +    1;    	compilable	  [FE]  MathRuntimeException$4  	14	1	replace
330	[BUG]  [BUGGY]  int  maxIterations  =  defULT_EPSILON.maxIterations;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  defULT_EPSILON.maxIterations;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  defULT_EPSILON.maxIterations;	  int    maxIterations    =    mean.maxIterations;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	68	None	replace
331	[BUG]  [BUGGY]  this.maxIterations  =  Math.min(DEFAULT_EPSILON,  maxIterations);  [CE]  possible  loss  of  precision  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.min(DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.min(DEFAULT_EPSILON,  maxIterations);	  this.maxIterations    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
332	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  MEAN);  [CE]  cannot  find  symbol  MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  MEAN);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(normal,  DEFAULT_EPSILON,  MEAN);	  this.maxIterations    =    Math.max(mean,    DEFAULT_EPSILON,    normal);    	non-compiled	[CE]  cannot  find  symbol  MEAN	66	None	replace
333	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean,  DEFAULT_EPSILON));  [CE]  no  suitable  method  found  for  max(double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(Math.max(mean,  DEFAULT_EPSILON));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(Math.max(mean,  DEFAULT_EPSILON));	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	27	None	replace
334	[BUG]  [BUGGY]  int  maxIterations  =  this.mean.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  this.mean.getMaxIterations()  -  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  this.mean.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	40	None	replace
335	[BUG]  [BUGGY]  int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	int  maxIterations  =  normal.maxIterations  -  DEFAULT_MAX_ITERATIONS;	  int    maxIterations    =    normal.maxIterations    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	51	None	replace
336	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  epsilon  =  deFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations;  epsilon  =  deFAULT_MAX_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations;  epsilon  =  deFAULT_MAX_ITERATIONS;	  this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    epsilon    =    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS	6	None	replace
337	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  epsilon);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
338	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  normal);  [CE]  no  suitable  method  found  for  max(int,NormalDistribution)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(maxIterations,  normal);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(maxIterations,  normal);	  this.maxIterations    =    Math.max(maxIterations,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,NormalDistribution)	22	None	replace
339	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  int  this.maxIterations  =  maxIterations  -  1;  [CE]  not  a  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  int  this.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    int  this.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  not  a  statement	9	None	add
340	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  This.maxIterations  =  maxIterations  -  1;  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  This.maxIterations  =  maxIterations  -  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    This.maxIterations  =  maxIterations  -  1;	  	non-compiled	[CE]  cannot  find  symbol  This	9	None	add
341	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations    =    maxIterations    -    1;    this.maxIterations  =  maxIterations  -  2;	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
342	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  2;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  1;  this.maxIterations  =  maxIterations  -  2;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    1;    this.maxIterations  =  maxIterations  -  2;	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
343	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  p);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  p);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
344	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	29	None	add
345	[BUG]  [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	29	None	add
346	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  This.maxIterations  =  maxIterations  /  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  This.maxIterations  =  maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    This.maxIterations  =  maxIterations  /  1;	  	non-compiled	[CE]  cannot  find  symbol  This	7	None	add
347	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  /  1;  int  maxIterations  =  this.maxIterations  /  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  /  1;  int  maxIterations  =  this.maxIterations  /  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    /    1;    int  maxIterations  =  this.maxIterations  /  1;	  	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	7	None	add
348	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MIN_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_MAX_ITERATIONS;  this.maxIterations  =  maxIterations  -  DEFAULT_MIN_ITERATIONS;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations    =    maxIterations    -    DEFAULT_MAX_ITERATIONS;    this.maxIterations  =  maxIterations  -  DEFAULT_MIN_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	79	None	add
349	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
350	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  2;  this.maxIterations  =  maxIterations  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
351	[BUG]  [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  minIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [CE]  cannot  find  symbol  minIterations  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  maxIterations  +  1;  this.maxIterations  =  minIterations  +  1;  this.maxIterations  =  maxIterations  +  1;  [BUGGY]      }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations        =        maxIterations        +        1;        this.maxIterations    =    maxIterations    +    1;    this.maxIterations  =  minIterations  +  1;  this.maxIterations  =  maxIterations  +  1;	  	non-compiled	[CE]  cannot  find  symbol  minIterations	13	None	add
352	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;	  this.mean    =    mean;    	non-compiled	[CE]  incompatible  types	30	None	replace
353	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_MEAN  :  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.mean  =  DEFAULT_EPSILON?  DEFAULT_MEAN  :  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.mean  =  DEFAULT_EPSILON?  DEFAULT_MEAN  :  DEFAULT_EPSILON;	  this.mean    =    mean;    	non-compiled	[CE]  incompatible  types	30	None	replace
354	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
355	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean  /  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(mean    /    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	63	None	replace
356	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  mean,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int)	28	None	replace
357	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	26	None	replace
358	[BUG]  [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  deFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;      [BUGGY]  this.maxIterations  =  Math.max(DEFAULT_EPSILON,  deFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  Math.max(DEFAULT_EPSILON,  deFAULT_MAX_ITERATIONS);	  this.maxIterations    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_MAX_ITERATIONS	26	None	replace
