bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    this.maxIterations  =  epsilon;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  epsilon;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  epsilon;		non-compiled	[CE]  possible  loss  of  precision	22	None	add
2	[BUG]  [BUGGY]    this.maxIterations  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  DEFAULT_EPSILON;		non-compiled	[CE]  possible  loss  of  precision	22	None	add
3	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  maxIterations;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	    this.maxIterations  =  maxIterations;		compilable	  [FE]  MathRuntimeException$4  	22	1	add
4	[BUG]  [BUGGY]    this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  maxIterations;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  maxIterations;		compilable	  [FE]  MathRuntimeException$4  	22	1	add
5	[BUG]  [BUGGY]    this.maxIterations  =  Math.max(epsilon,  maxIterations);  [CE]  possible  loss  of  precision  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  Math.max(epsilon,  maxIterations);  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  Math.max(epsilon,  maxIterations);		non-compiled	[CE]  possible  loss  of  precision	22	None	add
6	[BUG]  [BUGGY]    this.maxIterations  =  Math.max(epsilon  /  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  Math.max(epsilon  /  DEFAULT_EPSILON);  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  Math.max(epsilon  /  DEFAULT_EPSILON);		non-compiled	[CE]  no  suitable  method  found  for  max(double)	22	None	add
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	this.maxIterations  =  maxIterations;  	compilable	  [FE]  MathRuntimeException$4  	21	1	replace
8	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	this.maxIterations  =  maxIterations;  	compilable	  [FE]  MathRuntimeException$4  	21	1	replace
9	[BUG]  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  DEFAULT_EPSILON_MEAN;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  DEFAULT_EPSILON_MEAN;	this.maxIterations  =  maxIterations;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	21	None	replace
10	[BUG]  [BUGGY]    int  maxIterations  =  normal.getMaxIterations();  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    int  maxIterations  =  normal.getMaxIterations();  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    int  maxIterations  =  normal.getMaxIterations();		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
11	[BUG]  [BUGGY]    this.mean  =  normal;  [CE]  incompatible  types  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.mean  =  normal;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.mean  =  normal;		non-compiled	[CE]  incompatible  types	22	None	add
12	[BUG]  [BUGGY]    int  maxIterations  =  normal.maxIterations;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    int  maxIterations  =  normal.maxIterations;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    int  maxIterations  =  normal.maxIterations;		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
13	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	add	this.maxIterations  =  maxIterations  +  1;	this.maxIterations  =  maxIterations;  	compilable	  [FE]  MathRuntimeException$4  	21	1	replace
14	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  maxIterations  +  1;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  +  1;	this.maxIterations  =  maxIterations;  	compilable	  [FE]  MathRuntimeException$4  	21	1	replace
15	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  mean;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  maxIterations  -  mean;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  mean;	this.maxIterations  =  maxIterations;  	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
16	[BUG]  [BUGGY]    this.maxIterations  =  Math.max(DEFAULT_EPSILON,  normal);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    this.maxIterations  =  Math.max(DEFAULT_EPSILON,  normal);  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	    this.maxIterations  =  Math.max(DEFAULT_EPSILON,  normal);		non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution)	22	None	add
17	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]  this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON;  [BUGGY]  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	99	99	1	replace	this.maxIterations  =  maxIterations  -  DEFAULT_EPSILON;	this.maxIterations  =  maxIterations;  	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
