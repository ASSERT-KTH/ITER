bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	8	None	replace
2	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	8	None	replace
3	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	8	None	replace
4	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
5	[BUG]  [BUGGY]  epsilon  -=  p;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
6	[BUG]  [BUGGY]  ble  -=  p;  epsilon  -=  p;  [CE]  cannot  find  symbol  ble  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  ble  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	ble  -=  p;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	non-compiled	[CE]  cannot  find  symbol  ble	69	None	replace
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
8	[BUG]  [BUGGY]  p  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  Math.max(0.0,  p);	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
10	[BUG]  [BUGGY]  p  -=  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  Math.max(0.0,  p);	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
11	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.sqrt(Math.pow(10,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
12	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.pow(10,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
13	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  p),  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(10,  p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.pow(10,  p),  DEFAULT_EPSILON);	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	140	None	replace
14	[BUG]  [BUGGY]  MutableMath.sqrt(Math.pow(10,  p));  [CE]  cannot  find  symbol  MutableMath  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableMath.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableMath.sqrt(Math.pow(10,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	non-compiled	[CE]  cannot  find  symbol  MutableMath	140	None	replace
15	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(10,  p  +  1));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.sqrt(Math.pow(10,  p  +  1));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
16	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  p  +  1));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(10,  p  +  1));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.pow(10,  p  +  1));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
17	[BUG]  [BUGGY]  timeout  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  /  DEFAULT_EPSILON  +  1;	  mean    =    p    /    DEFAULT_EPSILON;    timeout    	compilable	timeout	138	1	replace
18	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  +  1;  timeout  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  /  DEFAULT_EPSILON  +  1;	  mean    =    p    /    DEFAULT_EPSILON;    timeout    	compilable	timeout	138	1	replace
19	[BUG]  [BUGGY]  timeout  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  /  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  mean    =    p    /    DEFAULT_EPSILON;    timeout    	compilable	timeout	138	1	replace
20	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  timeout  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  /  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  mean    =    p    /    DEFAULT_EPSILON;    timeout    	compilable	timeout	138	1	replace
21	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MASK;  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MASK;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MASK;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    DEFAULT_MASK;    	non-compiled	[CE]  ';'  expected	130	None	replace
22	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  &&  DEFAULT_MAX_ITERATIONS  >  0;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  &&  DEFAULT_MAX_ITERATIONS  >  0;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  &&  DEFAULT_MAX_ITERATIONS  >  0;	  mean    =    DEFAULT_EPSILON    ||    DEFAULT_MAX_ITERATIONS    >    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	124	None	replace
23	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  1;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  1;	  mean    =    DEFAULT_EPSILON    ||    DEFAULT_MAX_ITERATIONS    >    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	124	None	replace
24	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  DEFAULT_EPSILON;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    ||    DEFAULT_MAX_ITERATIONS    >    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	124	None	replace
25	[BUG]  [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
26	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  this.epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(epsilon,  this.epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(epsilon,  this.epsilon,  maxIterations);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
27	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  this.epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  this.epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  this.epsilon,  maxIterations);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
28	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  Integer    epsilon    =    Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	143	None	replace
29	[BUG]  [BUGGY]  Integer  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	143	None	replace
30	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
31	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
32	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
33	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
34	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
35	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
36	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
37	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	58	None	add
38	[BUG]  [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	replace
39	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	replace
40	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);	  Integer    epsilon    =    Math.max(definance,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	118	None	replace
41	[BUG]  [BUGGY]  Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  Integer    epsilon    =    Math.max(definance,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	118	None	replace
42	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
43	[BUG]  [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [FE]  MathRuntimeException$4  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
44	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
45	[BUG]  [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
46	[BUG]  [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                  FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	70	None	replace
47	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                    FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
48	[BUG]  [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]                    FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
49	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	117	None	replace
50	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  n	117	None	replace
51	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	117	None	replace
52	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	117	None	replace
53	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
54	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
55	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	122	None	replace
56	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);	  Integer    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
57	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
58	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);	  Integer    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
59	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  &  DEFAULT_EPSILON  :  p;  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  &  DEFAULT_EPSILON  :  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  &  DEFAULT_EPSILON  :  p;	  mean    =    DEFAULT_EPSILON    |    DEFAULT_EPSILON    :    p;    	non-compiled	[CE]  ';'  expected	29	None	replace
60	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_MAX_ITERATIONS  :  p;  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_MAX_ITERATIONS  :  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  |  DEFAULT_MAX_ITERATIONS  :  p;	  mean    =    DEFAULT_EPSILON    |    DEFAULT_EPSILON    :    p;    	non-compiled	[CE]  ';'  expected	29	None	replace
61	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  -  DEFAULT_EPSILON  :  p;  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  -  DEFAULT_EPSILON  :  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  -  DEFAULT_EPSILON  :  p;	  mean    =    DEFAULT_EPSILON    |    DEFAULT_EPSILON    :    p;    	non-compiled	[CE]  ';'  expected	29	None	replace
62	[BUG]  [BUGGY]  mean  =  p  |  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  |  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  |  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    |    DEFAULT_EPSILON    :    p;    	non-compiled	[CE]  ';'  expected	29	None	replace
63	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
64	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
65	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
66	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
67	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
68	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
69	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
70	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
71	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	double  mean  =  Math.min(Math.abs(p),  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	104	6	replace
72	[BUG]  [BUGGY]  double  mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  mean  =  Math.min(Math.abs(p),  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	104	6	replace
73	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p),  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
74	[BUG]  [BUGGY]  long  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  long  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	long  mean  =  Math.min(Math.abs(p),  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
75	[BUG]  [BUGGY]  float  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  float  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	float  mean  =  Math.min(Math.abs(p),  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
76	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(defult_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	80	None	replace
77	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definance,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definance,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definance,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(defult_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	80	None	replace
78	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  +  3;	  mean    =    p    +    2;    	compilable	  [FE]  MathRuntimeException$4  	116	6	replace
79	[BUG]  [BUGGY]  mean  =  p  +  3;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  3;	  mean    =    p    +    2;    	compilable	  [FE]  MathRuntimeException$4  	116	6	replace
80	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  p  +  2;	  mean    =    p    +    2;    	compilable	  [FE]  FunctionEvaluationException  	116	10	replace
81	[BUG]  [BUGGY]  mean  -=  p  +  2;  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p  +  2;	  mean    =    p    +    2;    	compilable	  [FE]  FunctionEvaluationException  	116	10	replace
82	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(defult_MAX_ITERATIONS),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(defult_MAX_ITERATIONS),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(defult_MAX_ITERATIONS),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(defult_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	147	None	replace
83	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(definance));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(definance));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(definance));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(defult_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	147	None	replace
84	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
85	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
86	[BUG]  [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  defult  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  defult	153	None	replace
87	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  MAX_ITERATIONS,  epsilon,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  MAX_ITERATIONS,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  MAX_ITERATIONS,  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	10	None	replace
88	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	10	None	replace
89	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	10	None	replace
90	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
91	[BUG]  [BUGGY]  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
92	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  ;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	;  p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
93	[BUG]  [BUGGY]  ;  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  ;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	;  p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
94	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  p  =  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  +  1;  p  =  p  +  1;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	7	replace
95	[BUG]  [BUGGY]  mean  =  p  +  1;  p  =  p  +  1;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  p  =  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  1;  p  =  p  +  1;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	7	replace
96	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	115	None	add
97	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	115	None	add
98	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  2);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  2);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  2);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	115	None	add
99	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	add
100	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  mean  =  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    p    +    2;    mean  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
101	[BUG]  [BUGGY]  mean  =  p  +  2;  mean  =  p  +  2;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  mean  =  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    mean  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
102	[BUG]  [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(deFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	98	None	replace
103	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  0);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  0);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  0);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	98	None	replace
104	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  ';'  expected	28	None	replace
105	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS  +  1;  [CE]  incompatible  types  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MAX_ITERATIONS  +  1;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  incompatible  types	28	None	replace
106	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	6	None	replace
107	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	6	None	replace
108	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(epsilon));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(epsilon));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(epsilon));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	6	None	replace
109	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    p    /    DEFAULT_EPSILON;    mean  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	  [FE]  MathRuntimeException$4  	137	1	add
110	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  mean  =  p  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    mean  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	  [FE]  MathRuntimeException$4  	137	1	add
111	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  Mean  =  p  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Mean  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  Mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    Mean  =  p  /  DEFAULT_EPSILON;	  timeout    	non-compiled	[CE]  cannot  find  symbol  Mean	137	None	add
112	[BUG]  [BUGGY]  timeout  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  p  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    p    /    DEFAULT_EPSILON;    p  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	timeout	137	1	add
113	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  p  =  p  /  DEFAULT_EPSILON;  timeout  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  p  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    p  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	timeout	137	1	add
114	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  =  p  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    =  p  /  DEFAULT_EPSILON;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	137	None	add
115	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  Math.sqrt(mean);  mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    p    /    DEFAULT_EPSILON;    Math.sqrt(mean);  mean  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	  [FE]  MathRuntimeException$4  	137	1	add
116	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  Math.sqrt(mean);  mean  =  p  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  Math.sqrt(mean);  mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    Math.sqrt(mean);  mean  =  p  /  DEFAULT_EPSILON;	  timeout    	compilable	  [FE]  MathRuntimeException$4  	137	1	add
117	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	126	None	replace
118	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	126	None	replace
119	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MASK_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MASK_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MASK_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	126	None	replace
120	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	62	None	replace
121	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  n  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	62	None	replace
122	[BUG]  [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
123	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MESSAGES);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MESSAGES);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MESSAGES);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	62	None	replace
124	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(epsilon,  maxIterations);	  PoissonDistributionImpl(p,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
125	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  maxIterations,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  maxIterations,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  maxIterations,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
126	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  maxIterations,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl(p,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
127	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
128	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
129	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
130	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  n  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  n	61	None	replace
131	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  n  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  n	61	None	replace
132	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	61	None	replace
133	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
134	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
135	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  0,  DEFAULT_EPSILON);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
136	[BUG]  [BUGGY]  int  mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	88	None	replace
137	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
138	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
139	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
140	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
141	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
142	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
143	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
144	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	127	None	add
145	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
146	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
147	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  maxIterations,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  maxIterations,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
148	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  1;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	9	replace
149	[BUG]  [BUGGY]  p  -=  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  1;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	9	replace
150	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  DEFAULT_MAX_ITERATIONS;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	8	replace
151	[BUG]  [BUGGY]  p  -=  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  DEFAULT_MAX_ITERATIONS;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	8	replace
152	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  2;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	7	replace
153	[BUG]  [BUGGY]  p  -=  2;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  2;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	7	replace
154	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  3;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	7	replace
155	[BUG]  [BUGGY]  p  -=  3;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  3;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	7	replace
156	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	113	None	replace
157	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	113	None	replace
158	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	113	None	replace
159	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  FastMath.sqrt(p,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  FastMath.sqrt(p,  maxIterations);	  int    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
160	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);	  int    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
161	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
162	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
163	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
164	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definable,  maxIterations,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definable,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definable,  maxIterations,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(definable,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
165	[BUG]  [BUGGY]  int  epsilon  =  Math.min(definable,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(definable,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(definable,  maxIterations);	  int    epsilon    =    Math.max(definable,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
166	[BUG]  [BUGGY]  double  epsilon  =  Math.max(definable,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(definable,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(definable,  maxIterations);	  int    epsilon    =    Math.max(definable,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
167	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
168	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
169	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
170	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  n	128	None	replace
171	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	this.mean  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
172	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	this.mean  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
173	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
174	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	this.mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	128	6	replace
175	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	37	None	add
176	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	37	None	add
177	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p  +  1);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	37	None	add
178	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	37	None	add
179	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));	  	non-compiled	[CE]  ';'  expected	37	None	add
180	[BUG]  [BUGGY]  int  mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  int    mean    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
181	[BUG]  [BUGGY]  int  mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    mean    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
182	[BUG]  [BUGGY]  int  mean  =  Math.max(normal,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(NormalDistribution,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.max(normal,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.max(normal,  DEFAULT_MAX_ITERATIONS);	  int    mean    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,int)	109	None	replace
183	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
184	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
185	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_SECONDS),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_SECONDS),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_SECONDS),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
186	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
187	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_EPSILON  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_EPSILON  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_EPSILON  +  1);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	add
188	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
189	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  =  DEFAULT_EPSILON  +  1;  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  =  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
190	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
191	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.sqrt(Math.abs(p));	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	72	6	replace
192	[BUG]  [BUGGY]  Math.sqrt(Math.abs(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.abs(p));	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	72	6	replace
193	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p));  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.sqrt(Math.abs(p));  mean  -=  p;	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	72	10	replace
194	[BUG]  [BUGGY]  Math.sqrt(Math.abs(p));  mean  -=  p;  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p));  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.abs(p));  mean  -=  p;	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	72	10	replace
195	[BUG]  [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
196	[BUG]  [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON  -  p);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON  -  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.abs(p),  DEFAULT_EPSILON  -  p);	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
197	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MEAN;  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MEAN;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  DEFAULT_MEAN;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    DEFAULT_MEAN;    	non-compiled	[CE]  ';'  expected	102	None	replace
198	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(peer,  FastMath.sqrt(deFAULT_EPSILON));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(peer,  FastMath.sqrt(deFAULT_EPSILON));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(peer,  FastMath.sqrt(deFAULT_EPSILON));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	125	None	replace
199	[BUG]  [BUGGY]  mean  -=  MAX_ITERATIONS;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  MAX_ITERATIONS;	  mean    -=    psilon;    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	119	None	replace
200	[BUG]  [BUGGY]  mean  -=  defult_EPSILON;  [CE]  cannot  find  symbol  defult_EPSILON  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  defult_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  defult_EPSILON;	  mean    -=    psilon;    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	119	None	replace
201	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
202	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
203	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon)/  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon)/  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon)/  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
204	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
205	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
206	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(peer));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(peer));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(peer));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
207	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	14	None	replace
208	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	14	None	replace
209	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  n	83	None	replace
210	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	83	None	replace
211	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	83	None	replace
212	[BUG]  [BUGGY]  Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
213	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  Integer    epsilon    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	43	None	replace
214	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  Integer    epsilon    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	43	None	replace
215	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	47	None	replace
216	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(mean,  maxIterations);	  int    epsilon    =    Math.max(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	47	None	replace
217	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(mean,  maxIterations);	  int    epsilon    =    Math.max(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	47	None	replace
218	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mean,  epsilon);	  int    epsilon    =    Math.max(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	47	None	replace
219	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	86	None	replace
220	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	86	None	replace
221	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	86	None	replace
222	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
223	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
224	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  this.mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  DEFAULT_EPSILON;  this.mean  -=  p;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
225	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  this.mean  -=  p;  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  this.mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON;  this.mean  -=  p;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
226	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  p;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	142	12	replace
227	[BUG]  [BUGGY]  p  -=  p;  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  p;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	142	12	replace
228	[BUG]  [BUGGY]  ble  -=  p;  p  -=  p;  [CE]  cannot  find  symbol  ble  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  ble  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	ble  -=  p;  p  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  cannot  find  symbol  ble	142	None	replace
229	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  epsilon;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	142	10	replace
230	[BUG]  [BUGGY]  p  -=  epsilon;  mean  -=  p;  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  epsilon;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	142	10	replace
231	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	85	None	replace
232	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	85	None	replace
233	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	85	None	replace
234	[BUG]  [BUGGY]  Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
235	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
236	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
237	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
238	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    psilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	replace
239	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  defsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  defsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  defsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    psilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	replace
240	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(defulT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	155	None	replace
241	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	146	None	replace
242	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
243	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
244	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
245	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
246	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
247	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
248	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
249	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
250	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	134	None	replace
251	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
252	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [CE]  possible  loss  of  precision  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
253	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p)/  DEFAULT_EPSILON,  MAX_ITERATIONS);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	105	None	replace
254	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p,  DEFAULT_EPSILON)/  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p,  DEFAULT_EPSILON)/  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p,  DEFAULT_EPSILON)/  DEFAULT_MAX_ITERATIONS);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	105	None	replace
255	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  p  +  3;	  mean    -=    p    +    1;    	compilable	  [FE]  FunctionEvaluationException  	54	10	replace
256	[BUG]  [BUGGY]  mean  -=  p  +  3;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p  +  3;	  mean    -=    p    +    1;    	compilable	  [FE]  FunctionEvaluationException  	54	10	replace
257	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  *  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  p  *  1;	  mean    -=    p    +    1;    	compilable	  [FE]  FunctionEvaluationException  	54	10	replace
258	[BUG]  [BUGGY]  mean  -=  p  *  1;  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  *  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p  *  1;	  mean    -=    p    +    1;    	compilable	  [FE]  FunctionEvaluationException  	54	10	replace
259	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
260	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
261	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  mean  -=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    p    +    1;    mean  -=  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	53	1	add
262	[BUG]  [BUGGY]  mean  -=  p  +  1;  mean  -=  p  +  1;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  mean  -=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    mean  -=  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	53	1	add
263	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(mean,  p  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(mean,  p  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  epsilon  =  Math.max(mean,  p  +  1);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	53	None	add
264	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	53	None	add
265	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.min(mean,  p  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.min(mean,  p  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  epsilon  =  Math.min(mean,  p  +  1);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	53	None	add
266	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(mean,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.max(mean,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  epsilon  =  Math.max(mean,  p);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	53	None	add
267	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
268	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
269	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(defult_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	46	None	replace
270	[BUG]  [BUGGY]  Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.min(definance,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(defult_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	46	None	replace
271	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(maxIterations);	  Integer    epsilon    =    FastMath.sqrt(maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	23	None	replace
272	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(this.maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(this.maxIterations);	  Integer    epsilon    =    FastMath.sqrt(maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	23	None	replace
273	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
274	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
275	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
276	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
277	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  DEFAULT_EPSILON  -=  p;  [CE]  cannot  assign  a  value  to  final  variable  DEFAULT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  DEFAULT_EPSILON  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  DEFAULT_EPSILON  -=  p;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DEFAULT_EPSILON	71	None	add
278	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  normal  -=  p;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  normal  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  normal  -=  p;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	71	None	add
279	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  p  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  p  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	7	add
280	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  p  =  epsilon;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  p  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  p  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	7	add
281	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(definable,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(definable,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(definable,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(defulT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	45	None	replace
282	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
283	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
284	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
285	[BUG]  [BUGGY]  int  epsilon  =  Math.max(defsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(defsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(defsilon,  maxIterations);	  int    epsilon    =    Math.max(definance,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	101	None	replace
286	[BUG]  [BUGGY]  int  epsilon  =  Math.min(definance,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(definance,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(definance,  maxIterations);	  int    epsilon    =    Math.max(definance,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	101	None	replace
287	[BUG]  [BUGGY]  double  epsilon  =  Math.max(definance,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(definance,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(definance,  maxIterations);	  int    epsilon    =    Math.max(definance,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	101	None	replace
288	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	156	None	replace
289	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	156	None	replace
290	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	156	None	replace
291	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(deFAULT_EPSILON));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(deFAULT_EPSILON));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(deFAULT_EPSILON));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	145	None	replace
292	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
293	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
294	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
295	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
296	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  int  p  -=  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  int  p  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    int  p  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  ';'  expected	135	None	add
297	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  Math.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.mean  =  Math.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
298	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  Math.sqrt(p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.mean  =  Math.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.mean  =  Math.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
299	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
300	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
301	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
302	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    p    *    DEFAULT_EPSILON;    mean  =  p  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
303	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  mean  =  p  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    mean  =  p  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
304	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
305	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	74	None	replace
306	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	74	None	replace
307	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON;    mean    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  n	59	None	replace
308	[BUG]  [BUGGY]  mean  =  DEFAULT_PESILON;  [CE]  cannot  find  symbol  DEFAULT_PESILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_PESILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_PESILON;	  mean    =    DEFAULT_EPSILON;    mean    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PESILON	59	None	replace
309	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	19	None	add
310	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	19	None	add
311	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
312	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	19	None	add
313	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
314	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
315	[BUG]  [BUGGY]  int  epsilon  =  Math.min(maxIterations,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(maxIterations,  DEFAULT_EPSILON);	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
316	[BUG]  [BUGGY]  int  epsilon  =  Math.min(EMPTY_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(EMPTY_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(EMPTY_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
317	[BUG]  [BUGGY]  int  epsilon  =  Math.min(Math.max(epsilon,  maxIterations));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(Math.max(epsilon,  maxIterations));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(Math.max(epsilon,  maxIterations));	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
318	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	149	None	replace
319	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	149	None	replace
320	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	149	None	replace
321	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	63	None	replace
322	[BUG]  [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
323	[BUG]  [BUGGY]  n  =  DEFAULT_PESILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_PESILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_PESILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	63	None	replace
324	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  0,  maxIterations);	  Integer    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
325	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  Math.max(0.0,  epsilon);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
326	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  epsilon);  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(0.0,  epsilon);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
327	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  Math.max(0.0,  DEFAULT_EPSILON);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
328	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  DEFAULT_EPSILON);  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(0.0,  DEFAULT_EPSILON);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
329	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  Math.max(0.0,  p  +  1);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
330	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p  +  1);  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(0.0,  p  +  1);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
331	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  DEFAULT_EPSILON  +  1;	  mean    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	52	10	replace
332	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON  +  1;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON  +  1;	  mean    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	52	10	replace
333	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  *  2;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  *  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  *  2;	  mean    -=    DEFAULT_EPSILON;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	52	None	replace
334	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS;	  mean    -=    DEFAULT_EPSILON;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	52	None	replace
335	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
336	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
337	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
338	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
339	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
340	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
341	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
342	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
343	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  p  =  p  +  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  p  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	151	None	add
344	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  +  p  +  1;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
345	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  p  +  1;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
346	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  *  p;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
347	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  *  p;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
348	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  /  p;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
349	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  p;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  /  p;	  mean    =    DEFAULT_EPSILON    +    p;    	compilable	  [FE]  MathRuntimeException$4  	36	6	replace
350	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	78	None	replace
351	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	replace
352	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	replace
353	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	77	None	replace
354	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	91	None	replace
355	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON,  p.epsilon;  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON,  p.epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON,  p.epsilon;	  mean    -=    p.epsilon;    	non-compiled	[CE]  ';'  expected	55	None	replace
356	[BUG]  [BUGGY]  mean  -=  p,  epsilon;  [CE]  ';'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p,  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p,  epsilon;	  mean    -=    p.epsilon;    	non-compiled	[CE]  ';'  expected	55	None	replace
357	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  epsilon;	  mean    -=    p.epsilon;    	compilable	  [FE]  FunctionEvaluationException  	55	10	replace
358	[BUG]  [BUGGY]  mean  -=  epsilon;  [FE]  FunctionEvaluationException  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  epsilon;	  mean    -=    p.epsilon;    	compilable	  [FE]  FunctionEvaluationException  	55	10	replace
359	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  mean  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    Math.max(0.0,    p);    mean  -=  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
360	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  mean  -=  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  mean  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    mean  -=  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
361	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    Math.max(0.0,    p);    Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
362	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
363	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  epsilon  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    Math.max(0.0,    p);    epsilon  -=  Math.max(0.0,  p);	  	compilable	  [FE]  FunctionEvaluationException  	56	8	add
364	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  epsilon  -=  Math.max(0.0,  p);  [FE]  FunctionEvaluationException  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  epsilon  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    epsilon  -=  Math.max(0.0,  p);	  	compilable	  [FE]  FunctionEvaluationException  	56	8	add
365	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  int  mean  -=  Math.max(0.0,  p);  [CE]  ';'  expected  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  int  mean  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    int  mean  -=  Math.max(0.0,  p);	  	non-compiled	[CE]  ';'  expected	56	None	add
366	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  p  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    Math.max(0.0,    p);    p  -=  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	12	add
367	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  p  -=  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]            FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  p  -=  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    p  -=  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	12	add
368	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(deFAULT_EPSILON));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
369	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(deFAULT_EPSILON),  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(deFAULT_EPSILON));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
370	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	3	None	replace
371	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	double  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	150	6	replace
372	[BUG]  [BUGGY]  double  mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	150	6	replace
373	[BUG]  [BUGGY]  int  mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	150	None	replace
374	[BUG]  [BUGGY]  long  mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  long  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	long  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	150	None	replace
375	[BUG]  [BUGGY]  float  mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  float  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	float  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	150	None	replace
376	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
377	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  maxIterations,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  mean,  maxIterations,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
378	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
379	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
380	[BUG]  [BUGGY]  Integer  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	44	None	replace
381	[BUG]  [BUGGY]  double  epsilon  =  Math.max(peer,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(peer,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(peer,  maxIterations);	  int    epsilon    =    Math.max(peer,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	replace
382	[BUG]  [BUGGY]  int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(peer,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	replace
383	[BUG]  [BUGGY]  int  epsilon  =  Math.min(peer,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(peer,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(peer,  maxIterations);	  int    epsilon    =    Math.max(peer,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	replace
384	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	replace
385	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
386	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  normal);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  normal);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  normal);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
387	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
388	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  *  DEFAULT_EPSILON  +  1;	  mean    =    p    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	40	6	replace
389	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  *  DEFAULT_EPSILON  +  1;	  mean    =    p    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	40	6	replace
390	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  this.epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  this.epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.maxIterations,  DEFAULT_EPSILON,  this.epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
391	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
392	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  epsilon,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  epsilon,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  epsilon,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
393	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  1,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  1,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p  +  1,  maxIterations);	  Integer    epsilon    =    FastMath.sqrt(p    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
394	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(maxIterations  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(maxIterations  +  1);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(maxIterations  +  1);	  Integer    epsilon    =    FastMath.sqrt(p    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
395	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  2);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  2);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p  +  2);	  Integer    epsilon    =    FastMath.sqrt(p    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
396	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS  +  1;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	20	6	replace
397	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS  +  1;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	20	6	replace
398	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	20	6	replace
399	[BUG]  [BUGGY]  mean  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	20	6	replace
400	[BUG]  [BUGGY]  timeout  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  *  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	timeout	20	1	replace
401	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_MAX_ITERATIONS;  timeout  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  *  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    	compilable	timeout	20	1	replace
402	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	35	None	add
403	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  mean  =  DEFAULT_EPSILON  +  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    +    p;    mean  =  DEFAULT_EPSILON  +  p;	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
404	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  mean  =  DEFAULT_EPSILON  +  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  mean  =  DEFAULT_EPSILON  +  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    mean  =  DEFAULT_EPSILON  +  p;	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
405	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	35	None	add
406	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	35	None	add
407	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  =  DEFAULT_EPSILON  +  p;  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  =  DEFAULT_EPSILON  +  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    =  DEFAULT_EPSILON  +  p;	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
408	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	7	None	replace
409	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	7	None	replace
410	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  n	106	None	replace
411	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
412	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
413	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  -=  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    int  mean  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  ';'  expected	51	None	add
414	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  this.mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  this.mean  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
415	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  this.mean  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  this.mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  this.mean  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
416	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
417	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
418	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	141	None	add
419	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
420	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
421	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	141	None	add
422	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	141	None	add
423	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
424	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
425	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  /  1;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
426	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  /  1;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
427	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  +  2;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
428	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  2;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
429	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  +  3;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
430	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  3;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  3;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
431	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  float  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	float  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);	  float    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	129	None	replace
432	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
433	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
434	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations,  deFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations,  deFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations,  deFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
435	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
436	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
437	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	73	None	replace
438	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	108	None	replace
439	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	108	None	replace
440	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(definition,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
441	[BUG]  [BUGGY]  int  epsilon  =  Math.min(definition,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(definition,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(definition,  maxIterations);	  int    epsilon    =    Math.max(definition,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
442	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(definition,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
443	[BUG]  [BUGGY]  double  epsilon  =  Math.max(definition,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(definition,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(definition,  maxIterations);	  int    epsilon    =    Math.max(definition,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
444	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  epsilon,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	112	None	replace
445	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	75	None	replace
446	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	75	None	replace
447	[BUG]  [BUGGY]  double  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  double    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	154	None	replace
448	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
449	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
450	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
451	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	41	None	add
452	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
453	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
454	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	41	None	add
455	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
456	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  -=  p;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
457	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
458	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
459	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    int  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	68	None	add
460	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  Math.max(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
461	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  Math.max(epsilon,  maxIterations);  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  Math.max(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
462	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  epsilon  =  Math.abs(epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  epsilon  =  Math.abs(epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    int  epsilon  =  Math.abs(epsilon);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	68	None	add
463	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
464	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
465	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
466	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  Mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  Mean  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  Mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    Mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  Mean	81	None	add
467	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	81	None	add
468	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	81	None	add
469	[BUG]  [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	148	None	replace
470	[BUG]  [BUGGY]  double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	148	None	replace
471	[BUG]  [BUGGY]  double  epsilon  =  Math.max(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	148	None	replace
472	[BUG]  [BUGGY]  double  epsilon  =  Math.max(defulT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(defulT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(defulT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	148	None	replace
473	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	15	None	add
474	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
475	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
476	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
477	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
478	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
479	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  n  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  n	84	None	replace
480	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	84	None	replace
481	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	42	6	replace
482	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	42	6	replace
483	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  epsilon  /  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	42	6	replace
484	[BUG]  [BUGGY]  mean  =  epsilon  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  epsilon  /  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	42	6	replace
485	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(m,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(m,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(m,  DEFAULT_EPSILON);	  Integer    epsilon    =    FastMath.sqrt(m);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	132	None	replace
486	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(mean);	  Integer    epsilon    =    FastMath.sqrt(m);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	132	None	replace
487	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	82	6	replace
488	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	82	6	replace
489	[BUG]  [BUGGY]  timeout  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;	  mean    =    p    +    DEFAULT_EPSILON;    mean    =    p    +    DEFAULT_EPSILON;    	compilable	timeout	82	1	replace
490	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  timeout  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  +  DEFAULT_MAX_ITERATIONS;	  mean    =    p    +    DEFAULT_EPSILON;    mean    =    p    +    DEFAULT_EPSILON;    	compilable	timeout	82	1	replace
491	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mapping,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(mapping,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(mapping,  maxIterations);	  int    epsilon    =    Math.max(mapping,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
492	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(mapping,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
493	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(mapping,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
494	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    p,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	9	None	replace
495	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  epsilon;  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  epsilon;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    epsilon;    	non-compiled	[CE]  ';'  expected	30	None	replace
496	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(10,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
497	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(10,  p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(10,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
498	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(11,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(11,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
499	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(11,  p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(11,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(11,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
500	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(12,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(12,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
501	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(12,  p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(12,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(12,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
502	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(20,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(20,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
503	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(20,  p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(20,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(20,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
504	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(15,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(15,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
505	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(15,  p));  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(15,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(15,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
506	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(peer,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(peer,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(peer,  DEFAULT_EPSILON);	  Integer    epsilon    =    FastMath.sqrt(peer);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	131	None	replace
507	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(this.mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(this.mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(this.mean);	  Integer    epsilon    =    FastMath.sqrt(peer);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	131	None	replace
508	[BUG]  [BUGGY]  int  mean  -=  p;  [CE]  ';'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  -=  p;	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
509	[BUG]  [BUGGY]  int  mean  -=  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  -=  DEFAULT_EPSILON;	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
510	[BUG]  [BUGGY]  int  mean  -=  p.intValue();  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  -=  p.intValue();  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  -=  p.intValue();	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
511	[BUG]  [BUGGY]  n  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  n  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	n  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  n	60	None	replace
512	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    mean  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
513	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  mean  -=  p;  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    mean  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
514	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	64	None	add
515	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	64	None	add
516	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  mean  -=  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  mean  -=  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	64	None	add
517	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	64	None	add
518	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  +  1;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
519	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  +  1;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
520	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  epsilon  /  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
521	[BUG]  [BUGGY]  mean  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  epsilon  /  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
522	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	66	None	add
523	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	66	None	add
524	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    p  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
525	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    p  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
526	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	66	None	add
527	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  p  -=  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  p  -=  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	66	None	add
528	[BUG]  [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  pe  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(pe,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  pe	32	None	replace
529	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  3);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p  +  3);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p  +  3);	  Integer    epsilon    =    FastMath.sqrt(p    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
530	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  3);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  3);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  3);	  Integer    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
531	[BUG]  [BUGGY]  mean  =  0;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  0;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  0;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	106	None	replace
532	[BUG]  [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
533	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	compilable	  [FE]  MathRuntimeException$4  	106	6	replace
534	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	compilable	  [FE]  MathRuntimeException$4  	106	6	replace
535	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  0,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  0,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  0,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    psilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	replace
536	[BUG]  [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(DEFAULT_EPSILON,  maxIterations);	  double    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	154	None	replace
537	[BUG]  [BUGGY]  double  epsilon  =  Math.min(maxIterations,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.min(maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.min(maxIterations,  epsilon);	  double    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	154	None	replace
538	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  psilon);  [CE]  cannot  find  symbol  psilon  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  psilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(0.0,  psilon);	  mean    -=    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	57	None	replace
539	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.min(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  Math.min(0.0,  p);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  MathRuntimeException$4  	57	6	replace
540	[BUG]  [BUGGY]  mean  -=  Math.min(0.0,  p);  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.min(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.min(0.0,  p);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  MathRuntimeException$4  	57	6	replace
541	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  p;  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  p;	  mean    =    DEFAULT_EPSILON    |    DEFAULT_EPSILON    :    p;    	non-compiled	[CE]  ';'  expected	29	None	replace
542	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	156	None	replace
543	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  int  mean  =  p  /  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_EPSILON;  int  mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    /    DEFAULT_EPSILON;    int  mean  =  p  /  DEFAULT_EPSILON;	  timeout    	non-compiled	[CE]  possible  loss  of  precision	137	None	add
544	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
545	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(DEFAULT_EPSILON);	  Integer    epsilon    =    FastMath.sqrt(maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	23	None	replace
546	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
547	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	151	None	add
548	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
549	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
550	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p)/  DEFAULT_MAX_ITERATIONS  +  1);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
551	[BUG]  [BUGGY]  int  mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);	  mean    -=    p;    int    mean    =    Math.min(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
552	[BUG]  [BUGGY]  MutableMath.sqrt(Math.abs(p));  [CE]  cannot  find  symbol  MutableMath  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableMath.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableMath.sqrt(Math.abs(p));	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	non-compiled	[CE]  cannot  find  symbol  MutableMath	72	None	replace
553	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  FastMath.sqrt(p  +  1);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  FastMath.sqrt(p  +  1);	  double    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	87	None	replace
554	[BUG]  [BUGGY]  int  mean  -=  psilon;  [CE]  ';'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  -=  psilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  -=  psilon;	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
555	[BUG]  [BUGGY]  ble  mean  -=  psilon;  [CE]  ';'  expected  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  ble  mean  -=  psilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	ble  mean  -=  psilon;	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
556	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	10	None	replace
557	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  FastMath.sqrt(p);  p  -=  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  FastMath.sqrt(p);  p  -=  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    int  DEFAULT_EPSILON  =  FastMath.sqrt(p);  p  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	135	None	add
558	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  FastMath.sqrt(p);  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    int  DEFAULT_EPSILON  =  FastMath.sqrt(p);	  	non-compiled	[CE]  possible  loss  of  precision	135	None	add
559	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  3;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  3;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  ||  DEFAULT_MAX_ITERATIONS  >  3;	  mean    =    DEFAULT_EPSILON    ||    DEFAULT_MAX_ITERATIONS    >    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	124	None	replace
560	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    mean  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
561	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  mean  -=  p;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    mean  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
562	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN	37	None	add
563	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  mean  =  p  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  mean  =  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  mean  =  p  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	115	None	add
564	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
565	[BUG]  [BUGGY]  int  epsilon  =  Math.min(defult_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(defult_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(defult_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
566	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
567	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(p),  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
568	[BUG]  [BUGGY]  int  mean  =  Math.max(normal,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.max(normal,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.max(normal,  DEFAULT_EPSILON);	  int    mean    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double)	109	None	replace
569	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	77	None	replace
570	[BUG]  [BUGGY]  int  epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(defulT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	155	None	replace
571	[BUG]  [BUGGY]  int  epsilon  =  Math.max(maxIterations,  defULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(maxIterations,  defULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(maxIterations,  defULT_EPSILON);	  int    epsilon    =    Math.max(defulT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	155	None	replace
572	[BUG]  [BUGGY]  int  epsilon  =  Math.max(defULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(defULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(defULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(defulT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	155	None	replace
573	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
574	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	127	1	add
575	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    int  mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	127	None	add
576	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  =  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  =  Math.sqrt(Math.pow(10,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	7	replace
577	[BUG]  [BUGGY]  p  =  Math.sqrt(Math.pow(10,  p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  =  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  =  Math.sqrt(Math.pow(10,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	7	replace
578	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  p;  [CE]  not  a  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  Math.sqrt(Math.abs(p));  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    Math.sqrt(Math.abs(p));  p;	  	non-compiled	[CE]  not  a  statement	71	None	add
579	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
580	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
581	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definance,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(definance,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	101	None	replace
582	[BUG]  [BUGGY]  int  epsilon  =  Math.max(maxIterations,  definance);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(maxIterations,  definance);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(maxIterations,  definance);	  int    epsilon    =    Math.max(definance,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	101	None	replace
583	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	60	None	replace
584	[BUG]  [BUGGY]  Neighbor  mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
585	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON.doubleValue();  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON.doubleValue();	  mean    -=    psilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	119	None	replace
586	[BUG]  [BUGGY]  mean  -=  defULT_EPSILON;  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]          FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  defULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  defULT_EPSILON;	  mean    -=    psilon;    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	119	None	replace
587	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    int  mean  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	51	None	add
588	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  int  mean  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    int  mean  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	51	None	add
589	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  FastMath.sqrt(epsilon));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	6	None	replace
590	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
591	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean  -=  p;  p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
592	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  int  mean  -=  p;  p  -=  p;  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  int  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    int  mean  -=  p;  p  -=  p;	  	non-compiled	[CE]  ';'  expected	66	None	add
593	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
594	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    p  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
595	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  int  mean  =  Math.min(Math.abs(p));  [CE]  no  suitable  method  found  for  min(double)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  int  mean  =  Math.min(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    int  mean  =  Math.min(Math.abs(p));	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	66	None	add
596	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  normal,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  normal,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  normal,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
597	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
598	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	74	None	replace
599	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	31	None	replace
600	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  *  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
601	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  *  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	6	replace
602	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  *  DEFAULT_EPSILON;  p  =  p  *  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	7	replace
603	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  p  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  *  DEFAULT_EPSILON;  p  =  p  *  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    p    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	152	7	replace
604	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	112	None	replace
605	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  p  =  DEFAULT_EPSILON  +  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    +    p;    p  =  DEFAULT_EPSILON  +  p;	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
606	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  p  =  DEFAULT_EPSILON  +  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  p  =  DEFAULT_EPSILON  +  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    p  =  DEFAULT_EPSILON  +  p;	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
607	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  0;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  0;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	6	replace
608	[BUG]  [BUGGY]  p  -=  0;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  0;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  0;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	6	replace
609	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  int  mean  =  Math.max(0.0,  p);  [CE]  possible  loss  of  precision  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  int  mean  =  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    int  mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  possible  loss  of  precision	56	None	add
610	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  p  =  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    Math.max(0.0,    p);    p  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
611	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  p);  p  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  p);  p  =  Math.max(0.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    Math.max(0.0,    p);    p  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	56	1	add
612	[BUG]  [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.epsilon,  p,  DEFAULT_EPSILON);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
613	[BUG]  [BUGGY]  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
614	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  epsilon);	  int    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
615	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.deFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	replace
616	[BUG]  [BUGGY]  mean  -=  psilon;  p  -=  p;  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  psilon;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  psilon;  p  -=  p;	  mean    -=    p;    p    -=    p;    	non-compiled	[CE]  cannot  find  symbol  psilon	67	None	replace
617	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  DEFAULT_EPSILON;  p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
618	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  DEFAULT_EPSILON;  p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
619	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  p  +  1;  p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
620	[BUG]  [BUGGY]  mean  -=  p  +  1;  p  -=  p;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p  +  1;  p  -=  p;	  mean    -=    p;    p    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	67	12	replace
621	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
622	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]            FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON.epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON.epsilon;	  mean    -=    p.epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
623	[BUG]  [BUGGY]  mean  -=  p.epsilon  +  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p.epsilon  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  p.epsilon  +  DEFAULT_EPSILON;	  mean    -=    p.epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
624	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON_MEAN);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON_MEAN);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mapping,  DEFAULT_EPSILON_MEAN);	  int    epsilon    =    Math.max(mapping,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
625	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	126	None	replace
626	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
627	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
628	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  0,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	75	None	replace
629	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl(p,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
630	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_PESILON;  [CE]  incompatible  types  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_PESILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_PESILON;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    epsilon;    	non-compiled	[CE]  incompatible  types	30	None	replace
631	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(def));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(def));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(def));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
632	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
633	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  *  1;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
634	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  *  1;	  mean    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	18	6	replace
635	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
636	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN);	  	compilable	  [FE]  MathRuntimeException$4  	41	1	add
637	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	41	None	add
638	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	146	None	replace
639	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	85	None	replace
640	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(mean,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
641	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  0;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  0;	  mean    =    DEFAULT_EPSILON;    mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	59	6	replace
642	[BUG]  [BUGGY]  mean  =  0;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  0;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  0;	  mean    =    DEFAULT_EPSILON;    mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	59	6	replace
643	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  epsilon;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
644	[BUG]  [BUGGY]  p  -=  epsilon;  epsilon  -=  p;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  epsilon;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
645	[BUG]  [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  epsilon  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  epsilon  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	if(p  <  =  0)  {  mean  -=  p;  epsilon  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }	  mean    -=    p;    epsilon    -=    p;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
646	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0.0,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0.0,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	3	None	replace
647	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	62	None	replace
648	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	62	None	replace
649	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	61	6	replace
650	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	61	6	replace
651	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	61	None	replace
652	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  this.maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  this.maxIterations);	  Integer    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
653	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  epsilon);	  Integer    epsilon    =    FastMath.sqrt(p,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
654	[BUG]  [BUGGY]  PoissonDistributionImpl(pe,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  pe  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(pe,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(pe,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  pe	122	None	replace
655	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    +    1;    mean  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
656	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  mean  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    mean  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
657	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
658	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  /  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
659	[BUG]  [BUGGY]  mean  =  p  /  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  /  DEFAULT_MAX_ITERATIONS;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
660	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
661	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_MIN_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  p  *  2;	  mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	116	8	replace
663	[BUG]  [BUGGY]  mean  =  p  *  2;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  *  2;	  mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	116	8	replace
664	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON_MEAN);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON_MEAN);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definition,  DEFAULT_EPSILON_MEAN);	  int    epsilon    =    Math.max(definition,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
665	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
666	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	108	None	replace
667	[BUG]  [BUGGY]  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
668	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
669	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  defsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  defsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  defsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
670	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  DEFAULT_EPSILON;  mean  -=  p;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
671	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  p;  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON;  mean  -=  p;	  mean    -=    p;    mean    -=    p;    	compilable	  [FE]  FunctionEvaluationException  	65	10	replace
672	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
673	[BUG]  [BUGGY]  int  epsilon  =  Math.max(maxIterations,  definable);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(maxIterations,  definable);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(maxIterations,  definable);	  int    epsilon    =    Math.max(definable,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
674	[BUG]  [BUGGY]  int  epsilon  =  Math.max(definable,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(definable,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(definable,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(definable,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
675	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	86	None	replace
676	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	86	None	replace
677	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);	  Integer    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	44	None	replace
678	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  FastMath.sqrt(deFAULT_EPSILON));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  FastMath.sqrt(deFAULT_EPSILON));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  FastMath.sqrt(deFAULT_EPSILON));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
679	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer)/  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer)/  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer)/  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
680	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
681	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  1;	  mean    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	52	10	replace
682	[BUG]  [BUGGY]  mean  -=  1;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  1;	  mean    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	52	10	replace
683	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(definition,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(definition,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(definition,  DEFAULT_MAX_ITERATIONS);	  Integer    epsilon    =    Math.max(defult_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	46	None	replace
684	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(defult_MAX_ITERATIONS));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(defult_MAX_ITERATIONS));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0,  FastMath.sqrt(defult_MAX_ITERATIONS));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(defult_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	147	None	replace
685	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(maxIterations));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(maxIterations));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(maxIterations));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(defult_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	147	None	replace
686	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
687	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  p);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
688	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  mean  -=  p;  epsilon  -=  p;  [CE]  ';'  expected  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  mean  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    int  mean  -=  p;  epsilon  -=  p;	  	non-compiled	[CE]  ';'  expected	68	None	add
689	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  mean  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    mean  -=  p;  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
690	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  mean  -=  p;  epsilon  -=  p;  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  mean  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    mean  -=  p;  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
691	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  int  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    int  mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	68	None	add
692	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
693	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
694	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(def);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(def);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(def);	  Integer    epsilon    =    FastMath.sqrt(peer);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	131	None	replace
695	[BUG]  [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  MathRuntimeException( " ");  }	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
696	[BUG]  [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
697	[BUG]  [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
698	[BUG]  [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  return  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  return  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	if(p  <  =  0)  {  mean  -=  p;  p  -=  p;  mean  -=  p;  }  else  {  return  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
699	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
700	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	53	None	add
701	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  mean  =  Math.min(Math.abs(p),  epsilon  +  1);	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
702	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);	  Integer    epsilon    =    Math.max(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	43	None	replace
703	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  p;  mean  -=  p;  [CE]  not  a  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    p;  mean  -=  p;	  	non-compiled	[CE]  not  a  statement	64	None	add
704	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.abs(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
705	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.abs(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.abs(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
706	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.max(mean,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    mean  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
707	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.max(mean,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  mean  =  Math.max(mean,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    mean  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
708	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.abs(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    p  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
709	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.abs(p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.abs(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    p  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
710	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
711	[BUG]  [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]              FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	70	6	replace
712	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]                FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  DEFAULT_EPSILON;  Math.max(Math.abs(p)/  DEFAULT_EPSILON);	  mean    -=    p;    Math.max(Math.abs(p)/    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	70	None	replace
713	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
714	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
715	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
716	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	81	1	add
717	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(16,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(16,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
718	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(16,  p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  Math.sqrt(Math.pow(16,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    Math.sqrt(Math.pow(16,  p));	  	compilable	  [FE]  MathRuntimeException$4  	139	1	add
719	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(maxIterations,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	replace
720	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	66	None	add
721	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
722	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    p  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	66	12	add
723	[BUG]  [BUGGY]  PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  m  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  m	34	None	replace
724	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	73	None	replace
725	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	73	None	replace
726	[BUG]  [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  2;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	add
727	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
728	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  FastMath.sqrt(p).doubleValue();  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  FastMath.sqrt(p).doubleValue();	  double    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	87	None	replace
729	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
730	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
731	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
732	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  int  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  int  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    int  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
733	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
734	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
735	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
736	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
737	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.sqrt(p);  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    p  =  Math.sqrt(p);  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	11	add
738	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.sqrt(p);  epsilon  -=  p;  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.sqrt(p);  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    p  =  Math.sqrt(p);  epsilon  -=  p;	  	compilable	  [FE]  FunctionEvaluationException  	68	11	add
739	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    p  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
740	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.max(Math.abs(p),  epsilon);  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  p  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    p  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  FunctionEvaluationException  	68	8	add
741	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  =  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;  epsilon  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	68	4	add
742	[BUG]  [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  =  p;  [FE]  MathRuntimeException$4  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    epsilon  -=  p;  epsilon  -=  p;  epsilon  =  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        epsilon    -=    p;    epsilon  -=  p;  epsilon  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	68	4	add
743	[BUG]  [BUGGY]  PoissonDistributionImpl(def,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  def  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(def,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(def,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  def	153	None	replace
744	[BUG]  [BUGGY]  PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
745	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(deFAULT_EPSILON));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(deFAULT_EPSILON));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(deFAULT_EPSILON));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(deFAULT_EPSILON));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
746	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(deFAULT_EPSILON));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
747	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(deFAULT_EPSILON));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(deFAULT_EPSILON));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(deFAULT_EPSILON));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(deFAULT_EPSILON));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
748	[BUG]  [BUGGY]  PoissonDistributionImpl(this.mean,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.mean,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.mean,  p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
749	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
750	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	151	1	add
751	[BUG]  [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  int  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;  int  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        p        +        DEFAULT_EPSILON;        p    =    p    +    DEFAULT_EPSILON;    int  mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	151	None	add
752	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  *  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
753	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS  *  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON    /    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	6	replace
754	[BUG]  [BUGGY]  mean  :  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  :  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  :  DEFAULT_EPSILON?  DEFAULT_MAX_ITERATIONS  :  DEFAULT_EPSILON;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  not  a  statement	28	None	replace
755	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  int  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  int  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    int  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
756	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	19	4	add
757	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	19	4	add
758	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
759	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    *    DEFAULT_MAX_ITERATIONS;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
760	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	14	None	replace
761	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_PESILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_PESILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_PESILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	14	None	replace
762	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
763	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
764	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
765	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
766	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	5	None	replace
767	[BUG]  [BUGGY]  int  mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  mean  might  not  have  been  initialized  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  int    mean    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	109	None	replace
768	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	145	None	replace
769	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    p,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	12	None	replace
770	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(peer),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
771	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  deFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	157	None	replace
772	[BUG]  [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  defULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(this.epsilon,  p,  defULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(this.epsilon,  p,  defULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(this.epsilon,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	123	None	replace
773	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	149	None	replace
774	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	149	None	replace
775	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
776	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  deFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS),  DEFAULT_EPSILON,  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
777	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(parent,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	replace
778	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	replace
779	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	91	None	replace
780	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS  +  1));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(deFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	146	None	replace
781	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	83	None	replace
782	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	6	None	replace
783	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  p;  Math.sqrt(Math.abs(p));  mean  -=  p;  [CE]  not  a  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  p;  Math.sqrt(Math.abs(p));  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    p;  Math.sqrt(Math.abs(p));  mean  -=  p;	  	non-compiled	[CE]  not  a  statement	71	None	add
784	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  p  =  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    p  =  Math.sqrt(Math.abs(p));	  	compilable	  [FE]  MathRuntimeException$4  	71	7	add
785	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  p  =  Math.sqrt(Math.abs(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.abs(p));  mean  -=  p;  p  =  Math.sqrt(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.abs(p));    mean    -=    p;    p  =  Math.sqrt(Math.abs(p));	  	compilable	  [FE]  MathRuntimeException$4  	71	7	add
786	[BUG]  [BUGGY]  double  mean  -=  p;  p  -=  p;  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  mean  -=  p;  p  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  mean  -=  p;  p  -=  p;	  mean    -=    p;    p    -=    p;    	non-compiled	[CE]  ';'  expected	67	None	replace
787	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    maxIterations,    epsilon);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
788	[BUG]  [BUGGY]  long  epsilon  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  long  epsilon  =  FastMath.sqrt(p);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	long  epsilon  =  FastMath.sqrt(p);	  float    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	129	None	replace
789	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);	  Integer    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
790	[BUG]  [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	37	None	add
791	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_PESILON;  [CE]  cannot  find  symbol  DEFAULT_PESILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_PESILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_PESILON;	  mean    =    p    +    DEFAULT_EPSILON;    mean    =    p    +    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PESILON	82	None	replace
792	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	106	None	replace
793	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
794	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  FastMath.sqrt(p,  DEFAULT_MASK);	  int    epsilon    =    FastMath.sqrt(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
795	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(d),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(d),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(d),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
796	[BUG]  [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);  mean  -=  p;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.abs(p),  DEFAULT_EPSILON);  mean  -=  p;	  mean    -=    p;    Math.sqrt(Math.abs(p));    mean    -=    p;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
797	[BUG]  [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  p  +  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  mean    =    p    +    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	84	None	replace
798	[BUG]  [BUGGY]  double  epsilon  =  Math.max(defulT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(defulT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(defulT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(defulT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	155	None	replace
799	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  epsilon;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	6	replace
800	[BUG]  [BUGGY]  p  -=  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  epsilon;	  p    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	136	6	replace
801	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.abs(p),  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.abs(p),  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.abs(p),  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
802	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    p  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	12	add
803	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  p  -=  p;  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    p  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	12	add
804	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    p  =  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
805	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  p;  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    p  =  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
806	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        mean    -=    p;    p  =  Math.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	7	add
807	[BUG]  [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    mean  -=  p;  p  =  Math.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        mean    -=    p;    p  =  Math.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	64	7	add
808	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(m));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(m));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(m));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(peer));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	125	None	replace
809	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
810	[BUG]  [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    =    DEFAULT_EPSILON;    mean  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        =        DEFAULT_EPSILON;        mean    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	58	1	add
811	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	replace
812	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	replace
813	[BUG]  [BUGGY]  Neighbor  mean  -=  p;  p  -=  p;  mean  -=  p;  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Neighbor  mean  -=  p;  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Neighbor  mean  -=  p;  p  -=  p;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  ';'  expected	142	None	replace
814	[BUG]  [BUGGY]  p  -=  psilon;  mean  -=  p;  [CE]  cannot  find  symbol  psilon  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  psilon;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  psilon;  mean  -=  p;	  mean    -=    p;    p    -=    p;    mean    -=    p;    	non-compiled	[CE]  cannot  find  symbol  psilon	142	None	replace
815	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    +    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
816	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	35	1	add
817	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
818	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
819	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	95	None	replace
820	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(message);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(message);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Integer  epsilon  =  FastMath.sqrt(message);	  Integer    epsilon    =    FastMath.sqrt(m);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	132	None	replace
821	[BUG]  [BUGGY]  int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(peer,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(peer,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	replace
822	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
823	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	10	None	replace
824	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	156	None	replace
825	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  DEFAULT_EPSILON;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
826	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  epsilon  -=  p;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  DEFAULT_EPSILON;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	6	replace
827	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p  -=  p;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	12	replace
828	[BUG]  [BUGGY]  p  -=  p;  epsilon  -=  p;  [FE]  MathRuntimeException$4  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  p;  epsilon  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p  -=  p;  epsilon  -=  p;	  mean    -=    p;    epsilon    -=    p;    	compilable	  [FE]  MathRuntimeException$4  	69	12	replace
829	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(2,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Math.sqrt(Math.pow(2,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
830	[BUG]  [BUGGY]  Math.sqrt(Math.pow(2,  p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Math.sqrt(Math.pow(2,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Math.sqrt(Math.pow(2,  p));	  mean    -=    p;    Math.sqrt(Math.pow(10,    p));    	compilable	  [FE]  MathRuntimeException$4  	140	6	replace
831	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
832	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;  mean  -=  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	51	1	add
833	[BUG]  [BUGGY]  mean  -=  DEFAULT_EPSILON;  Math.max(mean,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  DEFAULT_EPSILON;  Math.max(mean,  DEFAULT_EPSILON));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    DEFAULT_EPSILON;    Math.max(mean,  DEFAULT_EPSILON));	  	non-compiled	[CE]  ';'  expected	51	None	add
834	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
835	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
836	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(PoissonDistributionImpl,double)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));	  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(PoissonDistributionImpl,double)	135	None	add
837	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
838	[BUG]  [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  p  -=  DEFAULT_EPSILON;  p  -=  DEFAULT_EPSILON;  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	p    -=    DEFAULT_EPSILON;    p  -=  DEFAULT_EPSILON;  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	135	2	add
839	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
840	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(dest),  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(dest),  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(dest),  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
841	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	134	None	replace
842	[BUG]  [BUGGY]  mean  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  mean    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	63	None	replace
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  p  +=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    -=    p    +    1;    p  +=  p  +  1;	  	compilable	  [FE]  AssertionFailedError  	53	9	add
844	[BUG]  [BUGGY]  mean  -=  p  +  1;  p  +=  p  +  1;  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  p  +=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    p  +=  p  +  1;	  	compilable	  [FE]  AssertionFailedError  	53	9	add
845	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  mean  -=  p  +  1;  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  mean  -=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  mean  -=  p  +  1;	  	non-compiled	[CE]  ';'  expected	53	None	add
846	[BUG]  [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.min(Math.abs(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  p  +  1;  int  epsilon  =  Math.min(Math.abs(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    -=    p    +    1;    int  epsilon  =  Math.min(Math.abs(p));	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	53	None	add
847	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MEMBER_SIZE;  [CE]  incompatible  types  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MEMBER_SIZE;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_MEMBER_SIZE;	  mean    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    epsilon;    	non-compiled	[CE]  incompatible  types	30	None	replace
848	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    int  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
849	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN	41	None	add
850	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(1.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean  -=  Math.max(1.0,  p);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
851	[BUG]  [BUGGY]  mean  -=  Math.max(1.0,  p);  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(1.0,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(1.0,  p);	  mean    -=    Math.max(0.0,    p);    	compilable	  [FE]  FunctionEvaluationException  	57	10	replace
852	[BUG]  [BUGGY]  mean  -=  Math.max(0.0,  normal);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution)  [FE]      FunctionEvaluationException    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  -=  Math.max(0.0,  normal);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean  -=  Math.max(0.0,  normal);	  mean    -=    Math.max(0.0,    p);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution)	57	None	replace
853	[BUG]  [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  pe  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl(pe,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  pe	33	None	replace
854	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  p  =  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    p  =  Math.sqrt(Math.pow(10,  p));	  	compilable	  [FE]  ConvergenceException  	139	9	add
855	[BUG]  [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  p  =  Math.sqrt(Math.pow(10,  p));  [FE]  ConvergenceException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    Math.sqrt(Math.pow(10,  p));  p  =  Math.sqrt(Math.pow(10,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        Math.sqrt(Math.pow(10,    p));    p  =  Math.sqrt(Math.pow(10,  p));	  	compilable	  [FE]  ConvergenceException  	139	9	add
856	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  FastMath.sqrt(p),  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
857	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
858	[BUG]  [BUGGY]  double  epsilon  =  Math.max(maxIterations,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  double  epsilon  =  Math.max(maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	double  epsilon  =  Math.max(maxIterations,  epsilon);	  double    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	154	None	replace
859	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
860	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  mean  -=  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  mean  -=  p;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  mean  -=  p;	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
861	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
862	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
863	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(PoissonDistributionImpl,double)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(this,  FastMath.sqrt(p));	  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(PoissonDistributionImpl,double)	141	None	add
864	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(0.0,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(0.0,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
865	[BUG]  [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(0.0,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean    -=    p;    p  -=  p;  mean  -=  p;  p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(0.0,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean        -=        p;        p    -=    p;    mean    -=    p;    p  -=  p;  p  -=  p;  normal  =  new  NormalDistributionImpl(0.0,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	141	12	add
866	[BUG]  [BUGGY]  int  epsilon  =  Math.max(deFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(deFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(deFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  double    epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	148	None	replace
867	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(mean,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(mean,  epsilon,  maxIterations);	  int    epsilon    =    Math.max(mapping,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	49	None	replace
868	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
869	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  int  mean  =  p  *  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  int  mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    int  mean  =  p  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	39	None	add
870	[BUG]  [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    p    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  mean  =  p  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
871	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	98	None	replace
872	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	74	None	replace
873	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS)/  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS)/  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deFAULT_MAX_ITERATIONS)/  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(p)/    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	114	None	replace
874	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(1.0,  1.0,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(1.0,  1.0,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(1.0,  1.0,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
875	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  1.0,  epsilon,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    1.0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
876	[BUG]  [BUGGY]  int  mean  -=  p  +  1;  [CE]  ';'  expected  [FE]        FunctionEvaluationException      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  int  mean  -=  p  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	int  mean  -=  p  +  1;	  mean    -=    p;    int    mean    -=    p;    	non-compiled	[CE]  ';'  expected	103	None	replace
877	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  epsilon,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(0.0,  0,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(0.0,    0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	112	None	replace
878	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Double  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	Double  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	150	6	replace
879	[BUG]  [BUGGY]  Double  mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  Double  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	Double  mean  =  p  +  DEFAULT_EPSILON;	  mean    =    p    +    DEFAULT_EPSILON;    int    mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	150	6	replace
880	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  this.maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  this.maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  this.maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    this.maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	107	None	replace
881	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this,  DEFAULT_EPSILON,  p,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this,    DEFAULT_EPSILON,    p,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	9	None	replace
882	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  epsilon);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.epsilon,  DEFAULT_EPSILON,  this.maxIterations,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(this.epsilon,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	replace
883	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
884	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deficult_MAX_ITERATIONS));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deficult_MAX_ITERATIONS));  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(deficult_MAX_ITERATIONS));	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    FastMath.sqrt(defult_MAX_ITERATIONS));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	147	None	replace
885	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	113	None	replace
886	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);  [BUGGY]      mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DeFAULT_EPSILON,  FastMath.sqrt(p)-  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DeFAULT_EPSILON,    FastMath.sqrt(p),    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	113	None	replace
887	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
888	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	add
889	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	add	mean    =    DEFAULT_EPSILON    +    1;    epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	17	4	add
890	[BUG]  [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }      [BUGGY]  mean  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	96	96	1	replace	mean    =    DEFAULT_EPSILON    +    1;    epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	17	4	add
